cscope 15 $HOME\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\embitz\XRange\LoRaMac\ClassA"               0000570986
	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\apps\LoRaMac\classA\XRange\Commissioning.h

15 #i‚de‡
__LORA_COMMISSIONING_H__


16 
	#__LORA_COMMISSIONING_H__


	)

22 
	#OVER_THE_AIR_ACTIVATION
 1

	)

27 
	#LORAWAN_PUBLIC_NETWORK
 
åue


	)

41 
	#LORAWAN_DEVICE_EUI
 { 0x0B, 0x00, 0xF4, 0xFF, 0x6F, 0x3E, 0x90, 0xC1 }

	)

49 
	#LORAWAN_APPLICATION_EUI
 { 0x70, 0xB3, 0xD5, 0x7E, 0xF0, 0x00, 0x49, 0xE1 }

	)

56 
	#LORAWAN_APPLICATION_KEY
 { 0x30, 0x4C, 0x99, 0x26, 0x3E, 0xA5, 0xE6, 0x43, 0xB5, 0xA0, 0x8C, 0xB3, 0x25, 0x4A, 0x61, 0xFA }

	)

61 
	#LORAWAN_NETWORK_ID
 ( 
uöt32_t
 )0

	)

70 
	#LORAWAN_DEVICE_ADDRESS
 ( 
uöt32_t
 )0x00000000

	)

75 
	#LORAWAN_NWKSKEY
 { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C }

	)

80 
	#LORAWAN_APPSKEY
 { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6, 0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C }

	)

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\apps\LoRaMac\classA\XRange\main.c

18 
	~<°rög.h
>

19 
	~<m©h.h
>

20 
	~"bﬂrd.h
"

22 
	~"LoRaMac.h
"

23 
	~"Commissi⁄ög.h
"

28 
	#APP_TX_DUTYCYCLE
 5000

	)

34 
	#APP_TX_DUTYCYCLE_RND
 1000

	)

39 
	#LORAWAN_DEFAULT_DATARATE
 
DR_0


	)

44 
	#LORAWAN_CONFIRMED_MSG_ON
 
Ál£


	)

51 
	#LORAWAN_ADR_ON
 1

	)

53 #i‡
deföed
–
USE_BAND_868
 )

55 
	~"LoRaMacTe°.h
"

62 
	#LORAWAN_DUTYCYCLE_ON
 
åue


	)

64 
	#USE_SEMTECH_DEFAULT_CHANNEL_LINEUP
 1

	)

66 #if–
USE_SEMTECH_DEFAULT_CHANNEL_LINEUP
 == 1 )

68 
	#LC4
 { 867100000, { ( ( 
DR_5
 << 4 ) | 
DR_0
 ) }, 0 }

	)

69 
	#LC5
 { 867300000, { ( ( 
DR_5
 << 4 ) | 
DR_0
 ) }, 0 }

	)

70 
	#LC6
 { 867500000, { ( ( 
DR_5
 << 4 ) | 
DR_0
 ) }, 0 }

	)

71 
	#LC7
 { 867700000, { ( ( 
DR_5
 << 4 ) | 
DR_0
 ) }, 0 }

	)

72 
	#LC8
 { 867900000, { ( ( 
DR_5
 << 4 ) | 
DR_0
 ) }, 0 }

	)

73 
	#LC9
 { 868800000, { ( ( 
DR_7
 << 4 ) | DR_7 ) }, 2 }

	)

74 
	#LC10
 { 868300000, { ( ( 
DR_6
 << 4 ) | DR_6 ) }, 1 }

	)

83 
	#LORAWAN_APP_PORT
 2

	)

88 #i‡
deföed
–
USE_BAND_868
 )

90 
	#LORAWAN_APP_DATA_SIZE
 16

	)

92 #ñi‡
deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

94 
	#LORAWAN_APP_DATA_SIZE
 11

	)

98 
uöt8_t
 
	gDevEui
[] = 
LORAWAN_DEVICE_EUI
;

99 
uöt8_t
 
	gAµEui
[] = 
LORAWAN_APPLICATION_EUI
;

100 
uöt8_t
 
	gAµKey
[] = 
LORAWAN_APPLICATION_KEY
;

102 #if–
OVER_THE_AIR_ACTIVATION
 == 0 )

104 
uöt8_t
 
	gNwkSKey
[] = 
LORAWAN_NWKSKEY
;

105 
uöt8_t
 
	gAµSKey
[] = 
LORAWAN_APPSKEY
;

110 
uöt32_t
 
	gDevAddr
 = 
LORAWAN_DEVICE_ADDRESS
;

117 
uöt8_t
 
	gAµP‹t
 = 
LORAWAN_APP_PORT
;

122 
uöt8_t
 
	gAµD©aSize
 = 
LORAWAN_APP_DATA_SIZE
;

127 
	#LORAWAN_APP_DATA_MAX_SIZE
 64

	)

132 
uöt8_t
 
	gAµD©a
[
LORAWAN_APP_DATA_MAX_SIZE
];

137 
uöt8_t
 
	gIsTxC⁄fúmed
 = 
LORAWAN_CONFIRMED_MSG_ON
;

142 
uöt32_t
 
	gTxDutyCy˛eTime
;

147 
TimîEvít_t
 
	gTxNextPackëTimî
;

152 
boﬁ
 
	gAµLedSèãOn
 = 
Ál£
;

157 
TimîEvít_t
 
	gLed1Timî
;

162 
TimîEvít_t
 
	gLed2Timî
;

167 
boﬁ
 
	gNextTx
 = 
åue
;

172 
	eeDevi˚Sèã


174 
	mDEVICE_STATE_INIT
,

175 
	mDEVICE_STATE_JOIN
,

176 
	mDEVICE_STATE_SEND
,

177 
	mDEVICE_STATE_CYCLE
,

178 
	mDEVICE_STATE_SLEEP


179 }
	gDevi˚Sèã
;

184 
	sCom∂ün˚Te°_s


186 
boﬁ
 
	mRu¬ög
;

187 
uöt8_t
 
	mSèã
;

188 
boﬁ
 
	mIsTxC⁄fúmed
;

189 
uöt8_t
 
	mAµP‹t
;

190 
uöt8_t
 
	mAµD©aSize
;

191 
uöt8_t
 *
	mAµD©aBuf„r
;

192 
uöt16_t
 
	mDownLökCou¡î
;

193 
boﬁ
 
	mLökCheck
;

194 
uöt8_t
 
	mDemodM¨gö
;

195 
uöt8_t
 
	mNbG©eways
;

196 }
	gCom∂ün˚Te°
;

201 
	$Pª∑ªTxFøme
–
uöt8_t
 
p‹t
 )

203  
p‹t
 )

207 #i‡
	`deföed
–
USE_BAND_868
 )

208 
uöt16_t
 
¥essuª
 = 0;

209 
öt16_t
 
ÆtôudeB¨
 = 0;

210 
öt16_t
 
ãm≥øtuª
 = 0;

211 
öt32_t
 
œtôude
=0, 
l⁄gôude
 = 0;

212 
öt16_t
 
ÆtôudeGps
 = 0xFFFF;

213 
uöt8_t
 
b©ãryLevñ
 = 0;

215 
¥essuª
 = ( 
uöt16_t
 )0;

216 
ãm≥øtuª
 = ( 
öt16_t
 )0;

217 
ÆtôudeB¨
 = ( 
öt16_t
 )0;

218 
b©ãryLevñ
 = 0;

219 
ÆtôudeGps
 = 0;

221 
AµD©a
[0] = 
AµLedSèãOn
;

222 
AµD©a
[1] = ( 
¥essuª
 >> 8 ) & 0xFF;

223 
AµD©a
[2] = 
¥essuª
 & 0xFF;

224 
AµD©a
[3] = ( 
ãm≥øtuª
 >> 8 ) & 0xFF;

225 
AµD©a
[4] = 
ãm≥øtuª
 & 0xFF;

226 
AµD©a
[5] = ( 
ÆtôudeB¨
 >> 8 ) & 0xFF;

227 
AµD©a
[6] = 
ÆtôudeB¨
 & 0xFF;

228 
AµD©a
[7] = 
b©ãryLevñ
;

229 
AµD©a
[8] = ( 
œtôude
 >> 16 ) & 0xFF;

230 
AµD©a
[9] = ( 
œtôude
 >> 8 ) & 0xFF;

231 
AµD©a
[10] = 
œtôude
 & 0xFF;

232 
AµD©a
[11] = ( 
l⁄gôude
 >> 16 ) & 0xFF;

233 
AµD©a
[12] = ( 
l⁄gôude
 >> 8 ) & 0xFF;

234 
AµD©a
[13] = 
l⁄gôude
 & 0xFF;

235 
AµD©a
[14] = ( 
ÆtôudeGps
 >> 8 ) & 0xFF;

236 
AµD©a
[15] = 
ÆtôudeGps
 & 0xFF;

237 #ñi‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

238 
öt16_t
 
ãm≥øtuª
 = 0;

239 
öt32_t
 
œtôude
, 
l⁄gôude
 = 0;

240 
uöt16_t
 
ÆtôudeGps
 = 0xFFFF;

241 
uöt8_t
 
b©ãryLevñ
 = 0;

243 
ãm≥øtuª
 = ( 
öt16_t
 )–
	`MPL3115RódTem≥øtuª
( ) * 100 );

245 
b©ãryLevñ
 = 
	`BﬂrdGëB©ãryLevñ
( );

246 
	`GpsGëL©e°GpsPosôi⁄Bö¨y
–&
œtôude
, &
l⁄gôude
 );

247 
ÆtôudeGps
 = 
	`GpsGëL©e°GpsA…ôude
( );

249 
AµD©a
[0] = 
AµLedSèãOn
;

250 
AµD©a
[1] = 
ãm≥øtuª
;

251 
AµD©a
[2] = 
b©ãryLevñ
;

252 
AµD©a
[3] = ( 
œtôude
 >> 16 ) & 0xFF;

253 
AµD©a
[4] = ( 
œtôude
 >> 8 ) & 0xFF;

254 
AµD©a
[5] = 
œtôude
 & 0xFF;

255 
AµD©a
[6] = ( 
l⁄gôude
 >> 16 ) & 0xFF;

256 
AµD©a
[7] = ( 
l⁄gôude
 >> 8 ) & 0xFF;

257 
AµD©a
[8] = 
l⁄gôude
 & 0xFF;

258 
AµD©a
[9] = ( 
ÆtôudeGps
 >> 8 ) & 0xFF;

259 
AµD©a
[10] = 
ÆtôudeGps
 & 0xFF;

264 if–
Com∂ün˚Te°
.
LökCheck
 =
åue
 )

266 
Com∂ün˚Te°
.
LökCheck
 = 
Ál£
;

267 
AµD©aSize
 = 3;

268 
AµD©a
[0] = 5;

269 
AµD©a
[1] = 
Com∂ün˚Te°
.
DemodM¨gö
;

270 
AµD©a
[2] = 
Com∂ün˚Te°
.
NbG©eways
;

271 
Com∂ün˚Te°
.
Sèã
 = 1;

275  
Com∂ün˚Te°
.
Sèã
 )

278 
Com∂ün˚Te°
.
Sèã
 = 1;

281 
AµD©aSize
 = 2;

282 
AµD©a
[0] = 
Com∂ün˚Te°
.
DownLökCou¡î
 >> 8;

283 
AµD©a
[1] = 
Com∂ün˚Te°
.
DownLökCou¡î
;

291 
	}
}

298 
boﬁ
 
	$SídFøme
( )

300 
M˝sReq_t
 
m˝sReq
;

301 
LoRaMacTxInfo_t
 
txInfo
;

303 if–
	`LoRaMacQuîyTxPossibÀ
–
AµD©aSize
, &
txInfo
 ) !
LORAMAC_STATUS_OK
 )

306 
m˝sReq
.
Ty≥
 = 
MCPS_UNCONFIRMED
;

307 
m˝sReq
.
Req
.
Unc⁄fúmed
.
fBuf„r
 = 
NULL
;

308 
m˝sReq
.
Req
.
Unc⁄fúmed
.
fBuf„rSize
 = 0;

309 
m˝sReq
.
Req
.
Unc⁄fúmed
.
D©¨©e
 = 
LORAWAN_DEFAULT_DATARATE
;

313 if–
IsTxC⁄fúmed
 =
Ál£
 )

315 
m˝sReq
.
Ty≥
 = 
MCPS_UNCONFIRMED
;

316 
m˝sReq
.
Req
.
Unc⁄fúmed
.
fP‹t
 = 
AµP‹t
;

317 
m˝sReq
.
Req
.
Unc⁄fúmed
.
fBuf„r
 = 
AµD©a
;

318 
m˝sReq
.
Req
.
Unc⁄fúmed
.
fBuf„rSize
 = 
AµD©aSize
;

319 
m˝sReq
.
Req
.
Unc⁄fúmed
.
D©¨©e
 = 
LORAWAN_DEFAULT_DATARATE
;

323 
m˝sReq
.
Ty≥
 = 
MCPS_CONFIRMED
;

324 
m˝sReq
.
Req
.
C⁄fúmed
.
fP‹t
 = 
AµP‹t
;

325 
m˝sReq
.
Req
.
C⁄fúmed
.
fBuf„r
 = 
AµD©a
;

326 
m˝sReq
.
Req
.
C⁄fúmed
.
fBuf„rSize
 = 
AµD©aSize
;

327 
m˝sReq
.
Req
.
C⁄fúmed
.
NbTrüls
 = 8;

328 
m˝sReq
.
Req
.
C⁄fúmed
.
D©¨©e
 = 
LORAWAN_DEFAULT_DATARATE
;

332 if–
	`LoRaMacM˝sReque°
–&
m˝sReq
 ) =
LORAMAC_STATUS_OK
 )

334  
Ál£
;

336  
åue
;

337 
	}
}

342 
	$OnTxNextPackëTimîEvít
( )

344 
MibReque°C⁄fúm_t
 
mibReq
;

345 
LoRaMacSètus_t
 
°©us
;

347 
	`TimîSt›
–&
TxNextPackëTimî
 );

349 
mibReq
.
Ty≥
 = 
MIB_NETWORK_JOINED
;

350 
°©us
 = 
	`LoRaMacMibGëReque°C⁄fúm
–&
mibReq
 );

352 if–
°©us
 =
LORAMAC_STATUS_OK
 )

354 if–
mibReq
.
P¨am
.
IsNëw‹kJoöed
 =
åue
 )

356 
Devi˚Sèã
 = 
DEVICE_STATE_SEND
;

357 
NextTx
 = 
åue
;

361 
Devi˚Sèã
 = 
DEVICE_STATE_JOIN
;

364 
	}
}

369 
	$OnLed1TimîEvít
( )

371 
	`TimîSt›
–&
Led1Timî
 );

373 
	`GpioWrôe
–&
Led1
, 1 );

374 
	}
}

379 
	$OnLed2TimîEvít
( )

381 
	`TimîSt›
–&
Led2Timî
 );

383 
	`GpioWrôe
–&
Led2
, 1 );

384 
	}
}

392 
	$M˝sC⁄fúm
–
M˝sC⁄fúm_t
 *
m˝sC⁄fúm
 )

394 if–
m˝sC⁄fúm
->
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_OK
 )

396  
m˝sC⁄fúm
->
M˝sReque°
 )

398 
MCPS_UNCONFIRMED
:

404 
MCPS_CONFIRMED
:

412 
MCPS_PROPRIETARY
:

421 
	`GpioWrôe
–&
Led1
, 0 );

422 
	`TimîSèπ
–&
Led1Timî
 );

424 
NextTx
 = 
åue
;

425 
	}
}

433 
	$M˝sIndiˇti⁄
–
M˝sIndiˇti⁄_t
 *
m˝sIndiˇti⁄
 )

435 if–
m˝sIndiˇti⁄
->
Sètus
 !
LORAMAC_EVENT_INFO_STATUS_OK
 )

440  
m˝sIndiˇti⁄
->
M˝sIndiˇti⁄
 )

442 
MCPS_UNCONFIRMED
:

446 
MCPS_CONFIRMED
:

450 
MCPS_PROPRIETARY
:

454 
MCPS_MULTICAST
:

472 if–
Com∂ün˚Te°
.
Ru¬ög
 =
åue
 )

474 
Com∂ün˚Te°
.
DownLökCou¡î
++;

477 if–
m˝sIndiˇti⁄
->
RxD©a
 =
åue
 )

479  
m˝sIndiˇti⁄
->
P‹t
 )

483 if–
m˝sIndiˇti⁄
->
Buf„rSize
 == 1 )

485 
AµLedSèãOn
 = 
m˝sIndiˇti⁄
->
Buf„r
[0] & 0x01;

490 if–
Com∂ün˚Te°
.
Ru¬ög
 =
Ál£
 )

493 if––
m˝sIndiˇti⁄
->
Buf„rSize
 == 4 ) &&

494 –
m˝sIndiˇti⁄
->
Buf„r
[0] == 0x01 ) &&

495 –
m˝sIndiˇti⁄
->
Buf„r
[1] == 0x01 ) &&

496 –
m˝sIndiˇti⁄
->
Buf„r
[2] == 0x01 ) &&

497 –
m˝sIndiˇti⁄
->
Buf„r
[3] == 0x01 ) )

499 
IsTxC⁄fúmed
 = 
Ál£
;

500 
AµP‹t
 = 224;

501 
AµD©aSize
 = 2;

502 
Com∂ün˚Te°
.
DownLökCou¡î
 = 0;

503 
Com∂ün˚Te°
.
LökCheck
 = 
Ál£
;

504 
Com∂ün˚Te°
.
DemodM¨gö
 = 0;

505 
Com∂ün˚Te°
.
NbG©eways
 = 0;

506 
Com∂ün˚Te°
.
Ru¬ög
 = 
åue
;

507 
Com∂ün˚Te°
.
Sèã
 = 1;

509 
MibReque°C⁄fúm_t
 
mibReq
;

510 
mibReq
.
Ty≥
 = 
MIB_ADR
;

511 
mibReq
.
P¨am
.
AdrE«bÀ
 = 
åue
;

512 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

514 #i‡
	`deföed
–
USE_BAND_868
 )

515 
	`LoRaMacTe°SëDutyCy˛eOn
–
Ál£
 );

522 
Com∂ün˚Te°
.
Sèã
 = 
m˝sIndiˇti⁄
->
Buf„r
[0];

523  
Com∂ün˚Te°
.
Sèã
 )

526 
IsTxC⁄fúmed
 = 
LORAWAN_CONFIRMED_MSG_ON
;

527 
AµP‹t
 = 
LORAWAN_APP_PORT
;

528 
AµD©aSize
 = 
LORAWAN_APP_DATA_SIZE
;

529 
Com∂ün˚Te°
.
DownLökCou¡î
 = 0;

530 
Com∂ün˚Te°
.
Ru¬ög
 = 
Ál£
;

532 
MibReque°C⁄fúm_t
 
mibReq
;

533 
mibReq
.
Ty≥
 = 
MIB_ADR
;

534 
mibReq
.
P¨am
.
AdrE«bÀ
 = 
LORAWAN_ADR_ON
;

535 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

536 #i‡
	`deföed
–
USE_BAND_868
 )

537 
	`LoRaMacTe°SëDutyCy˛eOn
–
LORAWAN_DUTYCYCLE_ON
 );

542 
AµD©aSize
 = 2;

545 
IsTxC⁄fúmed
 = 
åue
;

546 
Com∂ün˚Te°
.
Sèã
 = 1;

549 
IsTxC⁄fúmed
 = 
Ál£
;

550 
Com∂ün˚Te°
.
Sèã
 = 1;

553 
AµD©aSize
 = 
m˝sIndiˇti⁄
->
Buf„rSize
;

555 
AµD©a
[0] = 4;

556  
uöt8_t
 
i
 = 1; i < 
AµD©aSize
; i++ )

558 
AµD©a
[
i
] = 
m˝sIndiˇti⁄
->
Buf„r
[i] + 1;

563 
MlmeReq_t
 
mlmeReq
;

564 
mlmeReq
.
Ty≥
 = 
MLME_LINK_CHECK
;

565 
	`LoRaMacMlmeReque°
–&
mlmeReq
 );

570 
MlmeReq_t
 
mlmeReq
;

573 
IsTxC⁄fúmed
 = 
LORAWAN_CONFIRMED_MSG_ON
;

574 
AµP‹t
 = 
LORAWAN_APP_PORT
;

575 
AµD©aSize
 = 
LORAWAN_APP_DATA_SIZE
;

576 
Com∂ün˚Te°
.
DownLökCou¡î
 = 0;

577 
Com∂ün˚Te°
.
Ru¬ög
 = 
Ál£
;

579 
MibReque°C⁄fúm_t
 
mibReq
;

580 
mibReq
.
Ty≥
 = 
MIB_ADR
;

581 
mibReq
.
P¨am
.
AdrE«bÀ
 = 
LORAWAN_ADR_ON
;

582 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

583 #i‡
	`deföed
–
USE_BAND_868
 )

584 
	`LoRaMacTe°SëDutyCy˛eOn
–
LORAWAN_DUTYCYCLE_ON
 );

588 
mlmeReq
.
Ty≥
 = 
MLME_JOIN
;

590 
mlmeReq
.
Req
.
Joö
.
DevEui
 = DevEui;

591 
mlmeReq
.
Req
.
Joö
.
AµEui
 = AppEui;

592 
mlmeReq
.
Req
.
Joö
.
AµKey
 = AppKey;

593 
mlmeReq
.
Req
.
Joö
.
NbTrüls
 = 3;

595 
	`LoRaMacMlmeReque°
–&
mlmeReq
 );

596 
Devi˚Sèã
 = 
DEVICE_STATE_SLEEP
;

601 if–
m˝sIndiˇti⁄
->
Buf„rSize
 == 3 )

603 
MlmeReq_t
 
mlmeReq
;

604 
mlmeReq
.
Ty≥
 = 
MLME_TXCW
;

605 
mlmeReq
.
Req
.
TxCw
.
Timeout
 = ( 
uöt16_t
 )––
m˝sIndiˇti⁄
->
Buf„r
[1] << 8 ) | mcpsIndication->Buffer[2] );

606 
	`LoRaMacMlmeReque°
–&
mlmeReq
 );

608 
Com∂ün˚Te°
.
Sèã
 = 1;

622 
	`GpioWrôe
–&
Led2
, 0 );

623 
	`TimîSèπ
–&
Led2Timî
 );

624 
	}
}

632 
	$MlmeC⁄fúm
–
MlmeC⁄fúm_t
 *
mlmeC⁄fúm
 )

634  
mlmeC⁄fúm
->
MlmeReque°
 )

636 
MLME_JOIN
:

638 if–
mlmeC⁄fúm
->
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_OK
 )

641 
Devi˚Sèã
 = 
DEVICE_STATE_SEND
;

646 
Devi˚Sèã
 = 
DEVICE_STATE_JOIN
;

650 
MLME_LINK_CHECK
:

652 if–
mlmeC⁄fúm
->
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_OK
 )

656 if–
Com∂ün˚Te°
.
Ru¬ög
 =
åue
 )

658 
Com∂ün˚Te°
.
LökCheck
 = 
åue
;

659 
Com∂ün˚Te°
.
DemodM¨gö
 = 
mlmeC⁄fúm
->DemodMargin;

660 
Com∂ün˚Te°
.
NbG©eways
 = 
mlmeC⁄fúm
->NbGateways;

668 
NextTx
 = 
åue
;

669 
	}
}

671 
	~"u¨t-usb-bﬂrd.h
"

675 
	$maö
( )

677 
LoRaMacPrimôives_t
 
LoRaMacPrimôives
;

678 
LoRaMacCÆlback_t
 
LoRaMacCÆlbacks
;

679 
MibReque°C⁄fúm_t
 
mibReq
;

681 
	`BﬂrdInôMcu
( );

700 
	`BﬂrdInôPîùh
( );

702 
Devi˚Sèã
 = 
DEVICE_STATE_INIT
;

706  
Devi˚Sèã
 )

708 
DEVICE_STATE_INIT
:

710 
LoRaMacPrimôives
.
MacM˝sC⁄fúm
 = 
M˝sC⁄fúm
;

711 
LoRaMacPrimôives
.
MacM˝sIndiˇti⁄
 = 
M˝sIndiˇti⁄
;

712 
LoRaMacPrimôives
.
MacMlmeC⁄fúm
 = 
MlmeC⁄fúm
;

713 
LoRaMacCÆlbacks
.
GëB©ãryLevñ
 = 
BﬂrdGëB©ãryLevñ
;

714 
	`LoRaMacInôüliz©i⁄
–&
LoRaMacPrimôives
, &
LoRaMacCÆlbacks
 );

716 
	`TimîInô
–&
TxNextPackëTimî
, 
OnTxNextPackëTimîEvít
 );

718 
	`TimîInô
–&
Led1Timî
, 
OnLed1TimîEvít
 );

719 
	`TimîSëVÆue
–&
Led1Timî
, 25 );

721 
	`TimîInô
–&
Led2Timî
, 
OnLed2TimîEvít
 );

722 
	`TimîSëVÆue
–&
Led2Timî
, 25 );

724 
mibReq
.
Ty≥
 = 
MIB_ADR
;

725 
mibReq
.
P¨am
.
AdrE«bÀ
 = 
LORAWAN_ADR_ON
;

726 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

728 
mibReq
.
Ty≥
 = 
MIB_PUBLIC_NETWORK
;

729 
mibReq
.
P¨am
.
E«bÀPublicNëw‹k
 = 
LORAWAN_PUBLIC_NETWORK
;

730 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

732 #i‡
	`deföed
–
USE_BAND_868
 )

733 
	`LoRaMacTe°SëDutyCy˛eOn
–
LORAWAN_DUTYCYCLE_ON
 );

735 #if–
USE_SEMTECH_DEFAULT_CHANNEL_LINEUP
 == 1 )

736 
	`LoRaMacCh™√lAdd
–3, ( 
Ch™√lP¨ams_t
 )
LC4
 );

737 
	`LoRaMacCh™√lAdd
–4, ( 
Ch™√lP¨ams_t
 )
LC5
 );

738 
	`LoRaMacCh™√lAdd
–5, ( 
Ch™√lP¨ams_t
 )
LC6
 );

739 
	`LoRaMacCh™√lAdd
–6, ( 
Ch™√lP¨ams_t
 )
LC7
 );

740 
	`LoRaMacCh™√lAdd
–7, ( 
Ch™√lP¨ams_t
 )
LC8
 );

741 
	`LoRaMacCh™√lAdd
–8, ( 
Ch™√lP¨ams_t
 )
LC9
 );

742 
	`LoRaMacCh™√lAdd
–9, ( 
Ch™√lP¨ams_t
 )
LC10
 );

744 
mibReq
.
Ty≥
 = 
MIB_RX2_DEFAULT_CHANNEL
;

745 
mibReq
.
P¨am
.
Rx2DeÁu…Ch™√l
 = ( 
Rx2Ch™√lP¨ams_t
 ){ 869525000, 
DR_3
 };

746 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

748 
mibReq
.
Ty≥
 = 
MIB_RX2_CHANNEL
;

749 
mibReq
.
P¨am
.
Rx2Ch™√l
 = ( 
Rx2Ch™√lP¨ams_t
 ){ 869525000, 
DR_3
 };

750 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

754 
Devi˚Sèã
 = 
DEVICE_STATE_JOIN
;

757 
DEVICE_STATE_JOIN
:

759 #if–
OVER_THE_AIR_ACTIVATION
 != 0 )

760 
MlmeReq_t
 
mlmeReq
;

765 
mlmeReq
.
Ty≥
 = 
MLME_JOIN
;

767 
mlmeReq
.
Req
.
Joö
.
DevEui
 = DevEui;

768 
mlmeReq
.
Req
.
Joö
.
AµEui
 = AppEui;

769 
mlmeReq
.
Req
.
Joö
.
AµKey
 = AppKey;

770 
mlmeReq
.
Req
.
Joö
.
NbTrüls
 = 3;

772 if–
NextTx
 =
åue
 )

774 
	`LoRaMacMlmeReque°
–&
mlmeReq
 );

776 
Devi˚Sèã
 = 
DEVICE_STATE_SLEEP
;

779 if–
DevAddr
 == 0 )

782 
	`§™d1
–
	`BﬂrdGëR™domSìd
( ) );

785 
DevAddr
 = 
	`øndr
( 0, 0x01FFFFFF );

788 
mibReq
.
Ty≥
 = 
MIB_NET_ID
;

789 
mibReq
.
P¨am
.
NëID
 = 
LORAWAN_NETWORK_ID
;

790 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

792 
mibReq
.
Ty≥
 = 
MIB_DEV_ADDR
;

793 
mibReq
.
P¨am
.
DevAddr
 = DevAddr;

794 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

796 
mibReq
.
Ty≥
 = 
MIB_NWK_SKEY
;

797 
mibReq
.
P¨am
.
NwkSKey
 = NwkSKey;

798 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

800 
mibReq
.
Ty≥
 = 
MIB_APP_SKEY
;

801 
mibReq
.
P¨am
.
AµSKey
 = AppSKey;

802 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

804 
mibReq
.
Ty≥
 = 
MIB_NETWORK_JOINED
;

805 
mibReq
.
P¨am
.
IsNëw‹kJoöed
 = 
åue
;

806 
	`LoRaMacMibSëReque°C⁄fúm
–&
mibReq
 );

808 
Devi˚Sèã
 = 
DEVICE_STATE_SEND
;

812 
DEVICE_STATE_SEND
:

814 if–
NextTx
 =
åue
 )

816 
	`Pª∑ªTxFøme
–
AµP‹t
 );

818 
NextTx
 = 
	`SídFøme
( );

820 if–
Com∂ün˚Te°
.
Ru¬ög
 =
åue
 )

823 
TxDutyCy˛eTime
 = 5000;

828 
TxDutyCy˛eTime
 = 
APP_TX_DUTYCYCLE
 + 
	`øndr
–-
APP_TX_DUTYCYCLE_RND
, APP_TX_DUTYCYCLE_RND );

830 
Devi˚Sèã
 = 
DEVICE_STATE_CYCLE
;

833 
DEVICE_STATE_CYCLE
:

835 
Devi˚Sèã
 = 
DEVICE_STATE_SLEEP
;

838 
	`TimîSëVÆue
–&
TxNextPackëTimî
, 
TxDutyCy˛eTime
 );

839 
	`TimîSèπ
–&
TxNextPackëTimî
 );

842 
DEVICE_STATE_SLEEP
:

845 
	`TimîLowPowîH™dÀr
( );

850 
Devi˚Sèã
 = 
DEVICE_STATE_INIT
;

855 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\adc-board.c

15 
	~"bﬂrd.h
"

16 
	~"adc-bﬂrd.h
"

18 
ADC_H™dÀTy≥Def
 
	gAdcH™dÀ
;

20 
	$AdcMcuInô
–
Adc_t
 *
obj
, 
PöNames
 
adcI≈ut
 )

22 
AdcH™dÀ
.
In°™˚
 = ( 
ADC_Ty≥Def
* )
ADC1_BASE
;

24 
	`__HAL_RCC_ADC1_CLK_ENABLE
( );

26 
	`HAL_ADC_DeInô
–&
AdcH™dÀ
 );

28 if–
adcI≈ut
 !
NC
 )

30 
	`GpioInô
–&
obj
->
AdcI≈ut
, 
adcI≈ut
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

32 
	}
}

34 
	$AdcMcuC⁄fig
( )

37 
AdcH™dÀ
.
Inô
.
Resﬁuti⁄
 = 
ADC_RESOLUTION_12B
;

38 
AdcH™dÀ
.
Inô
.
D©aAlign
 = 
ADC_DATAALIGN_RIGHT
;

39 
AdcH™dÀ
.
Inô
.
C⁄töuousC⁄vMode
 = 
DISABLE
;

40 
AdcH™dÀ
.
Inô
.
Disc⁄töuousC⁄vMode
 = 
DISABLE
;

41 
AdcH™dÀ
.
Inô
.
Exã∫ÆTrigC⁄vEdge
 = 
ADC_EXTERNALTRIGCONVEDGE_NONE
;

42 
AdcH™dÀ
.
Inô
.
Exã∫ÆTrigC⁄v
 = 
ADC_EXTERNALTRIGCONV_T6_TRGO
;

43 
AdcH™dÀ
.
Inô
.
DMAC⁄töuousReque°s
 = 
DISABLE
;

44 
AdcH™dÀ
.
Inô
.
EOCSñe˘i⁄
 = 
ADC_EOC_SINGLE_CONV
;

45 
AdcH™dÀ
.
Inô
.
NbrOfC⁄vîsi⁄
 = 1;

46 
AdcH™dÀ
.
Inô
.
LowPowîAutoWaô
 = 
DISABLE
;

47 
AdcH™dÀ
.
Inô
.
LowPowîAutoPowîOff
 = 
DISABLE
;

48 
	`HAL_ADC_Inô
–&
AdcH™dÀ
 );

49 
	}
}

51 
uöt16_t
 
	$AdcMcuRódCh™√l
–
Adc_t
 *
obj
, 
uöt32_t
 
ch™√l
 )

53 
ADC_Ch™√lC⁄fTy≥Def
 
adcC⁄f
 = { 0 };

54 
uöt16_t
 
adcD©a
 = 0;

57 
	`__HAL_RCC_HSI_ENABLE
( );

60  
	`__HAL_RCC_GET_FLAG
–
RCC_FLAG_HSIRDY
 ) =
RESET
 )

64 
	`__HAL_RCC_ADC1_CLK_ENABLE
( );

66 
adcC⁄f
.
Ch™√l
 = 
ch™√l
;

67 
adcC⁄f
.
R™k
 = 
ADC_REGULAR_RANK_1
;

68 
adcC⁄f
.
Sam∂ögTime
 = 
ADC_SAMPLETIME_192CYCLES
;

70 
	`HAL_ADC_C⁄figCh™√l
–&
AdcH™dÀ
, &
adcC⁄f
 );

73 
	`__HAL_ADC_ENABLE
–&
AdcH™dÀ
 );

76 
	`HAL_ADC_Sèπ
–&
AdcH™dÀ
 );

78 
	`HAL_ADC_PﬁlF‹C⁄vîsi⁄
–&
AdcH™dÀ
, 
HAL_MAX_DELAY
 );

80 
adcD©a
 = 
	`HAL_ADC_GëVÆue
–&
AdcH™dÀ
 );

82 
	`__HAL_ADC_DISABLE
–&
AdcH™dÀ
 );

84 if––
adcC⁄f
.
Ch™√l
 =
ADC_CHANNEL_TEMPSENSOR
 ) || (ádcC⁄f.Ch™√»=
ADC_CHANNEL_VREFINT
 ) )

86 
	`HAL_ADC_DeInô
–&
AdcH™dÀ
 );

88 
	`__HAL_RCC_ADC1_CLK_DISABLE
( );

91 
	`__HAL_RCC_HSI_DISABLE
( );

93  
adcD©a
;

94 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\board.c

15 
	~"bﬂrd.h
"

20 
	#ID1
 ( 0x1FF80050 )

	)

21 
	#ID2
 ( 0x1FF80054 )

	)

22 
	#ID3
 ( 0x1FF80064 )

	)

27 
Gpio_t
 
	gLed1
;

28 
Gpio_t
 
	gLed2
;

29 
Gpio_t
 
	gLed3
;

31 #i‡
deföed
–
USE_DEBUG_PINS
 )

32 
Gpio_t
 
	gDbgPö1
;

33 
Gpio_t
 
	gDbgPö2
;

34 
Gpio_t
 
	gDbgPö3
;

35 
Gpio_t
 
	gDbgPö4
;

36 
Gpio_t
 
	gDbgPö5
;

42 
Adc_t
 
	gAdc
;

43 
I2c_t
 
	gI2c
;

44 
U¨t_t
 
	gU¨t1
;

45 #i‡
deföed
–
USE_USB_CDC
 )

46 
U¨t_t
 
	gU¨tUsb
;

52 
BﬂrdUnu£dIoInô
( );

57 
Sy°emClockC⁄fig
( );

62 
CÆibøãSy°emWakeupTime
( );

67 
Sy°emClockReC⁄fig
( );

72 
TimîEvít_t
 
	gCÆibøãSy°emWakeupTimeTimî
;

77 
boﬁ
 
	gMcuInôülized
 = 
Ál£
;

82 
boﬁ
 
	gSy°emWakeupTimeCÆibøãd
 = 
Ál£
;

87 
	$OnCÆibøãSy°emWakeupTimeTimîEvít
( )

89 
Sy°emWakeupTimeCÆibøãd
 = 
åue
;

90 
	}
}

97 
uöt8_t
 
	gIrqNe°Levñ
 = 0;

99 
	$BﬂrdDißbÀIrq
( )

101 
	`__dißbÀ_úq
( );

102 
IrqNe°Levñ
++;

103 
	}
}

105 
	$BﬂrdE«bÀIrq
( )

107 
IrqNe°Levñ
--;

108 if–
IrqNe°Levñ
 == 0 )

110 
	`__íabÀ_úq
( );

112 
	}
}

114 
	$BﬂrdInôPîùh
( )

116 
	`GpioInô
–&
Led1
, 
LED_1
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

117 
	`GpioInô
–&
Led2
, 
LED_2
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

118 
	`GpioInô
–&
Led3
, 
LED_3
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

120 
	`GpioWrôe
–&
Led1
, 1 );

121 
	`GpioWrôe
–&
Led2
, 1 );

122 
	`GpioWrôe
–&
Led3
, 1 );

123 
	}
}

125 
	$BﬂrdInôMcu
( )

127 if–
McuInôülized
 =
Ál£
 )

129 #i‡
	`deföed
–
USE_BOOTLOADER
 )

131 
SCB
->
VTOR
 = 
FLASH_BASE
 | 0x3000;

133 
	`HAL_Inô
( );

135 
	`Sy°emClockC⁄fig
( );

137 #i‡
	`deföed
–
USE_USB_CDC
 )

138 
	`U¨tInô
–&
U¨tUsb
, 
UART_USB_CDC
, 
NC
, NC );

139 
	`U¨tC⁄fig
–&
U¨tUsb
, 
RX_TX
, 115200, 
UART_8_BIT
, 
UART_1_STOP_BIT
, 
NO_PARITY
, 
NO_FLOW_CTRL
 );

141 
	`DñayMs
( 1000 );

144 
	`RtcInô
( );

146 
	`BﬂrdUnu£dIoInô
( );

150 #i‡
	`deföed
–
USE_DEBUG_PINS
 )

151 
	`GpioInô
–&
DbgPö1
, 
CON_EXT_1
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

152 
	`GpioInô
–&
DbgPö2
, 
CON_EXT_3
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

153 
	`GpioInô
–&
DbgPö3
, 
CON_EXT_7
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

154 
	`GpioInô
–&
DbgPö4
, 
CON_EXT_8
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

155 
	`GpioInô
–&
DbgPö5
, 
CON_EXT_9
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

160 
	`Sy°emClockReC⁄fig
( );

165 
	`SpiInô
–&
SX1272
.
Spi
, 
RADIO_MOSI
, 
RADIO_MISO
, 
RADIO_SCLK
, 
NC
 );

166 
	`SX1272IoInô
( );

168 if–
McuInôülized
 =
Ál£
 )

170 
McuInôülized
 = 
åue
;

171 if–
	`GëBﬂrdPowîSour˚
–Ë=
BATTERY_POWER
 )

173 
	`CÆibøãSy°emWakeupTime
( );

176 
	}
}

178 
	$BﬂrdDeInôMcu
( )

180 
Gpio_t
 
ioPö
;

182 
	`AdcDeInô
–&
Adc
 );

184 
	`SpiDeInô
–&
SX1272
.
Spi
 );

185 
	`SX1272IoDeInô
( );

187 
	`GpioInô
–&
ioPö
, 
OSC_HSE_IN
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 1 );

188 
	`GpioInô
–&
ioPö
, 
OSC_HSE_OUT
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 1 );

190 
	`GpioInô
–&
ioPö
, 
OSC_LSE_IN
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 1 );

191 
	`GpioInô
–&
ioPö
, 
OSC_LSE_OUT
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 1 );

192 
	}
}

194 
uöt32_t
 
	$BﬂrdGëR™domSìd
( )

196  ( ( *–
uöt32_t
* )
ID1
 ) ^ ( *–uöt32_t* )
ID2
 ) ^ ( *–uöt32_t* )
ID3
 ) );

197 
	}
}

199 
	$BﬂrdGëUniqueId
–
uöt8_t
 *
id
 )

201 
id
[7] = ( ( *–
uöt32_t
* )
ID1
 )+ ( *–uöt32_t* )
ID3
 ) ) >> 24;

202 
id
[6] = ( ( *–
uöt32_t
* )
ID1
 )+ ( *–uöt32_t* )
ID3
 ) ) >> 16;

203 
id
[5] = ( ( *–
uöt32_t
* )
ID1
 )+ ( *–uöt32_t* )
ID3
 ) ) >> 8;

204 
id
[4] = ( ( *–
uöt32_t
* )
ID1
 )+ ( *–uöt32_t* )
ID3
 ) );

205 
id
[3] = ( ( *–
uöt32_t
* )
ID2
 ) ) >> 24;

206 
id
[2] = ( ( *–
uöt32_t
* )
ID2
 ) ) >> 16;

207 
id
[1] = ( ( *–
uöt32_t
* )
ID2
 ) ) >> 8;

208 
id
[0] = ( ( *–
uöt32_t
* )
ID2
 ) );

209 
	}
}

214 
	#FACTORY_POWER_SUPPLY
 3300

215 

	)

219 
	#VREFINT_CAL
 ( *–
uöt16_t
* )0x1FF80078 )

	)

224 
	#ADC_MAX_VALUE
 4095

	)

229 
	#BATTERY_MAX_LEVEL
 9000

230 
	#BATTERY_MIN_LEVEL
 4700

231 
	#BATTERY_SHUTDOWN_LEVEL
 4800

232 

	)

233 
uöt16_t
 
	gB©ãryVﬁège
 = 
BATTERY_MAX_LEVEL
;

235 
uöt16_t
 
	$BﬂrdB©ãryMósuªVﬁage
( )

237 
uöt16_t
 
vdd
 = 0;

238 
uöt16_t
 
vªf
 = 
VREFINT_CAL
;

239 
uöt16_t
 
vdiv
 = 0;

240 
uöt16_t
 
b©ãryVﬁège
 = 0;

242 
vdiv
 = 
	`AdcRódCh™√l
–&
Adc
, 
BAT_LEVEL_CHANNEL
 );

245 
vdd
 = ( )
FACTORY_POWER_SUPPLY
 * ( )
VREFINT_CAL
 / ( )
vªf
;

246 
b©ãryVﬁège
 = 
vdd
 * ( ( )
vdiv
 / ( )
ADC_MAX_VALUE
 );

250 
b©ãryVﬁège
 = 3 * batteryVoltage;

251  
b©ãryVﬁège
;

252 
	}
}

254 
uöt32_t
 
	$BﬂrdGëB©ãryVﬁège
( )

256  
B©ãryVﬁège
;

257 
	}
}

259 
uöt8_t
 
	$BﬂrdGëB©ãryLevñ
( )

261 
uöt8_t
 
b©ãryLevñ
 = 0;

263 
B©ãryVﬁège
 = 
	`BﬂrdB©ãryMósuªVﬁage
( );

265 if–
	`GëBﬂrdPowîSour˚
–Ë=
USB_POWER
 )

267 
b©ãryLevñ
 = 0;

271 if–
B©ãryVﬁège
 >
BATTERY_MAX_LEVEL
 )

273 
b©ãryLevñ
 = 254;

275 if––
B©ãryVﬁège
 > 
BATTERY_MIN_LEVEL
 ) && ( B©ãryVﬁègê< 
BATTERY_MAX_LEVEL
 ) )

277 
b©ãryLevñ
 = ( ( 253 * ( 
B©ãryVﬁège
 - 
BATTERY_MIN_LEVEL
 ) ) / ( 
BATTERY_MAX_LEVEL
 - BATTERY_MIN_LEVEL ) ) + 1;

279 if––
B©ãryVﬁège
 > 
BATTERY_SHUTDOWN_LEVEL
 ) && ( B©ãryVﬁègê<
BATTERY_MIN_LEVEL
 ) )

281 
b©ãryLevñ
 = 1;

285 
b©ãryLevñ
 = 255;

288  
b©ãryLevñ
;

289 
	}
}

291 
	$BﬂrdUnu£dIoInô
( )

293 
Gpio_t
 
ioPö
;

296 #i‡!
	`deföed
–
USE_DEBUG_PINS
 )

297 
	`GpioInô
–&
ioPö
, 
CON_EXT_1
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

298 
	`GpioInô
–&
ioPö
, 
CON_EXT_3
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

299 
	`GpioInô
–&
ioPö
, 
CON_EXT_7
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

300 
	`GpioInô
–&
ioPö
, 
CON_EXT_8
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

301 
	`GpioInô
–&
ioPö
, 
CON_EXT_9
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

304 if–
	`GëBﬂrdPowîSour˚
–Ë=
BATTERY_POWER
 )

306 
	`GpioInô
–&
ioPö
, 
USB_DM
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

307 
	`GpioInô
–&
ioPö
, 
USB_DP
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

310 
	`GpioInô
–&
ioPö
, 
BOOT_1
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

312 
	`GpioInô
–&
ioPö
, 
BAT_LEVEL_PIN
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

314 
	`GpioInô
–&
ioPö
, 
PIN_PB6
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

315 
	`GpioInô
–&
ioPö
, 
WKUP1
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

317 #i‡
	`deföed
–
USE_DEBUGGER
 )

318 
	`HAL_DBGMCU_E«bÀDBGSt›Mode
( );

319 
	`HAL_DBGMCU_E«bÀDBGSÀïMode
( );

320 
	`HAL_DBGMCU_E«bÀDBGSèndbyMode
( );

322 
	`HAL_DBGMCU_DißbÀDBGSÀïMode
( );

323 
	`HAL_DBGMCU_DißbÀDBGSt›Mode
( );

324 
	`HAL_DBGMCU_DißbÀDBGSèndbyMode
( );

326 
	`GpioInô
–&
ioPö
, 
JTAG_TMS
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

327 
	`GpioInô
–&
ioPö
, 
JTAG_TCK
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

328 
	`GpioInô
–&
ioPö
, 
JTAG_TDI
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

329 
	`GpioInô
–&
ioPö
, 
JTAG_TDO
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

330 
	`GpioInô
–&
ioPö
, 
JTAG_NRST
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

332 
	}
}

334 
	$Sy°emClockC⁄fig
( )

336 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
;

337 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
;

338 
RCC_PîùhCLKInôTy≥Def
 
PîùhClkInô
;

340 
	`__HAL_RCC_PWR_CLK_ENABLE
( );

342 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
–
PWR_REGULATOR_VOLTAGE_SCALE1
 );

344 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_LSE
;

345 
RCC_OscInôSåu˘
.
HSESèã
 = 
RCC_HSE_ON
;

346 
RCC_OscInôSåu˘
.
LSESèã
 = 
RCC_LSE_ON
;

347 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

348 
RCC_OscInôSåu˘
.
PLL
.
PLLSour˚
 = 
RCC_PLLSOURCE_HSE
;

349 
RCC_OscInôSåu˘
.
PLL
.
PLLMUL
 = 
RCC_PLL_MUL6
;

350 
RCC_OscInôSåu˘
.
PLL
.
PLLDIV
 = 
RCC_PLL_DIV3
;

351 if–
	`HAL_RCC_OscC⁄fig
–&
RCC_OscInôSåu˘
 ) !
HAL_OK
 )

353 
	`as£π_∑øm
–
FAIL
 );

356 
RCC_ClkInôSåu˘
.
ClockTy≥
 = 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_SYSCLK
 |

357 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

358 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

359 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

360 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV1
;

361 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

362 if–
	`HAL_RCC_ClockC⁄fig
–&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_1
 ) !
HAL_OK
 )

364 
	`as£π_∑øm
–
FAIL
 );

367 
PîùhClkInô
.
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
;

368 
PîùhClkInô
.
RTCClockSñe˘i⁄
 = 
RCC_RTCCLKSOURCE_LSE
;

369 if–
	`HAL_RCCEx_PîùhCLKC⁄fig
–&
PîùhClkInô
 ) !
HAL_OK
 )

371 
	`as£π_∑øm
–
FAIL
 );

374 
	`HAL_SYSTICK_C⁄fig
–
	`HAL_RCC_GëHCLKFªq
( ) / 1000 );

376 
	`HAL_SYSTICK_CLKSour˚C⁄fig
–
SYSTICK_CLKSOURCE_HCLK
 );

379 
	`HAL_NVIC_SëPri‹ôyGroupög
–
NVIC_PRIORITYGROUP_4
 );

382 
	`HAL_NVIC_SëPri‹ôy
–
SysTick_IRQn
, 0, 0 );

383 
	}
}

385 
	$CÆibøãSy°emWakeupTime
( )

387 if–
Sy°emWakeupTimeCÆibøãd
 =
Ál£
 )

389 
	`TimîInô
–&
CÆibøãSy°emWakeupTimeTimî
, 
OnCÆibøãSy°emWakeupTimeTimîEvít
 );

390 
	`TimîSëVÆue
–&
CÆibøãSy°emWakeupTimeTimî
, 1000 );

391 
	`TimîSèπ
–&
CÆibøãSy°emWakeupTimeTimî
 );

392  
Sy°emWakeupTimeCÆibøãd
 =
Ál£
 )

394 
	`TimîLowPowîH™dÀr
( );

397 
	}
}

399 
	$Sy°emClockReC⁄fig
( )

401 
	`__HAL_RCC_PWR_CLK_ENABLE
( );

402 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
–
PWR_REGULATOR_VOLTAGE_SCALE1
 );

405 
	`__HAL_RCC_HSE_CONFIG
–
RCC_HSE_ON
 );

408  
	`__HAL_RCC_GET_FLAG
–
RCC_FLAG_HSERDY
 ) =
RESET
 )

413 
	`__HAL_RCC_PLL_ENABLE
( );

416  
	`__HAL_RCC_GET_FLAG
–
RCC_FLAG_PLLRDY
 ) =
RESET
 )

421 
	`__HAL_RCC_SYSCLK_CONFIG
 ( 
RCC_SYSCLKSOURCE_PLLCLK
 );

424  
	`__HAL_RCC_GET_SYSCLK_SOURCE
–Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
 )

427 
	}
}

429 
	$SysTick_H™dÀr
( )

431 
	`HAL_IncTick
( );

432 
	`HAL_SYSTICK_IRQH™dÀr
( );

433 
	}
}

435 
uöt8_t
 
	$GëBﬂrdPowîSour˚
( )

437 #i‡
	`deföed
–
USE_USB_CDC
 )

438 if–
	`U¨tUsbIsUsbCabÀC⁄√˘ed
( ) == 0 )

440  
BATTERY_POWER
;

444  
USB_POWER
;

447  
BATTERY_POWER
;

449 
	}
}

451 #ifde‡
USE_FULL_ASSERT


461 
	$as£π_Áûed
–
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
 )

470 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\cmsis\arm-gcc\startup_stm32l151xc.s

47 .
sy¡ax
 
	gunifõd


48 .
˝u
 
	gc‹ãx
-
	gm3


49 .
Âu
 
	gso·vÂ


50 .
	gthumb


52 .
globÆ
 
	gg_p‚Ve˘‹s


53 .
globÆ
 
	gDeÁu…_H™dÀr


57 .
w‹d
 
	g_sid©a


59 .
w‹d
 
	g_sd©a


61 .
w‹d
 
	g_ed©a


63 .
w‹d
 
	g_sbss


65 .
w‹d
 
	g_ebss


67 .
equ
 
	gBoŸRAM
, 0xF108F85F

77 .
	g£˘i⁄
 .
	gãxt
.
	gRe£t_H™dÀr


78 .
wók
 
	gRe£t_H™dÀr


79 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


80 
	gRe£t_H™dÀr
:

83 
movs
 
r1
, #0

84 
b
 
Lo›C›yD©aInô


86 
	gC›yD©aInô
:

87 
ldr
 
r3
, =
_sid©a


88 
ldr
 
r3
, [r3, 
r1
]

89 
°r
 
	gr3
, [
r0
, 
r1
]

90 
adds
 
	gr1
,Ñ1, #4

92 
	gLo›C›yD©aInô
:

93 
ldr
 
r0
, =
_sd©a


94 
ldr
 
r3
, =
_ed©a


95 
adds
 
r2
, 
	gr0
, 
r1


96 
cmp
 
	gr2
, 
r3


97 
bcc
 
C›yD©aInô


98 
ldr
 
	gr2
, =
_sbss


99 
b
 
Lo›FûlZîobss


101 
FûlZîobss
:

102 
movs
 
r3
, #0

103 
°r
 
	gr3
, [
r2
], #4

105 
	gLo›FûlZîobss
:

106 
ldr
 
r3
, = 
_ebss


107 
cmp
 
r2
, 
r3


108 
bcc
 
FûlZîobss


111 
bl
 
Sy°emInô


113 
bl
 
__libc_öô_¨øy


115 
bl
 
maö


116 
bx
 
	gÃ


117 .
size
 
	gRe£t_H™dÀr
, .-Reset_Handler

127 .
	g£˘i⁄
 .
	gãxt
.
	gDeÁu…_H™dÀr
,"ax",%
¥ogbôs


128 
	gDeÁu…_H™dÀr
:

129 
Inföôe_Lo›
:

130 
b
 
Inföôe_Lo›


131 .
size
 
DeÁu…_H™dÀr
, .-
	gDeÁu…_H™dÀr


139 .
	g£˘i⁄
 .
	gi§_ve˘‹
,"a",%
	g¥ogbôs


140 .
ty≥
 
	gg_p‚Ve˘‹s
, %
	gobje˘


141 .
size
 
	gg_p‚Ve˘‹s
, .-
g_p‚Ve˘‹s


144 
	gg_p‚Ve˘‹s
:

145 .
w‹d
 
_e°ack


146 .
w‹d
 
Re£t_H™dÀr


147 .
w‹d
 
NMI_H™dÀr


148 .
w‹d
 
H¨dFau…_H™dÀr


149 .
w‹d
 
MemM™age_H™dÀr


150 .
w‹d
 
BusFau…_H™dÀr


151 .
w‹d
 
UßgeFau…_H™dÀr


152 .
w‹d
 0

153 .
w‹d
 0

154 .
w‹d
 0

155 .
w‹d
 0

156 .
w‹d
 
SVC_H™dÀr


157 .
w‹d
 
DebugM⁄_H™dÀr


158 .
w‹d
 0

159 .
w‹d
 
PídSV_H™dÀr


160 .
w‹d
 
SysTick_H™dÀr


161 .
w‹d
 
WWDG_IRQH™dÀr


162 .
w‹d
 
PVD_IRQH™dÀr


163 .
w‹d
 
TAMPER_STAMP_IRQH™dÀr


164 .
w‹d
 
RTC_WKUP_IRQH™dÀr


165 .
w‹d
 
FLASH_IRQH™dÀr


166 .
w‹d
 
RCC_IRQH™dÀr


167 .
w‹d
 
EXTI0_IRQH™dÀr


168 .
w‹d
 
EXTI1_IRQH™dÀr


169 .
w‹d
 
EXTI2_IRQH™dÀr


170 .
w‹d
 
EXTI3_IRQH™dÀr


171 .
w‹d
 
EXTI4_IRQH™dÀr


172 .
w‹d
 
DMA1_Ch™√l1_IRQH™dÀr


173 .
w‹d
 
DMA1_Ch™√l2_IRQH™dÀr


174 .
w‹d
 
DMA1_Ch™√l3_IRQH™dÀr


175 .
w‹d
 
DMA1_Ch™√l4_IRQH™dÀr


176 .
w‹d
 
DMA1_Ch™√l5_IRQH™dÀr


177 .
w‹d
 
DMA1_Ch™√l6_IRQH™dÀr


178 .
w‹d
 
DMA1_Ch™√l7_IRQH™dÀr


179 .
w‹d
 
ADC1_IRQH™dÀr


180 .
w‹d
 
USB_HP_IRQH™dÀr


181 .
w‹d
 
USB_LP_IRQH™dÀr


182 .
w‹d
 
DAC_IRQH™dÀr


183 .
w‹d
 
COMP_IRQH™dÀr


184 .
w‹d
 
EXTI9_5_IRQH™dÀr


185 .
w‹d
 0

186 .
w‹d
 
TIM9_IRQH™dÀr


187 .
w‹d
 
TIM10_IRQH™dÀr


188 .
w‹d
 
TIM11_IRQH™dÀr


189 .
w‹d
 
TIM2_IRQH™dÀr


190 .
w‹d
 
TIM3_IRQH™dÀr


191 .
w‹d
 
TIM4_IRQH™dÀr


192 .
w‹d
 
I2C1_EV_IRQH™dÀr


193 .
w‹d
 
I2C1_ER_IRQH™dÀr


194 .
w‹d
 
I2C2_EV_IRQH™dÀr


195 .
w‹d
 
I2C2_ER_IRQH™dÀr


196 .
w‹d
 
SPI1_IRQH™dÀr


197 .
w‹d
 
SPI2_IRQH™dÀr


198 .
w‹d
 
USART1_IRQH™dÀr


199 .
w‹d
 
USART2_IRQH™dÀr


200 .
w‹d
 
USART3_IRQH™dÀr


201 .
w‹d
 
EXTI15_10_IRQH™dÀr


202 .
w‹d
 
RTC_Aœrm_IRQH™dÀr


203 .
w‹d
 
USB_FS_WKUP_IRQH™dÀr


204 .
w‹d
 
TIM6_IRQH™dÀr


205 .
w‹d
 
TIM7_IRQH™dÀr


206 .
w‹d
 0

207 .
w‹d
 
TIM5_IRQH™dÀr


208 .
w‹d
 
SPI3_IRQH™dÀr


209 .
w‹d
 0

210 .
w‹d
 0

211 .
w‹d
 
DMA2_Ch™√l1_IRQH™dÀr


212 .
w‹d
 
DMA2_Ch™√l2_IRQH™dÀr


213 .
w‹d
 
DMA2_Ch™√l3_IRQH™dÀr


214 .
w‹d
 
DMA2_Ch™√l4_IRQH™dÀr


215 .
w‹d
 
DMA2_Ch™√l5_IRQH™dÀr


216 .
w‹d
 0

217 .
w‹d
 
COMP_ACQ_IRQH™dÀr


218 .
w‹d
 0

219 .
w‹d
 0

220 .
w‹d
 0

221 .
w‹d
 0

222 .
w‹d
 0

223 .
w‹d
 
BoŸRAM


234 .
wók
 
NMI_H™dÀr


235 .
thumb_£t
 
NMI_H™dÀr
,
	gDeÁu…_H™dÀr


237 .
wók
 
	gH¨dFau…_H™dÀr


238 .
thumb_£t
 
	gH¨dFau…_H™dÀr
,
	gDeÁu…_H™dÀr


240 .
wók
 
	gMemM™age_H™dÀr


241 .
thumb_£t
 
	gMemM™age_H™dÀr
,
	gDeÁu…_H™dÀr


243 .
wók
 
	gBusFau…_H™dÀr


244 .
thumb_£t
 
	gBusFau…_H™dÀr
,
	gDeÁu…_H™dÀr


246 .
wók
 
	gUßgeFau…_H™dÀr


247 .
thumb_£t
 
	gUßgeFau…_H™dÀr
,
	gDeÁu…_H™dÀr


249 .
wók
 
	gSVC_H™dÀr


250 .
thumb_£t
 
	gSVC_H™dÀr
,
	gDeÁu…_H™dÀr


252 .
wók
 
	gDebugM⁄_H™dÀr


253 .
thumb_£t
 
	gDebugM⁄_H™dÀr
,
	gDeÁu…_H™dÀr


255 .
wók
 
	gPídSV_H™dÀr


256 .
thumb_£t
 
	gPídSV_H™dÀr
,
	gDeÁu…_H™dÀr


258 .
wók
 
	gSysTick_H™dÀr


259 .
thumb_£t
 
	gSysTick_H™dÀr
,
	gDeÁu…_H™dÀr


261 .
wók
 
	gWWDG_IRQH™dÀr


262 .
thumb_£t
 
	gWWDG_IRQH™dÀr
,
	gDeÁu…_H™dÀr


264 .
wók
 
	gPVD_IRQH™dÀr


265 .
thumb_£t
 
	gPVD_IRQH™dÀr
,
	gDeÁu…_H™dÀr


267 .
wók
 
	gTAMPER_STAMP_IRQH™dÀr


268 .
thumb_£t
 
	gTAMPER_STAMP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


270 .
wók
 
	gRTC_WKUP_IRQH™dÀr


271 .
thumb_£t
 
	gRTC_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


273 .
wók
 
	gFLASH_IRQH™dÀr


274 .
thumb_£t
 
	gFLASH_IRQH™dÀr
,
	gDeÁu…_H™dÀr


276 .
wók
 
	gRCC_IRQH™dÀr


277 .
thumb_£t
 
	gRCC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


279 .
wók
 
	gEXTI0_IRQH™dÀr


280 .
thumb_£t
 
	gEXTI0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


282 .
wók
 
	gEXTI1_IRQH™dÀr


283 .
thumb_£t
 
	gEXTI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


285 .
wók
 
	gEXTI2_IRQH™dÀr


286 .
thumb_£t
 
	gEXTI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


288 .
wók
 
	gEXTI3_IRQH™dÀr


289 .
thumb_£t
 
	gEXTI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


291 .
wók
 
	gEXTI4_IRQH™dÀr


292 .
thumb_£t
 
	gEXTI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


294 .
wók
 
	gDMA1_Ch™√l1_IRQH™dÀr


295 .
thumb_£t
 
	gDMA1_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


297 .
wók
 
	gDMA1_Ch™√l2_IRQH™dÀr


298 .
thumb_£t
 
	gDMA1_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


300 .
wók
 
	gDMA1_Ch™√l3_IRQH™dÀr


301 .
thumb_£t
 
	gDMA1_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


303 .
wók
 
	gDMA1_Ch™√l4_IRQH™dÀr


304 .
thumb_£t
 
	gDMA1_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


306 .
wók
 
	gDMA1_Ch™√l5_IRQH™dÀr


307 .
thumb_£t
 
	gDMA1_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


309 .
wók
 
	gDMA1_Ch™√l6_IRQH™dÀr


310 .
thumb_£t
 
	gDMA1_Ch™√l6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


312 .
wók
 
	gDMA1_Ch™√l7_IRQH™dÀr


313 .
thumb_£t
 
	gDMA1_Ch™√l7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


315 .
wók
 
	gADC1_IRQH™dÀr


316 .
thumb_£t
 
	gADC1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


318 .
wók
 
	gUSB_HP_IRQH™dÀr


319 .
thumb_£t
 
	gUSB_HP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


321 .
wók
 
	gUSB_LP_IRQH™dÀr


322 .
thumb_£t
 
	gUSB_LP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


324 .
wók
 
	gDAC_IRQH™dÀr


325 .
thumb_£t
 
	gDAC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


327 .
wók
 
	gCOMP_IRQH™dÀr


328 .
thumb_£t
 
	gCOMP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


330 .
wók
 
	gEXTI9_5_IRQH™dÀr


331 .
thumb_£t
 
	gEXTI9_5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


333 .
wók
 
	gTIM9_IRQH™dÀr


334 .
thumb_£t
 
	gTIM9_IRQH™dÀr
,
	gDeÁu…_H™dÀr


336 .
wók
 
	gTIM10_IRQH™dÀr


337 .
thumb_£t
 
	gTIM10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


339 .
wók
 
	gTIM11_IRQH™dÀr


340 .
thumb_£t
 
	gTIM11_IRQH™dÀr
,
	gDeÁu…_H™dÀr


342 .
wók
 
	gTIM2_IRQH™dÀr


343 .
thumb_£t
 
	gTIM2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


345 .
wók
 
	gTIM3_IRQH™dÀr


346 .
thumb_£t
 
	gTIM3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


348 .
wók
 
	gTIM4_IRQH™dÀr


349 .
thumb_£t
 
	gTIM4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


351 .
wók
 
	gI2C1_EV_IRQH™dÀr


352 .
thumb_£t
 
	gI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


354 .
wók
 
	gI2C1_ER_IRQH™dÀr


355 .
thumb_£t
 
	gI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


357 .
wók
 
	gI2C2_EV_IRQH™dÀr


358 .
thumb_£t
 
	gI2C2_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


360 .
wók
 
	gI2C2_ER_IRQH™dÀr


361 .
thumb_£t
 
	gI2C2_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


363 .
wók
 
	gSPI1_IRQH™dÀr


364 .
thumb_£t
 
	gSPI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


366 .
wók
 
	gSPI2_IRQH™dÀr


367 .
thumb_£t
 
	gSPI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


369 .
wók
 
	gUSART1_IRQH™dÀr


370 .
thumb_£t
 
	gUSART1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


372 .
wók
 
	gUSART2_IRQH™dÀr


373 .
thumb_£t
 
	gUSART2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


375 .
wók
 
	gUSART3_IRQH™dÀr


376 .
thumb_£t
 
	gUSART3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


378 .
wók
 
	gEXTI15_10_IRQH™dÀr


379 .
thumb_£t
 
	gEXTI15_10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


381 .
wók
 
	gRTC_Aœrm_IRQH™dÀr


382 .
thumb_£t
 
	gRTC_Aœrm_IRQH™dÀr
,
	gDeÁu…_H™dÀr


384 .
wók
 
	gUSB_FS_WKUP_IRQH™dÀr


385 .
thumb_£t
 
	gUSB_FS_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


387 .
wók
 
	gTIM6_IRQH™dÀr


388 .
thumb_£t
 
	gTIM6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


390 .
wók
 
	gTIM7_IRQH™dÀr


391 .
thumb_£t
 
	gTIM7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


393 .
wók
 
	gTIM5_IRQH™dÀr


394 .
thumb_£t
 
	gTIM5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


396 .
wók
 
	gSPI3_IRQH™dÀr


397 .
thumb_£t
 
	gSPI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


399 .
wók
 
	gDMA2_Ch™√l1_IRQH™dÀr


400 .
thumb_£t
 
	gDMA2_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


402 .
wók
 
	gDMA2_Ch™√l2_IRQH™dÀr


403 .
thumb_£t
 
	gDMA2_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


405 .
wók
 
	gDMA2_Ch™√l3_IRQH™dÀr


406 .
thumb_£t
 
	gDMA2_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


408 .
wók
 
	gDMA2_Ch™√l4_IRQH™dÀr


409 .
thumb_£t
 
	gDMA2_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


411 .
wók
 
	gDMA2_Ch™√l5_IRQH™dÀr


412 .
thumb_£t
 
	gDMA2_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


414 .
wók
 
	gCOMP_ACQ_IRQH™dÀr


415 .
thumb_£t
 
	gCOMP_ACQ_IRQH™dÀr
,
	gDeÁu…_H™dÀr


	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\cmsis\system_stm32l1xx.c

65 
	~"°m32l1xx.h
"

82 #i‡!
deföed
 (
HSE_VALUE
)

83 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

87 #i‡!
deföed
 (
HSI_VALUE
)

88 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

99 
	#VECT_TAB_OFFSET
 0x0

	)

124 
uöt32_t
 
	gSy°emC‹eClock
 = 32000000;

125 c⁄° 
uöt8_t
 
	gPLLMulTabÀ
[9] = {3, 4, 6, 8, 12, 16, 24, 32, 48};

126 c⁄° 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

127 c⁄° 
uöt8_t
 
	gAPBPªscTabÀ
[8] = {0, 0, 0, 0, 1, 2, 3, 4};

137 #i‡
deföed
 (
STM32L151xD
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xD
)

138 #ifde‡
DATA_IN_ExtSRAM


139 
Sy°emInô_ExtMemCé
();

158 
	$Sy°emInô
 ()

161 
RCC
->
CR
 |(
uöt32_t
)0x00000100;

164 
RCC
->
CFGR
 &(
uöt32_t
)0x88FFC00C;

167 
RCC
->
CR
 &(
uöt32_t
)0xEEFEFFFE;

170 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

173 
RCC
->
CFGR
 &(
uöt32_t
)0xFF02FFFF;

176 
RCC
->
CIR
 = 0x00000000;

178 #ifde‡
DATA_IN_ExtSRAM


179 
	`Sy°emInô_ExtMemCé
();

182 #ifde‡
VECT_TAB_SRAM


183 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

185 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

187 
	}
}

227 
	$Sy°emC‹eClockUpd©e
 ()

229 
uöt32_t
 
tmp
 = 0, 
∂lmul
 = 0, 
∂ldiv
 = 0, 
∂lsour˚
 = 0, 
msú™ge
 = 0;

232 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

234 
tmp
)

237 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13;

238 
Sy°emC‹eClock
 = (32768 * (1 << (
msú™ge
 + 1)));

241 
Sy°emC‹eClock
 = 
HSI_VALUE
;

244 
Sy°emC‹eClock
 = 
HSE_VALUE
;

248 
∂lmul
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
;

249 
∂ldiv
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
;

250 
∂lmul
 = 
PLLMulTabÀ
[(pllmul >> 18)];

251 
∂ldiv
 = (plldiv >> 22) + 1;

253 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

255 i‡(
∂lsour˚
 == 0x00)

258 
Sy°emC‹eClock
 = (((
HSI_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

263 
Sy°emC‹eClock
 = (((
HSE_VALUE
Ë* 
∂lmul
Ë/ 
∂ldiv
);

267 
msú™ge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
) >> 13;

268 
Sy°emC‹eClock
 = (32768 * (1 << (
msú™ge
 + 1)));

273 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

275 
Sy°emC‹eClock
 >>
tmp
;

276 
	}
}

278 #i‡
deföed
 (
STM32L151xD
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xD
)

279 #ifde‡
DATA_IN_ExtSRAM


288 
	$Sy°emInô_ExtMemCé
()

290 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

293 
FLASH
->
ACR
 |
FLASH_ACR_LATENCY
;

296 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

299 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);

302 
PWR
->
CR
 = 
PWR_CR_VOS_0
;

305 (
PWR
->
CSR
 & 
PWR_CSR_VOSF
Ë!
RESET
)

330 
RCC
->
AHBENR
 = 0x000080D8;

333 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_GPIODEN
);

336 
GPIOD
->
AFR
[0] = 0x00CC00CC;

337 
GPIOD
->
AFR
[1] = 0xCCCCCCCC;

339 
GPIOD
->
MODER
 = 0xAAAA0A0A;

341 
GPIOD
->
OSPEEDR
 = 0xFFFF0F0F;

343 
GPIOD
->
OTYPER
 = 0x00000000;

345 
GPIOD
->
PUPDR
 = 0x00000000;

348 
GPIOE
->
AFR
[0] = 0xC00000CC;

349 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

351 
GPIOE
->
MODER
 = 0xAAAA800A;

353 
GPIOE
->
OSPEEDR
 = 0xFFFFC00F;

355 
GPIOE
->
OTYPER
 = 0x00000000;

357 
GPIOE
->
PUPDR
 = 0x00000000;

360 
GPIOF
->
AFR
[0] = 0x00CCCCCC;

361 
GPIOF
->
AFR
[1] = 0xCCCC0000;

363 
GPIOF
->
MODER
 = 0xAA000AAA;

365 
GPIOF
->
OSPEEDR
 = 0xFF000FFF;

367 
GPIOF
->
OTYPER
 = 0x00000000;

369 
GPIOF
->
PUPDR
 = 0x00000000;

372 
GPIOG
->
AFR
[0] = 0x00CCCCCC;

373 
GPIOG
->
AFR
[1] = 0x00000C00;

375 
GPIOG
->
MODER
 = 0x00200AAA;

377 
GPIOG
->
OSPEEDR
 = 0x00300FFF;

379 
GPIOG
->
OTYPER
 = 0x00000000;

381 
GPIOG
->
PUPDR
 = 0x00000000;

385 
RCC
->
AHBENR
 = 0x400080D8;

388 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);

390 ()(
tm¥eg
);

393 
FSMC_B™k1
->
BTCR
[4] = 0x00001011;

394 
FSMC_B™k1
->
BTCR
[5] = 0x00000300;

395 
FSMC_B™k1E
->
BWTR
[4] = 0x0FFFFFFF;

428 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\gpio-board.c

15 
	~"bﬂrd.h
"

16 
	~"gpio-bﬂrd.h
"

18 
GpioIrqH™dÀr
 *
	gGpioIrq
[16];

20 
	$GpioMcuInô
–
Gpio_t
 *
obj
, 
PöNames
 
pö
, 
PöModes
 
mode
, 
PöC⁄figs
 
c⁄fig
, 
PöTy≥s
 
ty≥
, 
uöt32_t
 
vÆue
 )

22 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

24 
obj
->
pö
 =Öin;

26 if–
pö
 =
NC
 )

31 
obj
->
pöIndex
 = ( 0x01 << ( obj->
pö
 & 0x0F ) );

33 if––
obj
->
pö
 & 0xF0 ) == 0x00 )

35 
obj
->
p‹t
 = 
GPIOA
;

36 
	`__HAL_RCC_GPIOA_CLK_ENABLE
( );

38 if––
obj
->
pö
 & 0xF0 ) == 0x10 )

40 
obj
->
p‹t
 = 
GPIOB
;

41 
	`__HAL_RCC_GPIOB_CLK_ENABLE
( );

43 if––
obj
->
pö
 & 0xF0 ) == 0x20 )

45 
obj
->
p‹t
 = 
GPIOC
;

46 
	`__HAL_RCC_GPIOC_CLK_ENABLE
( );

48 if––
obj
->
pö
 & 0xF0 ) == 0x30 )

50 
obj
->
p‹t
 = 
GPIOD
;

51 
	`__HAL_RCC_GPIOD_CLK_ENABLE
( );

55 
obj
->
p‹t
 = 
GPIOH
;

56 
	`__HAL_RCC_GPIOH_CLK_ENABLE
( );

59 
GPIO_InôSåu˘uª
.
Pö
 = 
obj
->
pöIndex
 ;

60 
GPIO_InôSåu˘uª
.
PuŒ
 = 
obj
->
puŒ
 = 
ty≥
;

61 
GPIO_InôSåu˘uª
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

63 if–
mode
 =
PIN_INPUT
 )

65 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_INPUT
;

67 if–
mode
 =
PIN_ANALOGIC
 )

69 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_ANALOG
;

71 if–
mode
 =
PIN_ALTERNATE_FCT
 )

73 if–
c⁄fig
 =
PIN_OPEN_DRAIN
 )

75 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_AF_OD
;

79 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_AF_PP
;

81 
GPIO_InôSåu˘uª
.
A…î«ã
 = 
vÆue
;

85 if–
c⁄fig
 =
PIN_OPEN_DRAIN
 )

87 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_OUTPUT_OD
;

91 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

95 
	`HAL_GPIO_Inô
–
obj
->
p‹t
, &
GPIO_InôSåu˘uª
 );

98 if–
mode
 =
PIN_OUTPUT
 )

100 
	`GpioMcuWrôe
–
obj
, 
vÆue
 );

102 
	}
}

104 
	$GpioMcuSëI¡îru±
–
Gpio_t
 *
obj
, 
IrqModes
 
úqMode
, 
IrqPri‹ôõs
 
úqPri‹ôy
, 
GpioIrqH™dÀr
 *
úqH™dÀr
 )

106 
uöt32_t
 
¥i‹ôy
 = 0;

108 
IRQn_Ty≥
 
IRQnb
 = 
EXTI0_IRQn
;

109 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

111 if–
úqH™dÀr
 =
NULL
 )

116 
GPIO_InôSåu˘uª
.
Pö
 = 
obj
->
pöIndex
;

118 if–
úqMode
 =
IRQ_RISING_EDGE
 )

120 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_IT_RISING
;

122 if–
úqMode
 =
IRQ_FALLING_EDGE
 )

124 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_IT_FALLING
;

128 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_IT_RISING_FALLING
;

131 
GPIO_InôSåu˘uª
.
PuŒ
 = 
obj
->
puŒ
;

132 
GPIO_InôSåu˘uª
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

134 
	`HAL_GPIO_Inô
–
obj
->
p‹t
, &
GPIO_InôSåu˘uª
 );

136  
úqPri‹ôy
 )

138 
IRQ_VERY_LOW_PRIORITY
:

139 
IRQ_LOW_PRIORITY
:

140 
¥i‹ôy
 = 3;

142 
IRQ_MEDIUM_PRIORITY
:

143 
¥i‹ôy
 = 2;

145 
IRQ_HIGH_PRIORITY
:

146 
¥i‹ôy
 = 1;

148 
IRQ_VERY_HIGH_PRIORITY
:

150 
¥i‹ôy
 = 0;

154  
obj
->
pöIndex
 )

156 
GPIO_PIN_0
:

157 
IRQnb
 = 
EXTI0_IRQn
;

159 
GPIO_PIN_1
:

160 
IRQnb
 = 
EXTI1_IRQn
;

162 
GPIO_PIN_2
:

163 
IRQnb
 = 
EXTI2_IRQn
;

165 
GPIO_PIN_3
:

166 
IRQnb
 = 
EXTI3_IRQn
;

168 
GPIO_PIN_4
:

169 
IRQnb
 = 
EXTI4_IRQn
;

171 
GPIO_PIN_5
:

172 
GPIO_PIN_6
:

173 
GPIO_PIN_7
:

174 
GPIO_PIN_8
:

175 
GPIO_PIN_9
:

176 
IRQnb
 = 
EXTI9_5_IRQn
;

178 
GPIO_PIN_10
:

179 
GPIO_PIN_11
:

180 
GPIO_PIN_12
:

181 
GPIO_PIN_13
:

182 
GPIO_PIN_14
:

183 
GPIO_PIN_15
:

184 
IRQnb
 = 
EXTI15_10_IRQn
;

190 
GpioIrq
[–
obj
->
pö
 ) & 0x0F] = 
úqH™dÀr
;

192 
	`HAL_NVIC_SëPri‹ôy
–
IRQnb
 , 
¥i‹ôy
, 0 );

193 
	`HAL_NVIC_E«bÀIRQ
–
IRQnb
 );

194 
	}
}

196 
	$GpioMcuRemoveI¡îru±
–
Gpio_t
 *
obj
 )

198 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘uª
;

200 
GPIO_InôSåu˘uª
.
Pö
 = 
obj
->
pöIndex
 ;

201 
GPIO_InôSåu˘uª
.
Mode
 = 
GPIO_MODE_ANALOG
;

202 
	`HAL_GPIO_Inô
–
obj
->
p‹t
, &
GPIO_InôSåu˘uª
 );

203 
	}
}

205 
	$GpioMcuWrôe
–
Gpio_t
 *
obj
, 
uöt32_t
 
vÆue
 )

207 if––
obj
 =
NULL
 ) || ( obj->
p‹t
 == NULL ) )

209 
	`as£π_∑øm
–
FAIL
 );

212 if–
obj
->
pö
 =
NC
 )

216 
	`HAL_GPIO_WrôePö
–
obj
->
p‹t
, obj->
pöIndex
 , ( 
GPIO_PöSèã
 )
vÆue
 );

217 
	}
}

219 
	$GpioMcuToggÀ
–
Gpio_t
 *
obj
 )

221 if––
obj
 =
NULL
 ) || ( obj->
p‹t
 == NULL ) )

223 
	`as£π_∑øm
–
FAIL
 );

227 if–
obj
->
pö
 =
NC
 )

231 
	`HAL_GPIO_ToggÀPö
–
obj
->
p‹t
, obj->
pöIndex
 );

232 
	}
}

234 
uöt32_t
 
	$GpioMcuRód
–
Gpio_t
 *
obj
 )

236 if–
obj
 =
NULL
 )

238 
	`as£π_∑øm
–
FAIL
 );

241 if–
obj
->
pö
 =
NC
 )

245  
	`HAL_GPIO_RódPö
–
obj
->
p‹t
, obj->
pöIndex
 );

246 
	}
}

248 
	$EXTI0_IRQH™dÀr
( )

250 #i‡!
	`deföed
–
USE_NO_TIMER
 )

251 
	`RtcRecovîMcuSètus
( );

253 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_0
 );

254 
	}
}

256 
	$EXTI1_IRQH™dÀr
( )

258 #i‡!
	`deföed
–
USE_NO_TIMER
 )

259 
	`RtcRecovîMcuSètus
( );

261 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_1
 );

262 
	}
}

264 
	$EXTI2_IRQH™dÀr
( )

266 #i‡!
	`deföed
–
USE_NO_TIMER
 )

267 
	`RtcRecovîMcuSètus
( );

269 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_2
 );

270 
	}
}

272 
	$EXTI3_IRQH™dÀr
( )

274 #i‡!
	`deföed
–
USE_NO_TIMER
 )

275 
	`RtcRecovîMcuSètus
( );

277 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_3
 );

278 
	}
}

280 
	$EXTI4_IRQH™dÀr
( )

282 #i‡!
	`deföed
–
USE_NO_TIMER
 )

283 
	`RtcRecovîMcuSètus
( );

285 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_4
 );

286 
	}
}

288 
	$EXTI9_5_IRQH™dÀr
( )

290 #i‡!
	`deföed
–
USE_NO_TIMER
 )

291 
	`RtcRecovîMcuSètus
( );

293 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_5
 );

294 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_6
 );

295 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_7
 );

296 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_8
 );

297 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_9
 );

298 
	}
}

300 
	$EXTI15_10_IRQH™dÀr
( )

302 #i‡!
	`deföed
–
USE_NO_TIMER
 )

303 
	`RtcRecovîMcuSètus
( );

305 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_10
 );

306 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_11
 );

307 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_12
 );

308 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_13
 );

309 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_14
 );

310 
	`HAL_GPIO_EXTI_IRQH™dÀr
–
GPIO_PIN_15
 );

311 
	}
}

313 
	$HAL_GPIO_EXTI_CÆlback
–
uöt16_t
 
gpioPö
 )

315 
uöt8_t
 
ˇŒbackIndex
 = 0;

317 if–
gpioPö
 > 0 )

319  
gpioPö
 != 0x01 )

321 
gpioPö
 = gpioPin >> 1;

322 
ˇŒbackIndex
++;

326 if–
GpioIrq
[
ˇŒbackIndex
] !
NULL
 )

328 
GpioIrq
[
ˇŒbackIndex
]( );

330 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\i2c-board.c

15 
	~"bﬂrd.h
"

16 
	~"i2c-bﬂrd.h
"

21 
	#TIMEOUT_MAX
 0x8000

	)

23 
I2cAddrSize
 
	gI2cI¡î«lAddrSize
 = 
I2C_ADDR_SIZE_8
;

29 
	mI2C_1
 = ( 
uöt32_t
 )
I2C1_BASE
,

30 
	mI2C_2
 = ( 
uöt32_t
 )
I2C2_BASE
,

31 } 
	tI2cName
;

33 
	$I2cMcuInô
–
I2c_t
 *
obj
, 
PöNames
 
s˛
, PöName†
sda
 )

35 
	`__HAL_RCC_I2C1_CLK_DISABLE
( );

36 
	`__HAL_RCC_I2C1_CLK_ENABLE
( );

37 
	`__HAL_RCC_I2C1_FORCE_RESET
( );

38 
	`__HAL_RCC_I2C1_RELEASE_RESET
( );

40 
obj
->
I2c
.
In°™˚
 = ( 
I2C_Ty≥Def
 * )
I2C1_BASE
;

42 
	`GpioInô
–&
obj
->
S˛
, 
s˛
, 
PIN_ALTERNATE_FCT
, 
PIN_OPEN_DRAIN
, 
PIN_NO_PULL
, 
GPIO_AF4_I2C1
 );

43 
	`GpioInô
–&
obj
->
Sda
, 
sda
, 
PIN_ALTERNATE_FCT
, 
PIN_OPEN_DRAIN
, 
PIN_NO_PULL
, 
GPIO_AF4_I2C1
 );

44 
	}
}

46 
	$I2cMcuF‹m©
–
I2c_t
 *
obj
, 
I2cMode
 
mode
, 
I2cDutyCy˛e
 
dutyCy˛e
, 
boﬁ
 
I2cAckE«bÀ
, 
I2cAckAddrMode
 
AckAddrMode
, 
uöt32_t
 
I2cFªquícy
 )

48 
I2C_H™dÀTy≥Def
 *
i2c
;

50 
	`__HAL_RCC_I2C1_CLK_ENABLE
( );

51 
obj
->
I2c
.
Inô
.
ClockS≥ed
 = 
I2cFªquícy
;

53 if–
dutyCy˛e
 =
I2C_DUTY_CYCLE_2
 )

55 
obj
->
I2c
.
Inô
.
DutyCy˛e
 = 
I2C_DUTYCYCLE_2
;

59 
obj
->
I2c
.
Inô
.
DutyCy˛e
 = 
I2C_DUTYCYCLE_16_9
;

62 
obj
->
I2c
.
Inô
.
OwnAddªss1
 = 0;

63 
obj
->
I2c
.
Inô
.
AddªssögMode
 = 
I2C_ADDRESSINGMODE_7BIT
;

64 
obj
->
I2c
.
Inô
.
DuÆAddªssMode
 = 
I2C_DUALADDRESS_DISABLE
;

65 
obj
->
I2c
.
Inô
.
OwnAddªss2
 = 0;

66 
obj
->
I2c
.
Inô
.
GíîÆCÆlMode
 = 
I2C_GENERALCALL_DISABLED
;

67 
obj
->
I2c
.
Inô
.
NoSåëchMode
 = 
I2C_NOSTRETCH_DISABLED
;

69 
i2c
 = &
obj
->
I2c
;

70 
	`HAL_I2C_Inô
–
i2c
 );

71 
	}
}

73 
	$I2cMcuDeInô
–
I2c_t
 *
obj
 )

75 
I2C_H™dÀTy≥Def
 *
i2c
;

76 
i2c
 = &
obj
->
I2c
;

78 
	`HAL_I2C_DeInô
–
i2c
 );

80 if–
obj
->
I2c
.
In°™˚
 =–
I2C_Ty≥Def
 * ) 
I2C1_BASE
 )

82 
	`__HAL_RCC_I2C1_FORCE_RESET
();

83 
	`__HAL_RCC_I2C1_RELEASE_RESET
();

84 
	`__HAL_RCC_I2C1_CLK_DISABLE
( );

88 
	`__HAL_RCC_I2C2_FORCE_RESET
();

89 
	`__HAL_RCC_I2C2_RELEASE_RESET
();

90 
	`__HAL_RCC_I2C2_CLK_DISABLE
( );

93 
	`GpioInô
–&
obj
->
S˛
, obj->S˛.
pö
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

94 
	`GpioInô
–&
obj
->
Sda
, obj->Sda.
pö
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

95 
	}
}

97 
	$I2cSëAddrSize
–
I2c_t
 *
obj
, 
I2cAddrSize
 
addrSize
 )

99 
I2cI¡î«lAddrSize
 = 
addrSize
;

100 
	}
}

102 
uöt8_t
 
	$I2cMcuWrôeBuf„r
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à*
buf„r
, uöt16_à
size
 )

104 
uöt8_t
 
°©us
 = 
FAIL
;

105 
uöt16_t
 
memAddSize
 = 0;

107 
I2C_H™dÀTy≥Def
 *
i2c
;

108 
i2c
 = &
obj
->
I2c
;

110 if–
I2cI¡î«lAddrSize
 =
I2C_ADDR_SIZE_8
 )

112 
memAddSize
 = 
I2C_MEMADD_SIZE_8BIT
;

116 
memAddSize
 = 
I2C_MEMADD_SIZE_16BIT
;

118 
°©us
 = ( 
	`HAL_I2C_Mem_Wrôe
–
i2c
, 
devi˚Addr
, 
addr
, 
memAddSize
, 
buf„r
, 
size
, 2000 ) =
HAL_OK
 ) ? 
SUCCESS
 : 
FAIL
;

119  
°©us
;

120 
	}
}

122 
uöt8_t
 
	$I2cMcuRódBuf„r
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à*
buf„r
, uöt16_à
size
 )

124 
uöt8_t
 
°©us
 = 
FAIL
;

125 
uöt16_t
 
memAddSize
 = 0;

127 
I2C_H™dÀTy≥Def
 *
i2c
;

128 
i2c
 = &
obj
->
I2c
;

129 if–
I2cI¡î«lAddrSize
 =
I2C_ADDR_SIZE_8
 )

131 
memAddSize
 = 
I2C_MEMADD_SIZE_8BIT
;

135 
memAddSize
 = 
I2C_MEMADD_SIZE_16BIT
;

137 
°©us
 = ( 
	`HAL_I2C_Mem_Ród
–
i2c
, 
devi˚Addr
, 
addr
, 
memAddSize
, 
buf„r
, 
size
, 2000 ) =
HAL_OK
 ) ? 
SUCCESS
 : 
FAIL
;

138  
°©us
;

139 
	}
}

141 
uöt8_t
 
	$I2cMcuWaôSèndbySèã
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
 )

143 
uöt8_t
 
°©us
 = 
FAIL
;

144 
I2C_H™dÀTy≥Def
 *
i2c
;

145 
i2c
 = &
obj
->
I2c
;

146 
°©us
 = ( 
	`HAL_I2C_IsDevi˚Ródy
–
i2c
, 
devi˚Addr
, 300, 4096 ) =
HAL_OK
 ) ? 
SUCCESS
 : 
FAIL
;;

147  
°©us
;

148 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\rtc-board.c

15 
	~<m©h.h
>

16 
	~"bﬂrd.h
"

17 
	~"πc-bﬂrd.h
"

22 
	#RTC_ALARM_TICK_PER_MS
 0x7FF

23 

	)

25 
	#N_PREDIV_S
 11

	)

28 
	#PREDIV_S
 ( ( 1 << 
N_PREDIV_S
 ) - 1 )

	)

31 
	#PREDIV_A
 ( 1 << ( 15 - 
N_PREDIV_S
 ) ) - 1

	)

34 
	#USEC_NUMBER
 1000000

	)

35 
	#MSEC_NUMBER
 ( 
USEC_NUMBER
 / 1000 )

	)

36 
	#RTC_ALARM_TIME_BASE
 ( 
USEC_NUMBER
 >> 
N_PREDIV_S
 )

	)

38 
	#COMMON_FACTOR
 3

	)

39 
	#CONV_NUMER
 ( 
MSEC_NUMBER
 >> 
COMMON_FACTOR
 )

	)

40 
	#CONV_DENOM
 ( 1 << ( 
N_PREDIV_S
 - 
COMMON_FACTOR
 ) )

	)

45 c⁄° 
uöt8_t
 
	gSec⁄dsInMöuã
 = 60;

50 c⁄° 
uöt16_t
 
	gSec⁄dsInHour
 = 3600;

55 c⁄° 
uöt32_t
 
	gSec⁄dsInDay
 = 86400;

60 c⁄° 
uöt8_t
 
	gHoursInDay
 = 24;

65 c⁄° 
uöt32_t
 
	gSec⁄dsInLópYór
 = 31622400;

70 c⁄° 
uöt32_t
 
	gSec⁄dsInYór
 = 31536000;

75 c⁄° 
uöt8_t
 
	gDaysInM⁄th
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

80 c⁄° 
uöt8_t
 
	gDaysInM⁄thLópYór
[] = { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

85 vﬁ©ûê
boﬁ
 
	gN⁄ScheduÀdWakeUp
 = 
Ál£
;

90 
	sRtcCÆíd¨_s


92 
RTC_D©eTy≥Def
 
	mCÆíd¨D©e
;

93 
RTC_TimeTy≥Def
 
	mCÆíd¨Time
;

94 } 
	tRtcCÆíd¨_t
;

99 
RtcCÆíd¨_t
 
	gRtcCÆíd¨C⁄ãxt
;

105 
boﬁ
 
	gRtcTimîEvítAŒowsLowPowî
 = 
Ál£
;

111 
boﬁ
 
	gLowPowîDißbÀDurögTask
 = 
Ál£
;

116 
RTC_H™dÀTy≥Def
 
	gRtcH™dÀ
 = { 0 };

121 
boﬁ
 
	gRtcInôÆized
 = 
Ál£
;

126 
boﬁ
 
	gWakeUpTimeInôülized
 = 
Ál£
;

131 vﬁ©ûê
uöt32_t
 
	gMcuWakeUpTime
 = 0;

136 
RtcCompuãWakeUpTime
( );

141 
RtcSèπWakeUpAœrm
–
uöt32_t
 
timeoutVÆue
 );

154 
RtcCÆíd¨_t
 
RtcC⁄vîtTimîTimeToCÆíd¨Tick
–
TimîTime_t
 
timeCou¡î
 );

164 
TimîTime_t
 
RtcC⁄vîtCÆíd¨TickToTimîTime
–
RtcCÆíd¨_t
 *
ˇÀnd¨
 );

166 
TimîTime_t
 
RtcC⁄vîtMsToTick
–TimîTime_à
timeoutVÆue
 );

168 
TimîTime_t
 
RtcC⁄vîtTickToMs
–TimîTime_à
timeoutVÆue
 );

177 
RtcCÆíd¨_t
 
RtcCompuãTimîTimeToAœrmTick
–
TimîTime_t
 
timeCou¡î
, RtcCÆíd¨_à
now
 );

184 
RtcCÆíd¨_t
 
RtcGëCÆíd¨
( );

186 
	$RtcInô
( )

188 
RtcCÆíd¨_t
 
πcInô
;

190 if–
RtcInôÆized
 =
Ál£
 )

192 
	`__HAL_RCC_RTC_ENABLE
( );

194 
RtcH™dÀ
.
In°™˚
 = 
RTC
;

195 
RtcH™dÀ
.
Inô
.
HourF‹m©
 = 
RTC_HOURFORMAT_24
;

196 
RtcH™dÀ
.
Inô
.
AsynchPªdiv
 = 
PREDIV_A
;

197 
RtcH™dÀ
.
Inô
.
SynchPªdiv
 = 
PREDIV_S
;

199 
RtcH™dÀ
.
Inô
.
OutPut
 = 
RTC_OUTPUT_DISABLE
;

200 
RtcH™dÀ
.
Inô
.
OutPutPﬁ¨ôy
 = 
RTC_OUTPUT_POLARITY_HIGH
;

201 
RtcH™dÀ
.
Inô
.
OutPutTy≥
 = 
RTC_OUTPUT_TYPE_OPENDRAIN
;

202 
	`HAL_RTC_Inô
–&
RtcH™dÀ
 );

205 
πcInô
.
CÆíd¨D©e
.
Yór
 = 0;

206 
πcInô
.
CÆíd¨D©e
.
M⁄th
 = 
RTC_MONTH_JANUARY
;

207 
πcInô
.
CÆíd¨D©e
.
D©e
 = 1;

208 
πcInô
.
CÆíd¨D©e
.
WìkDay
 = 
RTC_WEEKDAY_SATURDAY
;

209 
	`HAL_RTC_SëD©e
–&
RtcH™dÀ
, &
πcInô
.
CÆíd¨D©e
, 
RTC_FORMAT_BIN
 );

212 
πcInô
.
CÆíd¨Time
.
Hours
 = 0;

213 
πcInô
.
CÆíd¨Time
.
Möuãs
 = 0;

214 
πcInô
.
CÆíd¨Time
.
Sec⁄ds
 = 0;

215 
πcInô
.
CÆíd¨Time
.
Sec⁄dFø˘i⁄
 = 0;

216 
πcInô
.
CÆíd¨Time
.
TimeF‹m©
 = 
RTC_HOURFORMAT12_AM
;

217 
πcInô
.
CÆíd¨Time
.
DayLightSavög
 = 
RTC_DAYLIGHTSAVING_NONE
;

218 
πcInô
.
CÆíd¨Time
.
St‹eO≥øti⁄
 = 
RTC_STOREOPERATION_RESET
;

219 
	`HAL_RTC_SëTime
–&
RtcH™dÀ
, &
πcInô
.
CÆíd¨Time
, 
RTC_FORMAT_BIN
 );

222 
	`HAL_RTCEx_E«bÀBy∑ssShadow
–&
RtcH™dÀ
 );

224 
	`HAL_NVIC_SëPri‹ôy
–
RTC_Aœrm_IRQn
, 1, 0 );

225 
	`HAL_NVIC_E«bÀIRQ
–
RTC_Aœrm_IRQn
 );

226 
RtcInôÆized
 = 
åue
;

228 
	}
}

230 
	$RtcSëTimeout
–
uöt32_t
 
timeout
 )

232 
	`RtcSèπWakeUpAœrm
–
	`RtcC⁄vîtMsToTick
–
timeout
 ) );

233 
	}
}

235 
TimîTime_t
 
	$RtcGëAdju°edTimeoutVÆue
–
uöt32_t
 
timeout
 )

237 if–
timeout
 > 
McuWakeUpTime
 )

239 if–
N⁄ScheduÀdWakeUp
 =
åue
 )

241 
N⁄ScheduÀdWakeUp
 = 
Ál£
;

242 
timeout
 -
McuWakeUpTime
;

246 if–
timeout
 > 
McuWakeUpTime
 )

248 if–
timeout
 < 50 )

250 
RtcTimîEvítAŒowsLowPowî
 = 
Ál£
;

254 
RtcTimîEvítAŒowsLowPowî
 = 
åue
;

255 
timeout
 -
McuWakeUpTime
;

258  
timeout
;

259 
	}
}

261 
TimîTime_t
 
	$RtcGëTimîVÆue
( )

263 
TimîTime_t
 
ªtVÆ
 = 0;

264 
ªtVÆ
 = 
	`RtcC⁄vîtCÆíd¨TickToTimîTime
–
NULL
 );

265 
	`RtcC⁄vîtTickToMs
–
ªtVÆ
 );

267 –
	`RtcC⁄vîtTickToMs
–
ªtVÆ
 ) );

268 
	}
}

270 
TimîTime_t
 
	$RtcGëEœp£dAœrmTime
( )

272 
TimîTime_t
 
ªtVÆ
 = 0;

273 
TimîTime_t
 
cuºítTime
 = 0;

274 
TimîTime_t
 
c⁄ãxtTime
 = 0;

276 
cuºítTime
 = 
	`RtcC⁄vîtCÆíd¨TickToTimîTime
–
NULL
 );

277 
c⁄ãxtTime
 = 
	`RtcC⁄vîtCÆíd¨TickToTimîTime
–&
RtcCÆíd¨C⁄ãxt
 );

279 if–
cuºítTime
 < 
c⁄ãxtTime
 )

281 
ªtVÆ
 = ( 
cuºítTime
 + ( 0xFFFFFFFF - 
c⁄ãxtTime
 ) );

285 
ªtVÆ
 = ( 
cuºítTime
 - 
c⁄ãxtTime
 );

287 –
	`RtcC⁄vîtTickToMs
–
ªtVÆ
 ) );

288 
	}
}

290 
TimîTime_t
 
	$RtcCompuãFutuªEvítTime
–
TimîTime_t
 
futuªEvítInTime
 )

292 –
	`RtcGëTimîVÆue
–Ë+ 
futuªEvítInTime
 );

293 
	}
}

295 
TimîTime_t
 
	$RtcCompuãEœp£dTime
–
TimîTime_t
 
evítInTime
 )

297 
TimîTime_t
 
ñ≠£dTime
 = 0;

300 if–
evítInTime
 == 0 )

305 
ñ≠£dTime
 = 
	`RtcC⁄vîtCÆíd¨TickToTimîTime
–
NULL
 );

307 
ñ≠£dTime
 = 
	`RtcC⁄vîtTickToMs
(ÉlapsedTime );

309 if–
ñ≠£dTime
 < 
evítInTime
 )

311 –
ñ≠£dTime
 + ( 0xFFFFFFFF - 
evítInTime
 ) );

315 –
ñ≠£dTime
 - 
evítInTime
 );

317 
	}
}

319 
	$BlockLowPowîDurögTask
 ( 
boﬁ
 
°©us
 )

321 if–
°©us
 =
åue
 )

323 
	`RtcRecovîMcuSètus
( );

325 
LowPowîDißbÀDurögTask
 = 
°©us
;

326 
	}
}

328 
	$RtcE¡îLowPowîSt›Mode
( )

330 if––
LowPowîDißbÀDurögTask
 =
Ál£
 ) && ( 
RtcTimîEvítAŒowsLowPowî
 =
åue
 ) )

332 
	`BﬂrdDeInôMcu
( );

335 
	`HAL_PWR_DißbÀPVD
( );

337 
	`SET_BIT
–
PWR
->
CR
, 
PWR_CR_CWUF
 );

340 
	`HAL_PWREx_E«bÀU…øLowPowî
( );

343 
	`HAL_PWREx_E«bÀFa°WakeUp
( );

346 
	`HAL_PWR_E¡îSTOPMode
–
PWR_LOWPOWERREGULATOR_ON
, 
PWR_STOPENTRY_WFI
 );

348 
	}
}

350 
	$RtcRecovîMcuSètus
( )

353 if–
	`__HAL_PWR_GET_FLAG
–
PWR_FLAG_WU
 ) !
RESET
 )

355 
	`__HAL_PWR_CLEAR_FLAG
–
PWR_FLAG_WU
 );

359 
N⁄ScheduÀdWakeUp
 = 
åue
;

362 if––
	`__HAL_RCC_GET_SYSCLK_SOURCE
–Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
 ) ||

363 –
	`__HAL_RCC_GET_SYSCLK_SOURCE
–Ë=
RCC_SYSCLKSOURCE_STATUS_MSI
 ) )

365 
	`BﬂrdInôMcu
( );

367 
	}
}

369 
	$RtcCompuãWakeUpTime
( )

371 
uöt32_t
 
°¨t
 = 0;

372 
uöt32_t
 
°›
 = 0;

373 
RTC_AœrmTy≥Def
 
Æ¨mRtc
;

374 
RtcCÆíd¨_t
 
now
;

376 if–
WakeUpTimeInôülized
 =
Ál£
 )

378 
now
 = 
	`RtcGëCÆíd¨
( );

379 
	`HAL_RTC_GëAœrm
–&
RtcH™dÀ
, &
Æ¨mRtc
, 
RTC_ALARM_A
, 
RTC_FORMAT_BIN
 );

381 
°¨t
 = 
PREDIV_S
 - 
Æ¨mRtc
.
AœrmTime
.
SubSec⁄ds
;

382 
°›
 = 
PREDIV_S
 - 
now
.
CÆíd¨Time
.
SubSec⁄ds
;

384 
McuWakeUpTime
 = 
	`RtcC⁄vîtTickToMs
–
°›
 - 
°¨t
 );

386 
WakeUpTimeInôülized
 = 
åue
;

388 
	}
}

390 
	$RtcSèπWakeUpAœrm
–
uöt32_t
 
timeoutVÆue
 )

392 
RtcCÆíd¨_t
 
now
;

393 
RtcCÆíd¨_t
 
Æ¨mTimî
;

394 
RTC_AœrmTy≥Def
 
Æ¨mSåu˘uª
;

396 
	`HAL_RTC_Dó˘iv©eAœrm
–&
RtcH™dÀ
, 
RTC_ALARM_A
 );

398 if–
timeoutVÆue
 <= 3 )

400 
timeoutVÆue
 = 3;

404 
now
 = 
	`RtcGëCÆíd¨
( );

407 
RtcCÆíd¨C⁄ãxt
 = 
now
;

410 
Æ¨mTimî
 = 
	`RtcCompuãTimîTimeToAœrmTick
–
timeoutVÆue
, 
now
 );

412 
Æ¨mSåu˘uª
.
Aœrm
 = 
RTC_ALARM_A
;

413 
Æ¨mSåu˘uª
.
AœrmD©eWìkDaySñ
 = 
RTC_ALARMDATEWEEKDAYSEL_DATE
;

414 
Æ¨mSåu˘uª
.
AœrmMask
 = 
RTC_ALARMMASK_NONE
;

415 
Æ¨mSåu˘uª
.
AœrmSubSec⁄dMask
 = 
RTC_ALARMSUBSECONDMASK_NONE
;

416 
Æ¨mSåu˘uª
.
AœrmTime
.
TimeF‹m©
 = 
RTC_HOURFORMAT12_AM
;

418 
Æ¨mSåu˘uª
.
AœrmTime
.
SubSec⁄ds
 = 
Æ¨mTimî
.
CÆíd¨Time
.SubSeconds;

419 
Æ¨mSåu˘uª
.
AœrmTime
.
Sec⁄ds
 = 
Æ¨mTimî
.
CÆíd¨Time
.Seconds;

420 
Æ¨mSåu˘uª
.
AœrmTime
.
Möuãs
 = 
Æ¨mTimî
.
CÆíd¨Time
.Minutes;

421 
Æ¨mSåu˘uª
.
AœrmTime
.
Hours
 = 
Æ¨mTimî
.
CÆíd¨Time
.Hours;

422 
Æ¨mSåu˘uª
.
AœrmD©eWìkDay
 = 
Æ¨mTimî
.
CÆíd¨D©e
.
D©e
;

424 if–
	`HAL_RTC_SëAœrm_IT
–&
RtcH™dÀ
, &
Æ¨mSåu˘uª
, 
RTC_FORMAT_BIN
 ) !
HAL_OK
 )

426 
	`as£π_∑øm
–
FAIL
 );

428 
	}
}

430 
RtcCÆíd¨_t
 
	$RtcCompuãTimîTimeToAœrmTick
–
TimîTime_t
 
timeCou¡î
, 
RtcCÆíd¨_t
 
now
 )

432 
RtcCÆíd¨_t
 
ˇÀnd¨
 = 
now
;

434 
TimîTime_t
 
timeoutVÆue
 = 0;

436 
uöt16_t
 
mûli£c⁄ds
 = 0;

437 
uöt16_t
 
£c⁄ds
 = 
now
.
CÆíd¨Time
.
Sec⁄ds
;

438 
uöt16_t
 
möuãs
 = 
now
.
CÆíd¨Time
.
Möuãs
;

439 
uöt16_t
 
hours
 = 
now
.
CÆíd¨Time
.
Hours
;

440 
uöt16_t
 
days
 = 
now
.
CÆíd¨D©e
.
D©e
;

442 
timeoutVÆue
 = 
timeCou¡î
;

444 
mûli£c⁄ds
 = 
PREDIV_S
 - 
now
.
CÆíd¨Time
.
SubSec⁄ds
;

445 
mûli£c⁄ds
 +–
timeoutVÆue
 & 
PREDIV_S
 );

448 
timeoutVÆue
 >>
N_PREDIV_S
;

451  
timeoutVÆue
 >
Sec⁄dsInDay
 )

453 
timeoutVÆue
 -
Sec⁄dsInDay
;

454 
days
++;

458  
timeoutVÆue
 >
Sec⁄dsInHour
 )

460 
timeoutVÆue
 -
Sec⁄dsInHour
;

461 
hours
++;

465  
timeoutVÆue
 >
Sec⁄dsInMöuã
 )

467 
timeoutVÆue
 -
Sec⁄dsInMöuã
;

468 
möuãs
++;

472 
£c⁄ds
 +
timeoutVÆue
;

475  
mûli£c⁄ds
 >–
PREDIV_S
 + 1 ) )

477 
mûli£c⁄ds
 -–
PREDIV_S
 + 1 );

478 
£c⁄ds
++;

481  
£c⁄ds
 >
Sec⁄dsInMöuã
 )

483 
£c⁄ds
 -
Sec⁄dsInMöuã
;

484 
möuãs
++;

487  
möuãs
 >= 60 )

489 
möuãs
 -= 60;

490 
hours
++;

493  
hours
 >
HoursInDay
 )

495 
hours
 -
HoursInDay
;

496 
days
++;

499 if––
now
.
CÆíd¨D©e
.
Yór
 == 0 ) || (Çow.CalendarDate.Year % 4 ) == 0 )

501 if–
days
 > 
DaysInM⁄thLópYór
[
now
.
CÆíd¨D©e
.
M⁄th
 - 1] )

503 
days
 = day†% 
DaysInM⁄thLópYór
[
now
.
CÆíd¨D©e
.
M⁄th
 - 1];

504 
ˇÀnd¨
.
CÆíd¨D©e
.
M⁄th
++;

509 if–
days
 > 
DaysInM⁄th
[
now
.
CÆíd¨D©e
.
M⁄th
 - 1] )

511 
days
 = day†% 
DaysInM⁄th
[
now
.
CÆíd¨D©e
.
M⁄th
 - 1];

512 
ˇÀnd¨
.
CÆíd¨D©e
.
M⁄th
++;

516 
ˇÀnd¨
.
CÆíd¨Time
.
SubSec⁄ds
 = 
PREDIV_S
 - 
mûli£c⁄ds
;

517 
ˇÀnd¨
.
CÆíd¨Time
.
Sec⁄ds
 = 
£c⁄ds
;

518 
ˇÀnd¨
.
CÆíd¨Time
.
Möuãs
 = 
möuãs
;

519 
ˇÀnd¨
.
CÆíd¨Time
.
Hours
 = 
hours
;

520 
ˇÀnd¨
.
CÆíd¨D©e
.
D©e
 = 
days
;

522  
ˇÀnd¨
;

523 
	}
}

530 
RtcCÆíd¨_t
 
	$RtcC⁄vîtTimîTimeToCÆíd¨Tick
–
TimîTime_t
 
timeCou¡î
 )

532 
RtcCÆíd¨_t
 
ˇÀnd¨
 = { { 0 }, { 0 } };

534 
TimîTime_t
 
timeoutVÆue
 = 0;

536 
uöt16_t
 
mûli£c⁄ds
 = 0;

537 
uöt16_t
 
£c⁄ds
 = 0;

538 
uöt16_t
 
möuãs
 = 0;

539 
uöt16_t
 
hours
 = 0;

540 
uöt16_t
 
days
 = 0;

541 
uöt8_t
 
m⁄ths
 = 1;

542 
uöt16_t
 
yórs
 = 0;

544 
timeoutVÆue
 = 
timeCou¡î
;

546 
mûli£c⁄ds
 +–
timeoutVÆue
 & 
PREDIV_S
);

549 
timeoutVÆue
 >>
N_PREDIV_S
;

552  
timeoutVÆue
 >
Sec⁄dsInDay
 )

554 
timeoutVÆue
 -
Sec⁄dsInDay
;

555 
days
++;

559  
timeoutVÆue
 >
Sec⁄dsInHour
 )

561 
timeoutVÆue
 -
Sec⁄dsInHour
;

562 
hours
++;

566  
timeoutVÆue
 >
Sec⁄dsInMöuã
 )

568 
timeoutVÆue
 -
Sec⁄dsInMöuã
;

569 
möuãs
++;

573 
£c⁄ds
 +
timeoutVÆue
;

576  
mûli£c⁄ds
 >–
PREDIV_S
 + 1 ) )

578 
mûli£c⁄ds
 -–
PREDIV_S
 + 1 );

579 
£c⁄ds
++;

582  
£c⁄ds
 >
Sec⁄dsInMöuã
 )

584 
£c⁄ds
 -
Sec⁄dsInMöuã
;

585 
möuãs
++;

588  
möuãs
 >= 60 )

590 
möuãs
 -= 60;

591 
hours
++;

594  
hours
 >
HoursInDay
 )

596 
hours
 -
HoursInDay
;

597 
days
++;

600  
days
 > 
DaysInM⁄thLópYór
[
m⁄ths
 - 1] )

602 
days
 -
DaysInM⁄thLópYór
[
m⁄ths
 - 1];

603 
m⁄ths
++;

606 
ˇÀnd¨
.
CÆíd¨Time
.
SubSec⁄ds
 = 
PREDIV_S
 - 
mûli£c⁄ds
;

607 
ˇÀnd¨
.
CÆíd¨Time
.
Sec⁄ds
 = 
£c⁄ds
;

608 
ˇÀnd¨
.
CÆíd¨Time
.
Möuãs
 = 
möuãs
;

609 
ˇÀnd¨
.
CÆíd¨Time
.
Hours
 = 
hours
;

610 
ˇÀnd¨
.
CÆíd¨D©e
.
D©e
 = 
days
;

611 
ˇÀnd¨
.
CÆíd¨D©e
.
M⁄th
 = 
m⁄ths
;

612 
ˇÀnd¨
.
CÆíd¨D©e
.
Yór
 = 
yórs
;

614  
ˇÀnd¨
;

615 
	}
}

617 
TimîTime_t
 
	$RtcC⁄vîtCÆíd¨TickToTimîTime
–
RtcCÆíd¨_t
 *
ˇÀnd¨
 )

619 
TimîTime_t
 
timeCou¡î
 = 0;

620 
RtcCÆíd¨_t
 
now
;

621 
uöt32_t
 
timeCou¡îTemp
 = 0;

625 if–
ˇÀnd¨
 =
NULL
 )

627 
now
 = 
	`RtcGëCÆíd¨
( );

631 
now
 = *
ˇÀnd¨
;

635  
öt16_t
 
i
 = 0; i < 
now
.
CÆíd¨D©e
.
Yór
 ; i++ )

637 if––
i
 == 0 ) || ( i % 4 ) == 0 )

639 
timeCou¡îTemp
 +–
uöt32_t
 )
Sec⁄dsInLópYór
;

643 
timeCou¡îTemp
 +–
uöt32_t
 )
Sec⁄dsInYór
;

648 if––
now
.
CÆíd¨D©e
.
Yór
 == 0 ) || (Çow.CalendarDate.Year % 4 ) == 0 )

650  
uöt8_t
 
i
 = 0; i < ( 
now
.
CÆíd¨D©e
.
M⁄th
 - 1 ); i++ )

652 
timeCou¡îTemp
 +–
uöt32_t
 )–
DaysInM⁄thLópYór
[
i
] * 
Sec⁄dsInDay
 );

657  
uöt8_t
 
i
 = 0; i < ( 
now
.
CÆíd¨D©e
.
M⁄th
 - 1 ); i++ )

659 
timeCou¡îTemp
 +–
uöt32_t
 )–
DaysInM⁄th
[
i
] * 
Sec⁄dsInDay
 );

663 
timeCou¡îTemp
 +–
uöt32_t
 )––uöt32_à)
now
.
CÆíd¨Time
.
Sec⁄ds
 +

664 ––
uöt32_t
 )
now
.
CÆíd¨Time
.
Möuãs
 * 
Sec⁄dsInMöuã
 ) +

665 ––
uöt32_t
 )
now
.
CÆíd¨Time
.
Hours
 * 
Sec⁄dsInHour
 ) +

666 ––
uöt32_t
 )–
now
.
CÆíd¨D©e
.
D©e
 * 
Sec⁄dsInDay
 ) ) );

668 
timeCou¡î
 = ( 
timeCou¡îTemp
 << 
N_PREDIV_S
 ) + ( 
PREDIV_S
 - 
now
.
CÆíd¨Time
.
SubSec⁄ds
);

670  ( 
timeCou¡î
 );

671 
	}
}

673 
TimîTime_t
 
	$RtcC⁄vîtMsToTick
–
TimîTime_t
 
timeoutVÆue
 )

675 
ªtVÆ
 = 0;

676 
ªtVÆ
 = 
	`round
–––)
timeoutVÆue
 * 
CONV_DENOM
 ) / 
CONV_NUMER
 );

677 ––
TimîTime_t
 )
ªtVÆ
 );

678 
	}
}

680 
TimîTime_t
 
	$RtcC⁄vîtTickToMs
–
TimîTime_t
 
timeoutVÆue
 )

682 
ªtVÆ
 = 0.0;

683 
ªtVÆ
 = 
	`round
–––)
timeoutVÆue
 * 
CONV_NUMER
 ) / 
CONV_DENOM
 );

684 ––
TimîTime_t
 )
ªtVÆ
 );

685 
	}
}

687 
RtcCÆíd¨_t
 
	$RtcGëCÆíd¨
( )

689 
uöt32_t
 
fú°_ªad
 = 0;

690 
uöt32_t
 
£c⁄d_ªad
 = 0;

691 
RtcCÆíd¨_t
 
now
;

694 
	`HAL_RTC_GëTime
–&
RtcH™dÀ
, &
now
.
CÆíd¨Time
, 
RTC_FORMAT_BIN
 );

695 
fú°_ªad
 = 
now
.
CÆíd¨Time
.
SubSec⁄ds
;

696 
	`HAL_RTC_GëTime
–&
RtcH™dÀ
, &
now
.
CÆíd¨Time
, 
RTC_FORMAT_BIN
 );

697 
£c⁄d_ªad
 = 
now
.
CÆíd¨Time
.
SubSec⁄ds
;

700  
fú°_ªad
 !
£c⁄d_ªad
 )

702 
fú°_ªad
 = 
£c⁄d_ªad
;

703 
	`HAL_RTC_GëTime
–&
RtcH™dÀ
, &
now
.
CÆíd¨Time
, 
RTC_FORMAT_BIN
 );

704 
£c⁄d_ªad
 = 
now
.
CÆíd¨Time
.
SubSec⁄ds
;

706 
	`HAL_RTC_GëD©e
–&
RtcH™dÀ
, &
now
.
CÆíd¨D©e
, 
RTC_FORMAT_BIN
 );

707 –
now
 );

708 
	}
}

713 
	$RTC_Aœrm_IRQH™dÀr
( )

715 
	`HAL_RTC_AœrmIRQH™dÀr
–&
RtcH™dÀ
 );

716 
	`HAL_RTC_Dó˘iv©eAœrm
–&
RtcH™dÀ
, 
RTC_ALARM_A
 );

717 
	`RtcRecovîMcuSètus
( );

718 
	`RtcCompuãWakeUpTime
( );

719 
	`BlockLowPowîDurögTask
–
Ál£
 );

720 
	`TimîIrqH™dÀr
( );

721 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\spi-board.c

15 
	~"bﬂrd.h
"

16 
	~"•i-bﬂrd.h
"

17 
	~"°m32l1xx_hÆ_•i.h
"

24 
	mSPI_1
 = ( 
uöt32_t
 )
SPI1_BASE
,

25 
	mSPI_2
 = ( 
uöt32_t
 )
SPI2_BASE
,

26 }
	tSPIName
;

28 
	$SpiInô
–
Spi_t
 *
obj
, 
PöNames
 
mosi
, PöName†
miso
, PöName†
s˛k
, PöName†
nss
 )

30 
	`BﬂrdDißbÀIrq
( );

33 if–
mosi
 =
PA_7
 )

35 
	`__HAL_RCC_SPI1_FORCE_RESET
( );

36 
	`__HAL_RCC_SPI1_RELEASE_RESET
( );

38 
	`__HAL_RCC_SPI1_CLK_ENABLE
( );

40 
obj
->
Spi
.
In°™˚
 = ( 
SPI_Ty≥Def
* )
SPI1_BASE
;

42 
	`GpioInô
–&
obj
->
Mosi
, 
mosi
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI1
 );

43 
	`GpioInô
–&
obj
->
Miso
, 
miso
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI1
 );

44 
	`GpioInô
–&
obj
->
S˛k
, 
s˛k
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI1
 );

45 
	`GpioInô
–&
obj
->
Nss
, 
nss
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 
GPIO_AF5_SPI1
 );

47 if–
nss
 =
NC
 )

49 
obj
->
Spi
.
Inô
.
NSS
 = 
SPI_NSS_SOFT
;

50 
	`SpiF‹m©
–
obj
, 
SPI_DATASIZE_8BIT
, 
SPI_POLARITY_LOW
, 
SPI_PHASE_1EDGE
, 0 );

54 
	`SpiF‹m©
–
obj
, 
SPI_DATASIZE_8BIT
, 
SPI_POLARITY_LOW
, 
SPI_PHASE_1EDGE
, 1 );

57 if–
mosi
 =
PB_15
 )

59 
	`__HAL_RCC_SPI2_FORCE_RESET
( );

60 
	`__HAL_RCC_SPI2_RELEASE_RESET
( );

62 
	`__HAL_RCC_SPI2_CLK_ENABLE
( );

64 
obj
->
Spi
.
In°™˚
 = ( 
SPI_Ty≥Def
* )
SPI2_BASE
;

66 
	`GpioInô
–&
obj
->
Mosi
, 
mosi
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI2
 );

67 
	`GpioInô
–&
obj
->
Miso
, 
miso
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI2
 );

68 
	`GpioInô
–&
obj
->
S˛k
, 
s˛k
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 
GPIO_AF5_SPI2
 );

69 
	`GpioInô
–&
obj
->
Nss
, 
nss
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 
GPIO_AF5_SPI2
 );

71 if–
nss
 =
NC
 )

73 
obj
->
Spi
.
Inô
.
NSS
 = 
SPI_NSS_SOFT
;

74 
	`SpiF‹m©
–
obj
, 
SPI_DATASIZE_8BIT
, 
SPI_POLARITY_LOW
, 
SPI_PHASE_1EDGE
, 0 );

78 
	`SpiF‹m©
–
obj
, 
SPI_DATASIZE_8BIT
, 
SPI_POLARITY_LOW
, 
SPI_PHASE_1EDGE
, 1 );

81 
	`SpiFªquícy
–
obj
, 10000000 );

83 
	`HAL_SPI_Inô
–&
obj
->
Spi
 );

85 
	`BﬂrdE«bÀIrq
( );

86 
	}
}

88 
	$SpiDeInô
–
Spi_t
 *
obj
 )

90 
	`HAL_SPI_DeInô
–&
obj
->
Spi
 );

92 
	`GpioInô
–&
obj
->
Mosi
, obj->Mosi.
pö
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

93 
	`GpioInô
–&
obj
->
Miso
, obj->Miso.
pö
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_DOWN
, 0 );

94 
	`GpioInô
–&
obj
->
S˛k
, obj->S˛k.
pö
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

95 
	`GpioInô
–&
obj
->
Nss
, obj->Nss.
pö
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 1 );

96 
	}
}

98 
	$SpiF‹m©
–
Spi_t
 *
obj
, 
öt8_t
 
bôs
, i¡8_à
˝ﬁ
, i¡8_à
˝ha
, i¡8_à
¶ave
 )

100 
obj
->
Spi
.
Inô
.
Dúe˘i⁄
 = 
SPI_DIRECTION_2LINES
;

101 if–
bôs
 =
SPI_DATASIZE_8BIT
 )

103 
obj
->
Spi
.
Inô
.
D©aSize
 = 
SPI_DATASIZE_8BIT
;

107 
obj
->
Spi
.
Inô
.
D©aSize
 = 
SPI_DATASIZE_16BIT
;

109 
obj
->
Spi
.
Inô
.
CLKPﬁ¨ôy
 = 
˝ﬁ
;

110 
obj
->
Spi
.
Inô
.
CLKPha£
 = 
˝ha
;

111 
obj
->
Spi
.
Inô
.
Fú°Bô
 = 
SPI_FIRSTBIT_MSB
;

112 
obj
->
Spi
.
Inô
.
TIMode
 = 
SPI_TIMODE_DISABLE
;

113 
obj
->
Spi
.
Inô
.
CRCCÆcuœti⁄
 = 
SPI_CRCCALCULATION_DISABLE
;

114 
obj
->
Spi
.
Inô
.
CRCPﬁynomül
 = 7;

116 if–
¶ave
 == 0 )

118 
obj
->
Spi
.
Inô
.
Mode
 = 
SPI_MODE_MASTER
;

122 
obj
->
Spi
.
Inô
.
Mode
 = 
SPI_MODE_SLAVE
;

124 
	}
}

126 
	$SpiFªquícy
–
Spi_t
 *
obj
, 
uöt32_t
 
hz
 )

128 
uöt32_t
 
divis‹
 = 0;

129 
uöt32_t
 
sysClkTmp
 = 
Sy°emC‹eClock
;

130 
uöt32_t
 
baudR©e
;

132  
sysClkTmp
 > 
hz
 )

134 
divis‹
++;

135 
sysClkTmp
 = ( sysClkTmp >> 1 );

137 if–
divis‹
 >= 7 )

143 
baudR©e
 =–––
divis‹
 & 0x4 ) =0 ) ? 0x0 : 
SPI_CR1_BR_2
 ) |

144 –––
divis‹
 & 0x2 ) =0 ) ? 0x0 : 
SPI_CR1_BR_1
 ) |

145 –––
divis‹
 & 0x1 ) =0 ) ? 0x0 : 
SPI_CR1_BR_0
 );

147 
obj
->
Spi
.
Inô
.
BaudR©ePªsˇÀr
 = 
baudR©e
;

148 
	}
}

150 
uöt16_t
 
	$SpiInOut
–
Spi_t
 *
obj
, 
uöt16_t
 
outD©a
 )

152 
uöt8_t
 
rxD©a
 = 0;

154 if––
obj
 =
NULL
 ) || ( obj->
Spi
.
In°™˚
 ) == NULL )

156 
	`as£π_∑øm
–
FAIL
 );

159 
	`__HAL_SPI_ENABLE
–&
obj
->
Spi
 );

161 
	`BﬂrdDißbÀIrq
( );

163  
	`__HAL_SPI_GET_FLAG
–&
obj
->
Spi
, 
SPI_FLAG_TXE
 ) =
RESET
 );

164 
obj
->
Spi
.
In°™˚
->
DR
 = ( 
uöt16_t
 ) ( 
outD©a
 & 0xFF );

166  
	`__HAL_SPI_GET_FLAG
–&
obj
->
Spi
, 
SPI_FLAG_RXNE
 ) =
RESET
 );

167 
rxD©a
 = ( 
uöt16_t
 ) 
obj
->
Spi
.
In°™˚
->
DR
;

169 
	`BﬂrdE«bÀIrq
( );

171 –
rxD©a
 );

172 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\sx1272-board.c

15 
	~"bﬂrd.h
"

16 
	~"ødio.h
"

17 
	~"sx1272/sx1272.h
"

18 
	~"sx1272-bﬂrd.h
"

23 
boﬁ
 
	gRadioIsA˘ive
 = 
Ál£
;

28 c⁄° 
Radio_s
 
	gRadio
 =

30 
SX1272Inô
,

31 
SX1272GëSètus
,

32 
SX1272SëModem
,

33 
SX1272SëCh™√l
,

34 
SX1272IsCh™√lFªe
,

35 
SX1272R™dom
,

36 
SX1272SëRxC⁄fig
,

37 
SX1272SëTxC⁄fig
,

38 
SX1272CheckRfFªquícy
,

39 
SX1272GëTimeOnAú
,

40 
SX1272Síd
,

41 
SX1272SëSÀï
,

42 
SX1272SëStby
,

43 
SX1272SëRx
,

44 
SX1272SèπCad
,

45 
SX1272SëTxC⁄töuousWave
,

46 
SX1272RódRssi
,

47 
SX1272Wrôe
,

48 
SX1272Ród
,

49 
SX1272WrôeBuf„r
,

50 
SX1272RódBuf„r
,

51 
SX1272SëMaxPaylﬂdLígth
,

52 
SX1272SëPublicNëw‹k


58 
Gpio_t
 
	gA¡Rx
;

59 
Gpio_t
 
	gA¡Tx
;

61 
	$SX1272IoInô
( )

63 
	`GpioInô
–&
SX1272
.
Spi
.
Nss
, 
RADIO_NSS
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 1 );

65 
	`GpioInô
–&
SX1272
.
DIO0
, 
RADIO_DIO_0
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

66 
	`GpioInô
–&
SX1272
.
DIO1
, 
RADIO_DIO_1
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

67 
	`GpioInô
–&
SX1272
.
DIO2
, 
RADIO_DIO_2
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

68 
	`GpioInô
–&
SX1272
.
DIO3
, 
RADIO_DIO_3
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

69 
	`GpioInô
–&
SX1272
.
DIO4
, 
RADIO_DIO_4
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

71 
	}
}

73 
	$SX1272IoIrqInô
–
DioIrqH™dÀr
 **
úqH™dÀrs
 )

75 
	`GpioSëI¡îru±
–&
SX1272
.
DIO0
, 
IRQ_RISING_EDGE
, 
IRQ_HIGH_PRIORITY
, 
úqH™dÀrs
[0] );

76 
	`GpioSëI¡îru±
–&
SX1272
.
DIO1
, 
IRQ_RISING_EDGE
, 
IRQ_HIGH_PRIORITY
, 
úqH™dÀrs
[1] );

77 
	`GpioSëI¡îru±
–&
SX1272
.
DIO2
, 
IRQ_RISING_EDGE
, 
IRQ_HIGH_PRIORITY
, 
úqH™dÀrs
[2] );

78 
	`GpioSëI¡îru±
–&
SX1272
.
DIO3
, 
IRQ_RISING_EDGE
, 
IRQ_HIGH_PRIORITY
, 
úqH™dÀrs
[3] );

79 
	`GpioSëI¡îru±
–&
SX1272
.
DIO4
, 
IRQ_RISING_EDGE
, 
IRQ_HIGH_PRIORITY
, 
úqH™dÀrs
[4] );

81 
	}
}

83 
	$SX1272IoDeInô
( )

85 
	`GpioInô
–&
SX1272
.
Spi
.
Nss
, 
RADIO_NSS
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 1 );

87 
	`GpioInô
–&
SX1272
.
DIO0
, 
RADIO_DIO_0
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

88 
	`GpioInô
–&
SX1272
.
DIO1
, 
RADIO_DIO_1
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

89 
	`GpioInô
–&
SX1272
.
DIO2
, 
RADIO_DIO_2
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

90 
	`GpioInô
–&
SX1272
.
DIO3
, 
RADIO_DIO_3
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

91 
	`GpioInô
–&
SX1272
.
DIO4
, 
RADIO_DIO_4
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

93 
	}
}

95 
	$SX1272SëRfTxPowî
–
öt8_t
 
powî
 )

97 
uöt8_t
 
∑C⁄fig
 = 0;

98 
uöt8_t
 
∑Dac
 = 0;

100 
∑C⁄fig
 = 
	`SX1272Ród
–
REG_PACONFIG
 );

101 
∑Dac
 = 
	`SX1272Ród
–
REG_PADAC
 );

103 
∑C⁄fig
 = (ÖaC⁄fig & 
RF_PACONFIG_PASELECT_MASK
 ) | 
	`SX1272GëPaSñe˘
–
SX1272
.
Sëtögs
.
Ch™√l
 );

105 if––
∑C⁄fig
 & 
RF_PACONFIG_PASELECT_PABOOST
 ) == RF_PACONFIG_PASELECT_PABOOST )

107 if–
powî
 > 17 )

109 
∑Dac
 = (ÖaDa¯& 
RF_PADAC_20DBM_MASK
 ) | 
RF_PADAC_20DBM_ON
;

113 
∑Dac
 = (ÖaDa¯& 
RF_PADAC_20DBM_MASK
 ) | 
RF_PADAC_20DBM_OFF
;

115 if––
∑Dac
 & 
RF_PADAC_20DBM_ON
 ) == RF_PADAC_20DBM_ON )

117 if–
powî
 < 5 )

119 
powî
 = 5;

121 if–
powî
 > 20 )

123 
powî
 = 20;

125 
∑C⁄fig
 = (ÖaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 5 ) & 0x0F );

129 if–
powî
 < 2 )

131 
powî
 = 2;

133 if–
powî
 > 17 )

135 
powî
 = 17;

137 
∑C⁄fig
 = (ÖaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 - 2 ) & 0x0F );

142 if–
powî
 < -1 )

144 
powî
 = -1;

146 if–
powî
 > 14 )

148 
powî
 = 14;

150 
∑C⁄fig
 = (ÖaC⁄fig & 
RFLR_PACONFIG_OUTPUTPOWER_MASK
 ) | ( 
uöt8_t
 )––
uöt16_t
 )–
powî
 + 1 ) & 0x0F );

152 
	`SX1272Wrôe
–
REG_PACONFIG
, 
∑C⁄fig
 );

153 
	`SX1272Wrôe
–
REG_PADAC
, 
∑Dac
 );

154 
	}
}

156 
uöt8_t
 
	$SX1272GëPaSñe˘
–
uöt32_t
 
ch™√l
 )

158  
RF_PACONFIG_PASELECT_PABOOST
;

159 
	}
}

161 
	$SX1272SëA¡SwLowPowî
–
boﬁ
 
°©us
 )

163 if–
RadioIsA˘ive
 !
°©us
 )

165 
RadioIsA˘ive
 = 
°©us
;

167 if–
°©us
 =
Ál£
 )

169 
	`SX1272A¡SwInô
( );

173 
	`SX1272A¡SwDeInô
( );

176 
	}
}

178 
	$SX1272A¡SwInô
( )

180 
	`GpioInô
–&
A¡Tx
, 
RADIO_ANT_SWITCH_TX
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 0 );

181 
	}
}

183 
	$SX1272A¡SwDeInô
( )

185 
	`GpioInô
–&
A¡Tx
, 
RADIO_ANT_SWITCH_TX
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

186 
	}
}

188 
	$SX1272SëA¡Sw
–
uöt8_t
 
›Mode
 )

190  
›Mode
 )

192 
RFLR_OPMODE_TRANSMITTER
:

193 
	`GpioWrôe
–&
A¡Tx
, 1 );

195 
RFLR_OPMODE_RECEIVER
:

196 
RFLR_OPMODE_RECEIVER_SINGLE
:

197 
RFLR_OPMODE_CAD
:

199 
	`GpioWrôe
–&
A¡Tx
, 0 );

202 
	}
}

204 
boﬁ
 
	$SX1272CheckRfFªquícy
–
uöt32_t
 
‰equícy
 )

207  
åue
;

208 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\uart-board.c

15 
	~"bﬂrd.h
"

17 
	~"u¨t-bﬂrd.h
"

19 
UART_H™dÀTy≥Def
 
	gU¨tH™dÀ
;

20 
uöt8_t
 
	gRxD©a
 = 0;

21 
uöt8_t
 
	gTxD©a
 = 0;

23 
	$U¨tMcuInô
–
U¨t_t
 *
obj
, 
uöt8_t
 
u¨tId
, 
PöNames
 
tx
, PöName†
rx
 )

25 
obj
->
U¨tId
 = 
u¨tId
;

27 
	`__HAL_RCC_USART1_FORCE_RESET
( );

28 
	`__HAL_RCC_USART1_RELEASE_RESET
( );

29 
	`__HAL_RCC_USART1_CLK_ENABLE
( );

31 
	`GpioInô
–&
obj
->
Tx
, 
tx
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 
GPIO_AF7_USART1
 );

32 
	`GpioInô
–&
obj
->
Rx
, 
rx
, 
PIN_ALTERNATE_FCT
, 
PIN_PUSH_PULL
, 
PIN_PULL_UP
, 
GPIO_AF7_USART1
 );

33 
	}
}

35 
	$U¨tMcuC⁄fig
–
U¨t_t
 *
obj
, 
U¨tMode_t
 
mode
, 
uöt32_t
 
baudøã
, 
W‹dLígth_t
 
w‹dLígth
, 
St›Bôs_t
 
°›Bôs
, 
P¨ôy_t
 
∑rôy
, 
FlowCål_t
 
ÊowCål
 )

37 
U¨tH™dÀ
.
In°™˚
 = 
USART1
;

38 
U¨tH™dÀ
.
Inô
.
BaudR©e
 = 
baudøã
;

40 if–
mode
 =
TX_ONLY
 )

42 if–
obj
->
FifoTx
.
D©a
 =
NULL
 )

44 
	`as£π_∑øm
–
FAIL
 );

46 
U¨tH™dÀ
.
Inô
.
Mode
 = 
UART_MODE_TX
;

48 if–
mode
 =
RX_ONLY
 )

50 if–
obj
->
FifoRx
.
D©a
 =
NULL
 )

52 
	`as£π_∑øm
–
FAIL
 );

54 
U¨tH™dÀ
.
Inô
.
Mode
 = 
UART_MODE_RX
;

56 if–
mode
 =
RX_TX
 )

58 if––
obj
->
FifoTx
.
D©a
 =
NULL
 ) || ( obj->
FifoRx
.Data == NULL ) )

60 
	`as£π_∑øm
–
FAIL
 );

62 
U¨tH™dÀ
.
Inô
.
Mode
 = 
UART_MODE_TX_RX
;

66 
	`as£π_∑øm
–
FAIL
 );

69 if–
w‹dLígth
 =
UART_8_BIT
 )

71 
U¨tH™dÀ
.
Inô
.
W‹dLígth
 = 
UART_WORDLENGTH_8B
;

73 if–
w‹dLígth
 =
UART_9_BIT
 )

75 
U¨tH™dÀ
.
Inô
.
W‹dLígth
 = 
UART_WORDLENGTH_9B
;

78  
°›Bôs
 )

80 
UART_2_STOP_BIT
:

81 
U¨tH™dÀ
.
Inô
.
St›Bôs
 = 
UART_STOPBITS_2
;

83 
UART_1_STOP_BIT
:

85 
U¨tH™dÀ
.
Inô
.
St›Bôs
 = 
UART_STOPBITS_1
;

89 if–
∑rôy
 =
NO_PARITY
 )

91 
U¨tH™dÀ
.
Inô
.
P¨ôy
 = 
UART_PARITY_NONE
;

93 if–
∑rôy
 =
EVEN_PARITY
 )

95 
U¨tH™dÀ
.
Inô
.
P¨ôy
 = 
UART_PARITY_EVEN
;

99 
U¨tH™dÀ
.
Inô
.
P¨ôy
 = 
UART_PARITY_ODD
;

102 if–
ÊowCål
 =
NO_FLOW_CTRL
 )

104 
U¨tH™dÀ
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_NONE
;

106 if–
ÊowCål
 =
RTS_FLOW_CTRL
 )

108 
U¨tH™dÀ
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_RTS
;

110 if–
ÊowCål
 =
CTS_FLOW_CTRL
 )

112 
U¨tH™dÀ
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_CTS
;

114 if–
ÊowCål
 =
RTS_CTS_FLOW_CTRL
 )

116 
U¨tH™dÀ
.
Inô
.
HwFlowCé
 = 
UART_HWCONTROL_RTS_CTS
;

119 
U¨tH™dÀ
.
Inô
.
OvîSam∂ög
 = 
UART_OVERSAMPLING_16
;

121 if–
	`HAL_UART_Inô
–&
U¨tH™dÀ
 ) !
HAL_OK
 )

123 
	`as£π_∑øm
–
FAIL
 );

126 
	`HAL_NVIC_SëPri‹ôy
–
USART1_IRQn
, 8, 0 );

127 
	`HAL_NVIC_E«bÀIRQ
–
USART1_IRQn
 );

130 
	`HAL_UART_Re˚ive_IT
–&
U¨tH™dÀ
, &
RxD©a
, 1 );

131 
	}
}

133 
	$U¨tMcuDeInô
–
U¨t_t
 *
obj
 )

135 
	`__HAL_RCC_USART1_FORCE_RESET
( );

136 
	`__HAL_RCC_USART1_RELEASE_RESET
( );

137 
	`__HAL_RCC_USART1_CLK_DISABLE
( );

139 
	`GpioInô
–&
obj
->
Tx
, obj->Tx.
pö
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

140 
	`GpioInô
–&
obj
->
Rx
, obj->Rx.
pö
, 
PIN_ANALOGIC
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 0 );

141 
	}
}

143 
uöt8_t
 
	$U¨tMcuPutCh¨
–
U¨t_t
 *
obj
, 
uöt8_t
 
d©a
 )

145 
	`BﬂrdDißbÀIrq
( );

146 
TxD©a
 = 
d©a
;

148 if–
	`IsFifoFuŒ
–&
obj
->
FifoTx
 ) =
Ál£
 )

150 
	`FifoPush
–&
obj
->
FifoTx
, 
TxD©a
 );

153 
	`__HAL_UART_ENABLE_IT
–&
U¨tH™dÀ
, 
UART_IT_TC
 );

155 
	`BﬂrdE«bÀIrq
( );

158 
	`BﬂrdE«bÀIrq
( );

160 
	}
}

162 
uöt8_t
 
	$U¨tMcuGëCh¨
–
U¨t_t
 *
obj
, 
uöt8_t
 *
d©a
 )

164 
	`BﬂrdDißbÀIrq
( );

166 if–
	`IsFifoEm±y
–&
obj
->
FifoRx
 ) =
Ál£
 )

168 *
d©a
 = 
	`FifoP›
–&
obj
->
FifoRx
 );

169 
	`BﬂrdE«bÀIrq
( );

172 
	`BﬂrdE«bÀIrq
( );

174 
	}
}

176 
	$HAL_UART_TxC∂tCÆlback
–
UART_H™dÀTy≥Def
 *
h™dÀ
 )

178 if–
	`IsFifoEm±y
–&
U¨t1
.
FifoTx
 ) =
Ál£
 )

180 
TxD©a
 = 
	`FifoP›
–&
U¨t1
.
FifoTx
 );

182 
	`HAL_UART_Tønsmô_IT
–&
U¨tH™dÀ
, &
TxD©a
, 1 );

185 if–
U¨t1
.
IrqNŸify
 !
NULL
 )

187 
U¨t1
.
	`IrqNŸify
–
UART_NOTIFY_TX
 );

189 
	}
}

191 
	$HAL_UART_RxC∂tCÆlback
–
UART_H™dÀTy≥Def
 *
h™dÀ
 )

193 if–
	`IsFifoFuŒ
–&
U¨t1
.
FifoRx
 ) =
Ál£
 )

196 
	`FifoPush
–&
U¨t1
.
FifoRx
, 
RxD©a
 );

199 if–
U¨t1
.
IrqNŸify
 !
NULL
 )

201 
U¨t1
.
	`IrqNŸify
–
UART_NOTIFY_RX
 );

204 
	`HAL_UART_Re˚ive_IT
–&
U¨tH™dÀ
, &
RxD©a
, 1 );

205 
	}
}

207 
	$HAL_UART_Eº‹CÆlback
–
UART_H™dÀTy≥Def
 *
h™dÀ
 )

209 
	`HAL_UART_Re˚ive_IT
–&
U¨tH™dÀ
, &
RxD©a
, 1 );

210 
	}
}

212 
	$USART1_IRQH™dÀr
( )

214 
	`HAL_UART_IRQH™dÀr
–&
U¨tH™dÀ
 );

215 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal.c

54 
	~"°m32l1xx_hÆ.h
"

65 #ifde‡
HAL_MODULE_ENABLED


77 
	#__STM32L1xx_HAL_VERSION_MAIN
 (0x01Ë

	)

78 
	#__STM32L1xx_HAL_VERSION_SUB1
 (0x02Ë

	)

79 
	#__STM32L1xx_HAL_VERSION_SUB2
 (0x00Ë

	)

80 
	#__STM32L1xx_HAL_VERSION_RC
 (0x00Ë

	)

81 
	#__STM32L1xx_HAL_VERSION
 ((
__STM32L1xx_HAL_VERSION_MAIN
 << 24)\

82 |(
__STM32L1xx_HAL_VERSION_SUB1
 << 16)\

83 |(
__STM32L1xx_HAL_VERSION_SUB2
 << 8 )\

84 |(
__STM32L1xx_HAL_VERSION_RC
))

	)

86 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

99 
__IO
 
uöt32_t
 
	guwTick
;

157 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

160 #i‡(
PREFETCH_ENABLE
 != 0)

161 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

165 
	`HAL_NVIC_SëPri‹ôyGroupög
(
NVIC_PRIORITYGROUP_4
);

168 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

171 
	`HAL_M•Inô
();

174  
HAL_OK
;

175 
	}
}

183 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

186 
	`__HAL_RCC_APB1_FORCE_RESET
();

187 
	`__HAL_RCC_APB1_RELEASE_RESET
();

189 
	`__HAL_RCC_APB2_FORCE_RESET
();

190 
	`__HAL_RCC_APB2_RELEASE_RESET
();

192 
	`__HAL_RCC_AHB_FORCE_RESET
();

193 
	`__HAL_RCC_AHB_RELEASE_RESET
();

196 
	`HAL_M•DeInô
();

199  
HAL_OK
;

200 
	}
}

206 
__wók
 
	$HAL_M•Inô
()

211 
	}
}

217 
__wók
 
	$HAL_M•DeInô
()

222 
	}
}

240 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

243 
	`HAL_SYSTICK_C⁄fig
(
Sy°emC‹eClock
 /1000);

246 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
 ,0);

249  
HAL_OK
;

250 
	}
}

288 
__wók
 
	$HAL_IncTick
()

290 
uwTick
++;

291 
	}
}

299 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

301  
uwTick
;

302 
	}
}

315 
__wók
 
	$HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
)

317 
uöt32_t
 
tick°¨t
 = 0;

318 
tick°¨t
 = 
	`HAL_GëTick
();

319 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
Dñay
)

322 
	}
}

334 
__wók
 
	$HAL_Su•ídTick
()

337 
	`CLEAR_BIT
(
SysTick
->
CTRL
,
SysTick_CTRL_TICKINT_Msk
);

338 
	}
}

350 
__wók
 
	$HAL_ResumeTick
()

353 
	`SET_BIT
(
SysTick
->
CTRL
,
SysTick_CTRL_TICKINT_Msk
);

354 
	}
}

360 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

362  
__STM32L1xx_HAL_VERSION
;

363 
	}
}

369 
uöt32_t
 
	$HAL_GëREVID
()

371 ((
DBGMCU
->
IDCODE
) >> 16);

372 
	}
}

378 
uöt32_t
 
	$HAL_GëDEVID
()

380 ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

381 
	}
}

387 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

389 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

390 
	}
}

396 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

398 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

399 
	}
}

405 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

407 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

408 
	}
}

414 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

416 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

417 
	}
}

423 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

425 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

426 
	}
}

432 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

434 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

435 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_adc.c

287 
	~"°m32l1xx_hÆ.h
"

298 #ifde‡
HAL_ADC_MODULE_ENABLED


312 
	#ADC_ENABLE_TIMEOUT
 ((
uöt32_t
Ë2)

	)

313 
	#ADC_DISABLE_TIMEOUT
 ((
uöt32_t
Ë2)

	)

318 
	#ADC_STAB_DELAY_US
 ((
uöt32_t
Ë3)

	)

323 
	#ADC_TEMPSENSOR_DELAY_US
 ((
uöt32_t
Ë10)

	)

335 
ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

336 
ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

337 
ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

385 
HAL_SètusTy≥Def
 
	$HAL_ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

387 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

388 
uöt32_t
 
tmp_¸1
 = 0;

389 
uöt32_t
 
tmp_¸2
 = 0;

392 if(
hadc
 =
NULL
)

394  
HAL_ERROR
;

398 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

399 
	`as£π_∑øm
(
	`IS_ADC_CLOCKPRESCALER
(
hadc
->
Inô
.
ClockPªsˇÀr
));

400 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
hadc
->
Inô
.
Resﬁuti⁄
));

401 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
hadc
->
Inô
.
D©aAlign
));

402 
	`as£π_∑øm
(
	`IS_ADC_SCAN_MODE
(
hadc
->
Inô
.
SˇnC⁄vMode
));

403 
	`as£π_∑øm
(
	`IS_ADC_EOC_SELECTION
(
hadc
->
Inô
.
EOCSñe˘i⁄
));

404 
	`as£π_∑øm
(
	`IS_ADC_AUTOWAIT
(
hadc
->
Inô
.
LowPowîAutoWaô
));

405 
	`as£π_∑øm
(
	`IS_ADC_AUTOPOWEROFF
(
hadc
->
Inô
.
LowPowîAutoPowîOff
));

406 
	`as£π_∑øm
(
	`IS_ADC_CHANNELSBANK
(
hadc
->
Inô
.
Ch™√lsB™k
));

407 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

408 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIG
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
));

409 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
));

411 if(
hadc
->
Inô
.
SˇnC⁄vMode
 !
ADC_SCAN_DISABLE
)

413 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_NB_CONV
(
hadc
->
Inô
.
NbrOfC⁄vîsi⁄
));

414 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
));

415 if(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
 !
DISABLE
)

417 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISCONT_NUMBER
(
hadc
->
Inô
.
NbrOfDiscC⁄vîsi⁄
));

421 if(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 !
ADC_SOFTWARE_START
)

423 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

434 i‡(
hadc
->
Sèã
 =
HAL_ADC_STATE_RESET
)

437 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

440 
hadc
->
Lock
 = 
HAL_UNLOCKED
;

443 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

446 
	`HAL_ADC_M•Inô
(
hadc
);

451 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

454 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

455 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

456 
HAL_ADC_STATE_BUSY_INTERNAL
);

462 
	`MODIFY_REG
(
ADC
->
CCR
 ,

463 
ADC_CCR_ADCPRE
 ,

464 
hadc
->
Inô
.
ClockPªsˇÀr
 );

472 
tmp_¸2
 |(
hadc
->
Inô
.
D©aAlign
 |

473 
hadc
->
Inô
.
EOCSñe˘i⁄
 |

474 
	`ADC_CR2_DMACONTREQ
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
) |

475 
hadc
->
Inô
.
Ch™√lsB™k
 |

476 
	`ADC_CR2_CONTINUOUS
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
) );

483 i‡(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 !
ADC_SOFTWARE_START
)

485 
tmp_¸2
 |–
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 |

486 
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
 );

497 i‡((
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
))

499 
tmp_¸2
 |
hadc
->
Inô
.
LowPowîAutoWaô
;

501 
tmp_¸1
 |(
hadc
->
Inô
.
Resﬁuti⁄
 |

502 
hadc
->
Inô
.
LowPowîAutoPowîOff
 |

503 
	`ADC_CR1_SCAN_SET
(
hadc
->
Inô
.
SˇnC⁄vMode
) );

508 i‡(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
 =
ENABLE
)

510 i‡(
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
)

514 
	`SET_BIT
(
tmp_¸1
, 
ADC_CR1_DISCEN
 |

515 
	`ADC_CR1_DISCONTINUOUS_NUM
(
hadc
->
Inô
.
NbrOfDiscC⁄vîsi⁄
) );

523 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

526 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

531 
	`MODIFY_REG
(
hadc
->
In°™˚
->
CR1
,

532 
ADC_CR1_RES
 |

533 
ADC_CR1_PDI
 |

534 
ADC_CR1_PDD
 |

535 
ADC_CR1_DISCNUM
 |

536 
ADC_CR1_DISCEN
 |

537 
ADC_CR1_SCAN
 ,

538 
tmp_¸1
 );

542 
	`MODIFY_REG
(
hadc
->
In°™˚
->
CR2
 ,

543 
	`ADC_CR2_MASK_ADCINIT
() ,

544 
tmp_¸2
 );

555 i‡(
	`ADC_CR1_SCAN_SET
(
hadc
->
Inô
.
SˇnC⁄vMode
Ë=
ADC_SCAN_ENABLE
)

557 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR1
 ,

558 
ADC_SQR1_L
 ,

559 
	`ADC_SQR1_L_SHIFT
(
hadc
->
Inô
.
NbrOfC⁄vîsi⁄
) );

563 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR1
,

564 
ADC_SQR1_L
 ,

572 i‡((
	`READ_REG
(
hadc
->
In°™˚
->
CR2
Ë& ~(
ADC_CR2_ADON
 |

573 
ADC_CR2_SWSTART
 | 
ADC_CR2_JSWSTART
 |

574 
ADC_CR2_JEXTEN
 | 
ADC_CR2_JEXTSEL
 ))

575 =
tmp_¸2
)

578 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

581 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

582 
HAL_ADC_STATE_BUSY_INTERNAL
,

583 
HAL_ADC_STATE_READY
);

588 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

589 
HAL_ADC_STATE_BUSY_INTERNAL
,

590 
HAL_ADC_STATE_ERROR_INTERNAL
);

593 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

595 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

601 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

605  
tmp_hÆ_°©us
;

606 
	}
}

617 
HAL_SètusTy≥Def
 
	$HAL_ADC_DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

619 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

622 if(
hadc
 =
NULL
)

624  
HAL_ERROR
;

628 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

631 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_BUSY_INTERNAL
);

635 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

640 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

644 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_AWD
 | 
ADC_FLAG_JEOC
 | 
ADC_FLAG_EOC
 |

645 
ADC_FLAG_JSTRT
 | 
ADC_FLAG_STRT
));

648 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
CR1
, (
ADC_CR1_OVRIE
 | 
ADC_CR1_RES
 | 
ADC_CR1_AWDEN
 |

649 
ADC_CR1_JAWDEN
 | 
ADC_CR1_PDI
 | 
ADC_CR1_PDD
 |

650 
ADC_CR1_DISCNUM
 | 
ADC_CR1_JDISCEN
 | 
ADC_CR1_DISCEN
 |

651 
ADC_CR1_JAUTO
 | 
ADC_CR1_AWDSGL
 | 
ADC_CR1_SCAN
 |

652 
ADC_CR1_JEOCIE
 | 
ADC_CR1_AWDIE
 | 
ADC_CR1_EOCIE
 |

653 
ADC_CR1_AWDCH
 ));

656 
	`ADC_CR2_CLEAR
(
hadc
);

659 
	`ADC_SMPR0_CLEAR
(
hadc
);

662 
	`ADC_SMPR1_CLEAR
(
hadc
);

665 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SMPR2
, (
ADC_SMPR2_SMP19
 | 
ADC_SMPR2_SMP18
 | 
ADC_SMPR2_SMP17
 |

666 
ADC_SMPR2_SMP16
 | 
ADC_SMPR2_SMP15
 | 
ADC_SMPR2_SMP14
 |

667 
ADC_SMPR2_SMP13
 | 
ADC_SMPR2_SMP12
 | 
ADC_SMPR2_SMP11
 |

668 
ADC_SMPR2_SMP10
 ));

671 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SMPR3
, (
ADC_SMPR3_SMP9
 | 
ADC_SMPR3_SMP8
 | 
ADC_SMPR3_SMP7
 |

672 
ADC_SMPR3_SMP6
 | 
ADC_SMPR3_SMP5
 | 
ADC_SMPR3_SMP4
 |

673 
ADC_SMPR3_SMP3
 | 
ADC_SMPR3_SMP2
 | 
ADC_SMPR3_SMP1
 |

674 
ADC_SMPR3_SMP0
 ));

677 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
JOFR1
, 
ADC_JOFR1_JOFFSET1
);

679 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
JOFR2
, 
ADC_JOFR2_JOFFSET2
);

681 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
JOFR3
, 
ADC_JOFR3_JOFFSET3
);

683 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
JOFR4
, 
ADC_JOFR4_JOFFSET4
);

686 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
HTR
, 
ADC_HTR_HT
);

688 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
LTR
, 
ADC_LTR_LT
);

691 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SQR1
, (
ADC_SQR1_L
 | 
__ADC_SQR1_SQXX
));

694 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SQR2
, (
ADC_SQR2_SQ24
 | 
ADC_SQR2_SQ23
 | 
ADC_SQR2_SQ22
 |

695 
ADC_SQR2_SQ21
 | 
ADC_SQR2_SQ20
 | 
ADC_SQR2_SQ19
 ));

698 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SQR3
, (
ADC_SQR3_SQ18
 | 
ADC_SQR3_SQ17
 | 
ADC_SQR3_SQ16
 |

699 
ADC_SQR3_SQ15
 | 
ADC_SQR3_SQ14
 | 
ADC_SQR3_SQ13
 ));

702 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SQR4
, (
ADC_SQR4_SQ12
 | 
ADC_SQR4_SQ11
 | 
ADC_SQR4_SQ10
 |

703 
ADC_SQR4_SQ9
 | 
ADC_SQR4_SQ8
 | 
ADC_SQR4_SQ7
 ));

706 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
SQR5
, (
ADC_SQR5_SQ6
 | 
ADC_SQR5_SQ5
 | 
ADC_SQR5_SQ4
 |

707 
ADC_SQR5_SQ3
 | 
ADC_SQR5_SQ2
 | 
ADC_SQR5_SQ1
 ));

711 
	`CLEAR_BIT
(
hadc
->
In°™˚
->
JSQR
, (
ADC_JSQR_JL
 |

712 
ADC_JSQR_JSQ4
 | 
ADC_JSQR_JSQ3
 |

713 
ADC_JSQR_JSQ2
 | 
ADC_JSQR_JSQ1
 ));

722 
	`CLEAR_BIT
(
ADC
->
CCR
, 
ADC_CCR_TSVREFE
);

734 
	`HAL_ADC_M•DeInô
(
hadc
);

737 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

740 
hadc
->
Sèã
 = 
HAL_ADC_STATE_RESET
;

745 
	`__HAL_UNLOCK
(
hadc
);

748  
tmp_hÆ_°©us
;

749 
	}
}

756 
__wók
 
	$HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

759 
	`UNUSED
(
hadc
);

764 
	}
}

771 
__wók
 
	$HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

774 
	`UNUSED
(
hadc
);

779 
	}
}

813 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
)

815 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

818 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

821 
	`__HAL_LOCK
(
hadc
);

824 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

827 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

832 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

833 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
,

834 
HAL_ADC_STATE_REG_BUSY
);

838 i‡(
	`READ_BIT
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
Ë!
RESET
)

840 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

844 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

847 
	`CLEAR_BIT
(
hadc
->
Eº‹Code
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

852 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

858 
	`__HAL_UNLOCK
(
hadc
);

862 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
 | 
ADC_FLAG_OVR
);

868 i‡(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
))

871 
	`SET_BIT
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_SWSTART
);

876  
tmp_hÆ_°©us
;

877 
	}
}

888 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›
(
ADC_H™dÀTy≥Def
* 
hadc
)

890 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

893 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

896 
	`__HAL_LOCK
(
hadc
);

900 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

903 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

906 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

907 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

908 
HAL_ADC_STATE_READY
);

912 
	`__HAL_UNLOCK
(
hadc
);

915  
tmp_hÆ_°©us
;

916 
	}
}

936 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
)

938 
uöt32_t
 
tick°¨t
 = 0;

941 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

949 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) &&

950 
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_DMA
) )

953 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

956 
	`__HAL_UNLOCK
(
hadc
);

958  
HAL_ERROR
;

962 
tick°¨t
 = 
	`HAL_GëTick
();

965 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
SR
, 
ADC_FLAG_EOC
))

968 if(
Timeout
 !
HAL_MAX_DELAY
)

970 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

973 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

976 
	`__HAL_UNLOCK
(
hadc
);

978  
HAL_TIMEOUT
;

986 i‡(
hadc
->
Inô
.
LowPowîAutoWaô
 =
DISABLE
)

989 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_STRT
 | 
ADC_FLAG_EOC
);

993 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

1001 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1002 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) &&

1003 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
SQR1
, 
ADC_SQR1_L
) ||

1004 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) ) )

1007 
	`CLEAR_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
);

1009 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

1011 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_READY
);

1016  
HAL_OK
;

1017 
	}
}

1029 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹Evít
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
EvítTy≥
, uöt32_à
Timeout
)

1031 
uöt32_t
 
tick°¨t
 = 0;

1034 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1035 
	`as£π_∑øm
(
	`IS_ADC_EVENT_TYPE
(
EvítTy≥
));

1038 
tick°¨t
 = 
	`HAL_GëTick
();

1041 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
EvítTy≥
Ë=
RESET
)

1044 if(
Timeout
 !
HAL_MAX_DELAY
)

1046 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1049 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

1052 
	`__HAL_UNLOCK
(
hadc
);

1054  
HAL_TIMEOUT
;

1059 
EvítTy≥
)

1062 
ADC_AWD_EVENT
:

1064 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_AWD1
);

1067 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1077 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_OVR
);

1079 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_OVR
);

1082 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1087  
HAL_OK
;

1088 
	}
}

1099 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

1101 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1104 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1107 
	`__HAL_LOCK
(
hadc
);

1110 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

1113 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1118 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1119 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
,

1120 
HAL_ADC_STATE_REG_BUSY
);

1124 i‡(
	`READ_BIT
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
Ë!
RESET
)

1126 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1130 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

1133 
	`CLEAR_BIT
(
hadc
->
Eº‹Code
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

1138 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1144 
	`__HAL_UNLOCK
(
hadc
);

1148 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
 | 
ADC_FLAG_OVR
);

1151 
	`__HAL_ADC_ENABLE_IT
(
hadc
, (
ADC_IT_EOC
 | 
ADC_IT_OVR
));

1157 i‡(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
))

1160 
	`SET_BIT
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_SWSTART
);

1165  
tmp_hÆ_°©us
;

1166 
	}
}

1175 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

1177 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1180 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1183 
	`__HAL_LOCK
(
hadc
);

1187 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

1190 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1193 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1196 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1197 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

1198 
HAL_ADC_STATE_READY
);

1202 
	`__HAL_UNLOCK
(
hadc
);

1205  
tmp_hÆ_°©us
;

1206 
	}
}

1221 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
)

1223 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1226 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1229 
	`__HAL_LOCK
(
hadc
);

1232 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

1235 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1240 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1241 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_REG_EOC
 | 
HAL_ADC_STATE_REG_OVR
,

1242 
HAL_ADC_STATE_REG_BUSY
);

1246 i‡(
	`READ_BIT
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
Ë!
RESET
)

1248 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_EOC
, 
HAL_ADC_STATE_INJ_BUSY
);

1252 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

1255 
	`CLEAR_BIT
(
hadc
->
Eº‹Code
, (
HAL_ADC_ERROR_OVR
 | 
HAL_ADC_ERROR_DMA
));

1260 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

1266 
	`__HAL_UNLOCK
(
hadc
);

1269 
hadc
->
DMA_H™dÀ
->
X„rC∂tCÆlback
 = 
ADC_DMAC⁄vC∂t
;

1272 
hadc
->
DMA_H™dÀ
->
X„rHÆfC∂tCÆlback
 = 
ADC_DMAHÆfC⁄vC∂t
;

1275 
hadc
->
DMA_H™dÀ
->
X„rEº‹CÆlback
 = 
ADC_DMAEº‹
;

1283 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_EOC
 | 
ADC_FLAG_OVR
);

1286 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

1289 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_DMA
;

1292 
	`HAL_DMA_Sèπ_IT
(
hadc
->
DMA_H™dÀ
, (
uöt32_t
)&hadc->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Lígth
);

1300 i‡(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
))

1303 
	`SET_BIT
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_SWSTART
);

1308  
tmp_hÆ_°©us
;

1309 
	}
}

1321 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
)

1323 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1326 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1329 
	`__HAL_LOCK
(
hadc
);

1333 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

1336 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1339 
hadc
->
In°™˚
->
CR2
 &~
ADC_CR2_DMA
;

1343 
tmp_hÆ_°©us
 = 
	`HAL_DMA_Ab‹t
(
hadc
->
DMA_H™dÀ
);

1346 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

1349 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

1350 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

1351 
HAL_ADC_STATE_READY
);

1356 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_DMA
);

1360 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

1364 
	`__HAL_UNLOCK
(
hadc
);

1367  
tmp_hÆ_°©us
;

1368 
	}
}

1389 
uöt32_t
 
	$HAL_ADC_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
)

1392 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1398  
hadc
->
In°™˚
->
DR
;

1399 
	}
}

1406 
	$HAL_ADC_IRQH™dÀr
(
ADC_H™dÀTy≥Def
* 
hadc
)

1409 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1410 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

1411 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_NB_CONV
(
hadc
->
Inô
.
NbrOfC⁄vîsi⁄
));

1415 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_EOC
))

1417 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOC
) )

1420 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

1423 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

1432 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1433 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) &&

1434 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
SQR1
, 
ADC_SQR1_L
) ||

1435 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) ) )

1441 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

1444 
	`CLEAR_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
);

1446 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

1448 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_READY
);

1453 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

1456 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_STRT
 | 
ADC_FLAG_EOC
);

1461 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_JEOC
))

1463 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_JEOC
))

1466 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
))

1469 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_EOC
);

1476 if(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

1477 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
JSQR
, 
ADC_JSQR_JL
) ||

1478 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) ) &&

1479 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) &&

1480 (
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

1481 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) ) ) )

1484 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

1487 
	`CLEAR_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
);

1489 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
))

1491 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_READY
);

1496 
	`HAL_ADCEx_Inje˘edC⁄vC∂tCÆlback
(
hadc
);

1499 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, (
ADC_FLAG_JSTRT
 | 
ADC_FLAG_JEOC
));

1504 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_AWD
))

1506 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_AWD
))

1509 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_AWD1
);

1512 
	`HAL_ADC_LevñOutOfWödowCÆlback
(
hadc
);

1515 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

1520 if(
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_OVR
))

1522 if(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_OVR
))

1529 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_OVR
);

1532 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1535 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

1538 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

1542 
	}
}

1549 
__wók
 
	$HAL_ADC_C⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1552 
	`UNUSED
(
hadc
);

1557 
	}
}

1564 
__wók
 
	$HAL_ADC_C⁄vHÆfC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1567 
	`UNUSED
(
hadc
);

1572 
	}
}

1579 
__wók
 
	$HAL_ADC_LevñOutOfWödowCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1582 
	`UNUSED
(
hadc
);

1587 
	}
}

1601 
__wók
 
	$HAL_ADC_Eº‹CÆlback
(
ADC_H™dÀTy≥Def
 *
hadc
)

1604 
	`UNUSED
(
hadc
);

1609 
	}
}

1650 
HAL_SètusTy≥Def
 
	$HAL_ADC_C⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
)

1652 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

1653 
__IO
 
uöt32_t
 
waô_lo›_ödex
 = 0;

1656 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1657 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
sC⁄fig
->
Ch™√l
));

1658 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
sC⁄fig
->
R™k
));

1659 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
sC⁄fig
->
Sam∂ögTime
));

1662 
	`__HAL_LOCK
(
hadc
);

1667 i‡(
sC⁄fig
->
R™k
 < 7)

1669 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR5
,

1670 
	`ADC_SQR5_RK
(
ADC_SQR5_SQ1
, 
sC⁄fig
->
R™k
),

1671 
	`ADC_SQR5_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
) );

1674 i‡(
sC⁄fig
->
R™k
 < 13)

1676 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR4
,

1677 
	`ADC_SQR4_RK
(
ADC_SQR4_SQ7
, 
sC⁄fig
->
R™k
),

1678 
	`ADC_SQR4_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
) );

1681 i‡(
sC⁄fig
->
R™k
 < 19)

1683 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR3
,

1684 
	`ADC_SQR3_RK
(
ADC_SQR3_SQ13
, 
sC⁄fig
->
R™k
),

1685 
	`ADC_SQR3_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
) );

1688 i‡(
sC⁄fig
->
R™k
 < 25)

1690 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR2
,

1691 
	`ADC_SQR2_RK
(
ADC_SQR2_SQ19
, 
sC⁄fig
->
R™k
),

1692 
	`ADC_SQR2_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
) );

1697 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SQR1
,

1698 
	`ADC_SQR1_RK
(
ADC_SQR1_SQ25
, 
sC⁄fig
->
R™k
),

1699 
	`ADC_SQR1_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
) );

1705 i‡(
sC⁄fig
->
Ch™√l
 < 
ADC_CHANNEL_10
)

1707 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR3
,

1708 
	`ADC_SMPR3
(
ADC_SMPR3_SMP0
, 
sC⁄fig
->
Ch™√l
),

1709 
	`ADC_SMPR3
(
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
) );

1712 i‡(
sC⁄fig
->
Ch™√l
 < 
ADC_CHANNEL_20
)

1714 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR2
,

1715 
	`ADC_SMPR2
(
ADC_SMPR2_SMP10
, 
sC⁄fig
->
Ch™√l
),

1716 
	`ADC_SMPR2
(
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
) );

1720 i‡(
sC⁄fig
->
Ch™√l
 <
ADC_SMPR1_CHANNEL_MAX
)

1722 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR1
,

1723 
	`ADC_SMPR1
(
ADC_SMPR1_SMP20
, 
sC⁄fig
->
Ch™√l
),

1724 
	`ADC_SMPR1
(
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
) );

1729 
	`ADC_SMPR0_CHANNEL_SET
(
hadc
, 
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
);

1734 i‡((
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_TEMPSENSOR
) ||

1735 (
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_VREFINT
) )

1737 i‡(
	`READ_BIT
(
ADC
->
CCR
, 
ADC_CCR_TSVREFE
Ë=
RESET
)

1739 
	`SET_BIT
(
ADC
->
CCR
, 
ADC_CCR_TSVREFE
);

1741 i‡((
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_TEMPSENSOR
))

1745 
waô_lo›_ödex
 = (
ADC_TEMPSENSOR_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

1746 
waô_lo›_ödex
 != 0)

1748 
waô_lo›_ödex
--;

1755 
	`__HAL_UNLOCK
(
hadc
);

1758  
tmp_hÆ_°©us
;

1759 
	}
}

1775 
HAL_SètusTy≥Def
 
	$HAL_ADC_A«logWDGC⁄fig
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_A«logWDGC⁄fTy≥Def
* 
A«logWDGC⁄fig
)

1778 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

1779 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG_MODE
(
A«logWDGC⁄fig
->
W©chdogMode
));

1780 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
A«logWDGC⁄fig
->
ITMode
));

1781 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
ADC_RESOLUTION_12B
, 
A«logWDGC⁄fig
->
HighThªshﬁd
));

1782 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
ADC_RESOLUTION_12B
, 
A«logWDGC⁄fig
->
LowThªshﬁd
));

1784 if((
A«logWDGC⁄fig
->
W©chdogMode
 =
ADC_ANALOGWATCHDOG_SINGLE_REG
) ||

1785 (
A«logWDGC⁄fig
->
W©chdogMode
 =
ADC_ANALOGWATCHDOG_SINGLE_INJEC
) ||

1786 (
A«logWDGC⁄fig
->
W©chdogMode
 =
ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
) )

1788 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
A«logWDGC⁄fig
->
Ch™√l
));

1792 
	`__HAL_LOCK
(
hadc
);

1797 if(
A«logWDGC⁄fig
->
ITMode
 =
ENABLE
)

1800 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1805 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1813 
hadc
->
In°™˚
->
CR1
 &~–
ADC_CR1_AWDSGL
 |

1814 
ADC_CR1_JAWDEN
 |

1815 
ADC_CR1_AWDEN
 |

1816 
ADC_CR1_AWDCH
 );

1818 
hadc
->
In°™˚
->
CR1
 |–
A«logWDGC⁄fig
->
W©chdogMode
 |

1819 
A«logWDGC⁄fig
->
Ch™√l
 );

1822 
hadc
->
In°™˚
->
HTR
 = 
A«logWDGC⁄fig
->
HighThªshﬁd
;

1825 
hadc
->
In°™˚
->
LTR
 = 
A«logWDGC⁄fig
->
LowThªshﬁd
;

1828 
	`__HAL_UNLOCK
(
hadc
);

1831  
HAL_OK
;

1832 
	}
}

1862 
uöt32_t
 
	$HAL_ADC_GëSèã
(
ADC_H™dÀTy≥Def
* 
hadc
)

1865  
hadc
->
Sèã
;

1866 
	}
}

1873 
uöt32_t
 
	$HAL_ADC_GëEº‹
(
ADC_H™dÀTy≥Def
 *
hadc
)

1875  
hadc
->
Eº‹Code
;

1876 
	}
}

1903 
HAL_SètusTy≥Def
 
	$ADC_E«bÀ
(
ADC_H™dÀTy≥Def
* 
hadc
)

1905 
uöt32_t
 
tick°¨t
 = 0;

1906 
__IO
 
uöt32_t
 
waô_lo›_ödex
 = 0;

1912 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
)

1915 
	`__HAL_ADC_ENABLE
(
hadc
);

1919 
waô_lo›_ödex
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

1920 
waô_lo›_ödex
 != 0)

1922 
waô_lo›_ödex
--;

1926 
tick°¨t
 = 
	`HAL_GëTick
();

1929 
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
)

1931 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
ADC_ENABLE_TIMEOUT
)

1934 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

1937 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1940 
	`__HAL_UNLOCK
(
hadc
);

1942  
HAL_ERROR
;

1948  
HAL_OK
;

1949 
	}
}

1958 
HAL_SètusTy≥Def
 
	$ADC_C⁄vîsi⁄St›_DißbÀ
(
ADC_H™dÀTy≥Def
* 
hadc
)

1960 
uöt32_t
 
tick°¨t
 = 0;

1963 i‡(
	`ADC_IS_ENABLE
(
hadc
Ë!
RESET
)

1966 
	`__HAL_ADC_DISABLE
(
hadc
);

1969 
tick°¨t
 = 
	`HAL_GëTick
();

1972 
	`ADC_IS_ENABLE
(
hadc
Ë!
RESET
)

1974 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
ADC_DISABLE_TIMEOUT
)

1977 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
);

1980 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_INTERNAL
);

1982  
HAL_ERROR
;

1988  
HAL_OK
;

1989 
	}
}

1996 
	$ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1999 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2002 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_INTERNAL
 | 
HAL_ADC_STATE_ERROR_DMA
))

2005 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_EOC
);

2013 if(
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

2014 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) &&

2015 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
SQR1
, 
ADC_SQR1_L
) ||

2016 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) ) )

2022 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

2025 
	`CLEAR_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
);

2027 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
))

2029 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_READY
);

2034 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

2039 
hadc
->
DMA_H™dÀ
->
	`X„rEº‹CÆlback
(
hdma
);

2041 
	}
}

2048 
	$ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2051 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2054 
	`HAL_ADC_C⁄vHÆfC∂tCÆlback
(
hadc
);

2055 
	}
}

2062 
	$ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2065 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2068 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_DMA
);

2071 
	`SET_BIT
(
hadc
->
Eº‹Code
, 
HAL_ADC_ERROR_DMA
);

2074 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

2075 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_adc_ex.c

56 
	~"°m32l1xx_hÆ.h
"

67 #ifde‡
HAL_ADC_MODULE_ENABLED


78 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_4CYCLE5
 ((
uöt32_t
Ë16)

	)

79 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_9CYCLES
 ((
uöt32_t
Ë21)

	)

80 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_16CYCLES
 ((
uöt32_t
Ë28)

	)

81 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_24CYCLES
 ((
uöt32_t
Ë36)

	)

82 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_48CYCLES
 ((
uöt32_t
Ë60)

	)

83 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_96CYCLES
 ((
uöt32_t
)108)

	)

84 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_192CYCLES
 ((
uöt32_t
)204)

	)

85 
	#ADC_CONVERSIONCLOCKCYCLES_SAMPLETIME_384CYCLES
 ((
uöt32_t
)396)

	)

90 
	#ADC_TEMPSENSOR_DELAY_US
 ((
uöt32_t
Ë10)

	)

130 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSèπ
(
ADC_H™dÀTy≥Def
* 
hadc
)

132 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

135 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

138 
	`__HAL_LOCK
(
hadc
);

141 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

144 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

149 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

150 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_INJ_EOC
,

151 
HAL_ADC_STATE_INJ_BUSY
);

157 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
))

160 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

166 
	`__HAL_UNLOCK
(
hadc
);

170 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JEOC
);

178 i‡(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

179 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) )

182 
	`SET_BIT
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JSWSTART
);

187  
tmp_hÆ_°©us
;

188 
	}
}

202 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSt›
(
ADC_H™dÀTy≥Def
* 
hadc
)

204 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

207 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

210 
	`__HAL_LOCK
(
hadc
);

218 if(((
hadc
->
Sèã
 & 
HAL_ADC_STATE_REG_BUSY
Ë=
RESET
) &&

219 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) )

223 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

226 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

229 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

230 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

231 
HAL_ADC_STATE_READY
);

237 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

239 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

243 
	`__HAL_UNLOCK
(
hadc
);

246  
tmp_hÆ_°©us
;

247 
	}
}

255 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edPﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
)

257 
uöt32_t
 
tick°¨t
;

264 
uöt32_t
 
c⁄vîsi⁄_timeout_˝u_cy˛es
 = 28;

265 
uöt32_t
 
c⁄vîsi⁄_timeout_˝u_cy˛es_max
 = 0;

268 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

271 
tick°¨t
 = 
	`HAL_GëTick
();

294 i‡(((
hadc
->
In°™˚
->
JSQR
 & 
ADC_JSQR_JL
Ë=
RESET
) ||

295 (
hadc
->
Inô
.
EOCSñe˘i⁄
 !
ADC_EOC_SINGLE_CONV
) )

298 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
SR
, 
ADC_FLAG_JEOC
))

301 if(
Timeout
 !
HAL_MAX_DELAY
)

303 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

306 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

309 
	`__HAL_UNLOCK
(
hadc
);

311  
HAL_TIMEOUT
;

321 
c⁄vîsi⁄_timeout_˝u_cy˛es_max
 = 
	`ADC_GET_CLOCK_PRESCALER_DECIMAL
(
hadc
);

322 
c⁄vîsi⁄_timeout_˝u_cy˛es_max
 *
	`ADC_CONVCYCLES_MAX_RANGE
(
hadc
);

325 
c⁄vîsi⁄_timeout_˝u_cy˛es
 < 
c⁄vîsi⁄_timeout_˝u_cy˛es_max
)

328 if(
Timeout
 !
HAL_MAX_DELAY
)

330 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

333 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_TIMEOUT
);

336 
	`__HAL_UNLOCK
(
hadc
);

338  
HAL_TIMEOUT
;

341 
c⁄vîsi⁄_timeout_˝u_cy˛es
 ++;

348 i‡(
hadc
->
Inô
.
LowPowîAutoWaô
 =
DISABLE
)

351 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JSTRT
 | 
ADC_FLAG_JEOC
);

355 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_EOC
);

363 if(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

364 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
JSQR
, 
ADC_JSQR_JL
) ||

365 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) ) &&

366 (
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) &&

367 (
	`ADC_IS_SOFTWARE_START_REGULAR
(
hadc
) &&

368 (
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
) ) ) )

371 
	`CLEAR_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_INJ_BUSY
);

373 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
))

375 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_READY
);

380  
HAL_OK
;

381 
	}
}

390 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

392 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

398 
	`__HAL_LOCK
(
hadc
);

401 
tmp_hÆ_°©us
 = 
	`ADC_E«bÀ
(
hadc
);

404 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

409 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

410 
HAL_ADC_STATE_READY
 | 
HAL_ADC_STATE_INJ_EOC
,

411 
HAL_ADC_STATE_INJ_BUSY
);

417 i‡(
	`HAL_IS_BIT_CLR
(
hadc
->
Sèã
, 
HAL_ADC_STATE_REG_BUSY
))

420 
	`ADC_CLEAR_ERRORCODE
(
hadc
);

426 
	`__HAL_UNLOCK
(
hadc
);

430 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_JEOC
);

433 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

441 i‡(
	`ADC_IS_SOFTWARE_START_INJECTED
(
hadc
) &&

442 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) )

445 
	`SET_BIT
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JSWSTART
);

450  
tmp_hÆ_°©us
;

451 
	}
}

465 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSt›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

467 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

470 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

473 
	`__HAL_LOCK
(
hadc
);

481 if(((
hadc
->
Sèã
 & 
HAL_ADC_STATE_REG_BUSY
Ë=
RESET
) &&

482 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
) )

486 
tmp_hÆ_°©us
 = 
	`ADC_C⁄vîsi⁄St›_DißbÀ
(
hadc
);

489 i‡(
tmp_hÆ_°©us
 =
HAL_OK
)

492 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

495 
	`ADC_STATE_CLR_SET
(
hadc
->
Sèã
,

496 
HAL_ADC_STATE_REG_BUSY
 | 
HAL_ADC_STATE_INJ_BUSY
,

497 
HAL_ADC_STATE_READY
);

503 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

505 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

509 
	`__HAL_UNLOCK
(
hadc
);

512  
tmp_hÆ_°©us
;

513 
	}
}

543 
uöt32_t
 
	$HAL_ADCEx_Inje˘edGëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Inje˘edR™k
)

545 
uöt32_t
 
tmp_jdr
 = 0;

548 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

549 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
Inje˘edR™k
));

552 
Inje˘edR™k
)

554 
ADC_INJECTED_RANK_4
:

555 
tmp_jdr
 = 
hadc
->
In°™˚
->
JDR4
;

557 
ADC_INJECTED_RANK_3
:

558 
tmp_jdr
 = 
hadc
->
In°™˚
->
JDR3
;

560 
ADC_INJECTED_RANK_2
:

561 
tmp_jdr
 = 
hadc
->
In°™˚
->
JDR2
;

563 
ADC_INJECTED_RANK_1
:

565 
tmp_jdr
 = 
hadc
->
In°™˚
->
JDR1
;

570  
tmp_jdr
;

571 
	}
}

578 
__wók
 
	$HAL_ADCEx_Inje˘edC⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

581 
	`UNUSED
(
hadc
);

586 
	}
}

620 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edC⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Inje˘i⁄C⁄fTy≥Def
* 
sC⁄figInje˘ed
)

622 
HAL_SètusTy≥Def
 
tmp_hÆ_°©us
 = 
HAL_OK
;

623 
__IO
 
uöt32_t
 
waô_lo›_ödex
 = 0;

626 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

627 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
sC⁄figInje˘ed
->
Inje˘edCh™√l
));

628 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
));

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
sC⁄figInje˘ed
->
AutoInje˘edC⁄v
));

630 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIGINJEC
(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
));

631 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
ADC_RESOLUTION_12B
, 
sC⁄figInje˘ed
->
Inje˘edOff£t
));

633 if(
hadc
->
Inô
.
SˇnC⁄vMode
 !
ADC_SCAN_DISABLE
)

635 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
sC⁄figInje˘ed
->
Inje˘edR™k
));

636 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_NB_CONV
(
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
));

637 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
sC⁄figInje˘ed
->
Inje˘edDisc⁄töuousC⁄vMode
));

640 if(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
 !
ADC_INJECTED_SOFTWARE_START
)

642 
	`as£π_∑øm
(
	`IS_ADC_EXTTRIGINJEC_EDGE
(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄vEdge
));

646 
	`__HAL_LOCK
(
hadc
);

657 i‡(
hadc
->
Inô
.
SˇnC⁄vMode
 =
ADC_SCAN_DISABLE
)

659 i‡(
sC⁄figInje˘ed
->
Inje˘edR™k
 =
ADC_INJECTED_RANK_1
)

662 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JSQR
 ,

663 
ADC_JSQR_JL
 |

664 
ADC_JSQR_JSQ4
 |

665 
ADC_JSQR_JSQ3
 |

666 
ADC_JSQR_JSQ2
 |

667 
ADC_JSQR_JSQ1
 ,

668 
	`ADC_JSQR_RK_JL
(
sC⁄figInje˘ed
->
Inje˘edCh™√l
,

669 
ADC_INJECTED_RANK_1
,

677 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

679 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

687 i‡(
sC⁄figInje˘ed
->
Inje˘edR™k
 <sC⁄figInje˘ed->
Inje˘edNbrOfC⁄vîsi⁄
)

691 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JSQR
 ,

693 
ADC_JSQR_JL
 |

694 
	`ADC_JSQR_RK_JL
(
ADC_JSQR_JSQ1
,

695 
sC⁄figInje˘ed
->
Inje˘edR™k
,

696 
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
) ,

698 
	`ADC_JSQR_JL_SHIFT
(
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
) |

699 
	`ADC_JSQR_RK_JL
(
sC⁄figInje˘ed
->
Inje˘edCh™√l
,

700 
sC⁄figInje˘ed
->
Inje˘edR™k
,

701 
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
) );

706 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JSQR
 ,

708 
ADC_JSQR_JL
 |

709 
	`ADC_JSQR_RK_JL
(
ADC_JSQR_JSQ1
,

710 
sC⁄figInje˘ed
->
Inje˘edR™k
,

711 
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
) ,

723 i‡(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
 !
ADC_INJECTED_SOFTWARE_START
)

725 
	`MODIFY_REG
(
hadc
->
In°™˚
->
CR2
 ,

726 
ADC_CR2_JEXTEN
 |

727 
ADC_CR2_JEXTSEL
 ,

728 
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
 |

729 
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄vEdge
 );

733 
	`MODIFY_REG
(
hadc
->
In°™˚
->
CR2
,

734 
ADC_CR2_JEXTEN
 |

735 
ADC_CR2_JEXTSEL
 ,

744 i‡((
	`ADC_IS_ENABLE
(
hadc
Ë=
RESET
))

746 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_JAUTO
 |

747 
ADC_CR1_JDISCEN
 );

751 i‡(
sC⁄figInje˘ed
->
AutoInje˘edC⁄v
 =
ENABLE
)

753 i‡(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
 =
ADC_INJECTED_SOFTWARE_START
)

755 
	`SET_BIT
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

760 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

762 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

768 i‡(
sC⁄figInje˘ed
->
Inje˘edDisc⁄töuousC⁄vMode
 =
ENABLE
)

770 i‡(
sC⁄figInje˘ed
->
AutoInje˘edC⁄v
 =
DISABLE
)

772 
	`SET_BIT
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JDISCEN
);

777 
	`SET_BIT
(
hadc
->
Sèã
, 
HAL_ADC_STATE_ERROR_CONFIG
);

779 
tmp_hÆ_°©us
 = 
HAL_ERROR
;

786 i‡(
sC⁄figInje˘ed
->
Inje˘edCh™√l
 < 
ADC_CHANNEL_10
)

788 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR3
,

789 
	`ADC_SMPR3
(
ADC_SMPR3_SMP0
, 
sC⁄figInje˘ed
->
Inje˘edCh™√l
),

790 
	`ADC_SMPR3
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
) );

793 i‡(
sC⁄figInje˘ed
->
Inje˘edCh™√l
 < 
ADC_CHANNEL_20
)

795 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR2
,

796 
	`ADC_SMPR2
(
ADC_SMPR2_SMP10
, 
sC⁄figInje˘ed
->
Inje˘edCh™√l
),

797 
	`ADC_SMPR2
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
) );

801 i‡(
sC⁄figInje˘ed
->
Inje˘edCh™√l
 <
ADC_SMPR1_CHANNEL_MAX
)

803 
	`MODIFY_REG
(
hadc
->
In°™˚
->
SMPR1
,

804 
	`ADC_SMPR1
(
ADC_SMPR1_SMP20
, 
sC⁄figInje˘ed
->
Inje˘edCh™√l
),

805 
	`ADC_SMPR1
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
) );

810 
	`ADC_SMPR0_CHANNEL_SET
(
hadc
, 
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
);

815 
sC⁄figInje˘ed
->
Inje˘edR™k
)

819 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JOFR1
,

820 
ADC_JOFR1_JOFFSET1
,

821 
sC⁄figInje˘ed
->
Inje˘edOff£t
);

825 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JOFR2
,

826 
ADC_JOFR2_JOFFSET2
,

827 
sC⁄figInje˘ed
->
Inje˘edOff£t
);

831 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JOFR3
,

832 
ADC_JOFR3_JOFFSET3
,

833 
sC⁄figInje˘ed
->
Inje˘edOff£t
);

837 
	`MODIFY_REG
(
hadc
->
In°™˚
->
JOFR4
,

838 
ADC_JOFR4_JOFFSET4
,

839 
sC⁄figInje˘ed
->
Inje˘edOff£t
);

845 i‡((
sC⁄figInje˘ed
->
Inje˘edCh™√l
 =
ADC_CHANNEL_TEMPSENSOR
) ||

846 (
sC⁄figInje˘ed
->
Inje˘edCh™√l
 =
ADC_CHANNEL_VREFINT
) )

848 
	`SET_BIT
(
ADC
->
CCR
, 
ADC_CCR_TSVREFE
);

850 i‡((
sC⁄figInje˘ed
->
Inje˘edCh™√l
 =
ADC_CHANNEL_TEMPSENSOR
))

854 
waô_lo›_ödex
 = (
ADC_TEMPSENSOR_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

855 
waô_lo›_ödex
 != 0)

857 
waô_lo›_ödex
--;

863 
	`__HAL_UNLOCK
(
hadc
);

866  
tmp_hÆ_°©us
;

867 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_cortex.c

124 
	~"°m32l1xx_hÆ.h
"

135 #ifde‡
HAL_CORTEX_MODULE_ENABLED


184 
	$HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

187 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

190 
	`NVIC_SëPri‹ôyGroupög
(
Pri‹ôyGroup
);

191 
	}
}

206 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

208 
uöt32_t
 
¥i‹ôygroup
 = 0x00;

211 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‹ôy
));

212 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

214 
¥i‹ôygroup
 = 
	`NVIC_GëPri‹ôyGroupög
();

216 
	`NVIC_SëPri‹ôy
(
IRQn
, 
	`NVIC_EncodePri‹ôy
(
¥i‹ôygroup
, 
Pªem±Pri‹ôy
, 
SubPri‹ôy
));

217 
	}
}

228 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

231 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

234 
	`NVIC_E«bÀIRQ
(
IRQn
);

235 
	}
}

244 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

247 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

250 
	`NVIC_DißbÀIRQ
(
IRQn
);

251 
	}
}

257 
	$HAL_NVIC_Sy°emRe£t
()

260 
	`NVIC_Sy°emRe£t
();

261 
	}
}

270 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

272  
	`SysTick_C⁄fig
(
TicksNumb
);

273 
	}
}

294 #i‡(
__MPU_PRESENT
 == 1)

301 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

304 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

305 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

308 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

310 i‡((
MPU_Inô
->
E«bÀ
Ë!
RESET
)

313 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

314 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

315 
	`as£π_∑øm
(
	`IS_MPU_TEX_LEVEL
(
MPU_Inô
->
Ty≥ExtFõld
));

316 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

317 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

318 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

319 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

320 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

322 
MPU
->
RBAR
 = 
MPU_Inô
->
Ba£Addªss
;

323 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

324 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

325 ((
uöt32_t
)
MPU_Inô
->
Ty≥ExtFõld
 << 
MPU_RASR_TEX_Pos
) |

326 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

327 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

328 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

329 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

330 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

331 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

335 
MPU
->
RBAR
 = 0x00;

336 
MPU
->
RASR
 = 0x00;

338 
	}
}

345 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôyGroupög
()

348  
	`NVIC_GëPri‹ôyGroupög
();

349 
	}
}

372 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

375 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

377 
	`NVIC_DecodePri‹ôy
(
	`NVIC_GëPri‹ôy
(
IRQn
), 
Pri‹ôyGroup
, 
pPªem±Pri‹ôy
, 
pSubPri‹ôy
);

378 
	}
}

387 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

390 
	`NVIC_SëPídögIRQ
(
IRQn
);

391 
	}
}

402 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

405  
	`NVIC_GëPídögIRQ
(
IRQn
);

406 
	}
}

415 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

418 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

419 
	}
}

429 
uöt32_t
 
	$HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

432  
	`NVIC_GëA˘ive
(
IRQn
);

433 
	}
}

443 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

446 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

447 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

449 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

453 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

455 
	}
}

461 
	$HAL_SYSTICK_IRQH™dÀr
()

463 
	`HAL_SYSTICK_CÆlback
();

464 
	}
}

470 
__wók
 
	$HAL_SYSTICK_CÆlback
()

475 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_dma.c

103 
	~"°m32l1xx_hÆ.h
"

114 #ifde‡
HAL_DMA_MODULE_ENABLED


124 
DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

162 
HAL_SètusTy≥Def
 
	$HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
)

164 
uöt32_t
 
tmp
 = 0;

167 if(
hdma
 =
NULL
)

169  
HAL_ERROR
;

173 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

174 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
hdma
->
Inô
.
Dúe˘i⁄
));

175 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
Inô
.
PîùhInc
));

176 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
Inô
.
MemInc
));

177 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
Inô
.
PîùhD©aAlignmít
));

178 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
Inô
.
MemD©aAlignmít
));

179 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
hdma
->
Inô
.
Mode
));

180 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
hdma
->
Inô
.
Pri‹ôy
));

182 #i‡
	`deföed
 (
DMA2
)

184 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

187 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

188 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

193 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

194 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

199 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

200 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

204 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

207 
tmp
 = 
hdma
->
In°™˚
->
CCR
;

210 
tmp
 &((
uöt32_t
)~(
DMA_CCR_PL
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PSIZE
 | \

211 
DMA_CCR_MINC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_CIRC
 | \

212 
DMA_CCR_DIR
));

215 
tmp
 |
hdma
->
Inô
.
Dúe˘i⁄
 |

216 
hdma
->
Inô
.
PîùhInc
 | hdma->Inô.
MemInc
 |

217 
hdma
->
Inô
.
PîùhD©aAlignmít
 | hdma->Inô.
MemD©aAlignmít
 |

218 
hdma
->
Inô
.
Mode
 | hdma->Inô.
Pri‹ôy
;

221 
hdma
->
In°™˚
->
CCR
 = 
tmp
;

224 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

225 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

226 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

227 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

230 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

233 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

236 
hdma
->
Lock
 = 
HAL_UNLOCKED
;

238  
HAL_OK
;

239 
	}
}

247 
HAL_SètusTy≥Def
 
	$HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
)

250 i‡(
NULL
 =
hdma
 )

252  
HAL_ERROR
;

256 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

259 
	`__HAL_DMA_DISABLE
(
hdma
);

261 #i‡
	`deföed
 (
DMA2
)

263 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

266 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

267 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

272 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

273 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

278 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

279 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

283 
hdma
->
In°™˚
->
CCR
 = 0;

286 
hdma
->
In°™˚
->
CNDTR
 = 0;

289 
hdma
->
In°™˚
->
CPAR
 = 0;

292 
hdma
->
In°™˚
->
CMAR
 = 0;

295 
hdma
->
DmaBa£Addªss
->
IFCR
 = ((
DMA_ISR_GIF1
Ë<< (hdma->
Ch™√lIndex
));

298 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

301 
hdma
->
Sèã
 = 
HAL_DMA_STATE_RESET
;

304 
	`__HAL_UNLOCK
(
hdma
);

306  
HAL_OK
;

307 
	}
}

341 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

343 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

346 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

349 
	`__HAL_LOCK
(
hdma
);

351 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

354 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

355 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

358 
	`__HAL_DMA_DISABLE
(
hdma
);

361 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

364 
	`__HAL_DMA_ENABLE
(
hdma
);

369 
	`__HAL_UNLOCK
(
hdma
);

370 
°©us
 = 
HAL_BUSY
;

372  
°©us
;

373 
	}
}

384 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

386 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

389 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

392 
	`__HAL_LOCK
(
hdma
);

394 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

397 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

398 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

401 
	`__HAL_DMA_DISABLE
(
hdma
);

404 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

408 if(
NULL
 !
hdma
->
X„rHÆfC∂tCÆlback
 )

411 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

415 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

416 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_TE
));

419 
	`__HAL_DMA_ENABLE
(
hdma
);

424 
	`__HAL_UNLOCK
(
hdma
);

427 
°©us
 = 
HAL_BUSY
;

429  
°©us
;

430 
	}
}

438 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

440 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

443 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

446 
	`__HAL_DMA_DISABLE
(
hdma
);

449 
hdma
->
DmaBa£Addªss
->
IFCR
 = ((
DMA_ISR_GIF1
Ë<< (hdma->
Ch™√lIndex
));

452 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

455 
	`__HAL_UNLOCK
(
hdma
);

457  
°©us
;

458 
	}
}

466 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
)

468 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

470 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

473 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

475 
°©us
 = 
HAL_ERROR
;

480 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

483 
	`__HAL_DMA_DISABLE
(
hdma
);

486 
hdma
->
DmaBa£Addªss
->
IFCR
 = ((
DMA_ISR_GIF1
Ë<< (hdma->
Ch™√lIndex
));

489 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

492 
	`__HAL_UNLOCK
(
hdma
);

495 if(
hdma
->
X„rAb‹tCÆlback
 !
NULL
)

497 
hdma
->
	`X„rAb‹tCÆlback
(hdma);

500  
°©us
;

501 
	}
}

511 
HAL_SètusTy≥Def
 
	$HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
)

513 
uöt32_t
 
ãmp
;

514 
uöt32_t
 
tick°¨t
 = 0;

516 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

519 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

520 
	`__HAL_UNLOCK
(
hdma
);

521  
HAL_ERROR
;

525 i‡(
RESET
 !(
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
))

527 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NOT_SUPPORTED
;

528  
HAL_ERROR
;

532 i‡(
HAL_DMA_FULL_TRANSFER
 =
Com∂ëeLevñ
)

535 
ãmp
 = 
DMA_FLAG_TC1
 << 
hdma
->
Ch™√lIndex
;

540 
ãmp
 = 
DMA_FLAG_HT1
 << 
hdma
->
Ch™√lIndex
;

544 
tick°¨t
 = 
	`HAL_GëTick
();

546 
RESET
 =(
hdma
->
DmaBa£Addªss
->
ISR
 & 
ãmp
))

548 if((
RESET
 !(
hdma
->
DmaBa£Addªss
->
ISR
 & (
DMA_FLAG_TE1
 << hdma->
Ch™√lIndex
))))

553 
hdma
->
DmaBa£Addªss
->
IFCR
 = ((
DMA_ISR_GIF1
Ë<< (hdma->
Ch™√lIndex
));

556 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_TE
;

559 
hdma
->
Sèã

HAL_DMA_STATE_READY
;

562 
	`__HAL_UNLOCK
(
hdma
);

564  
HAL_ERROR
;

567 if(
Timeout
 !
HAL_MAX_DELAY
)

569 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

572 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_TIMEOUT
;

575 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

578 
	`__HAL_UNLOCK
(
hdma
);

580  
HAL_ERROR
;

585 if(
HAL_DMA_FULL_TRANSFER
 =
Com∂ëeLevñ
)

588 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_FLAG_TC1
 << hdma->
Ch™√lIndex
);

592 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

597 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_FLAG_HT1
 << hdma->
Ch™√lIndex
);

601 
	`__HAL_UNLOCK
(
hdma
);

603  
HAL_OK
;

604 
	}
}

612 
	$HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
)

614 
uöt32_t
 
Êag_ô
 = 
hdma
->
DmaBa£Addªss
->
ISR
;

615 
uöt32_t
 
sour˚_ô
 = 
hdma
->
In°™˚
->
CCR
;

618 i‡((
RESET
 !(
Êag_ô
 & (
DMA_FLAG_HT1
 << 
hdma
->
Ch™√lIndex
))Ë&& (RESET !(
sour˚_ô
 & 
DMA_IT_HT
)))

621 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0)

624 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

627 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_HTIF1
 << hdma->
Ch™√lIndex
);

632 if(
hdma
->
X„rHÆfC∂tCÆlback
 !
NULL
)

635 
hdma
->
	`X„rHÆfC∂tCÆlback
(hdma);

640 i‡((
RESET
 !(
Êag_ô
 & (
DMA_FLAG_TC1
 << 
hdma
->
Ch™√lIndex
))Ë&& (RESET !(
sour˚_ô
 & 
DMA_IT_TC
)))

642 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0)

645 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
 | 
DMA_IT_TC
);

648 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

652 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_TCIF1
 << hdma->
Ch™√lIndex
);

655 
	`__HAL_UNLOCK
(
hdma
);

657 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

660 
hdma
->
	`X„rC∂tCÆlback
(hdma);

665 i‡(–
RESET
 !(
Êag_ô
 & (
DMA_FLAG_TE1
 << 
hdma
->
Ch™√lIndex
))Ë&& (RESET !(
sour˚_ô
 & 
DMA_IT_TE
)))

670 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

673 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

676 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_TE
;

679 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

682 
	`__HAL_UNLOCK
(
hdma
);

684 i‡(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

687 
hdma
->
	`X„rEº‹CÆlback
(hdma);

691 
	}
}

703 
HAL_SètusTy≥Def
 
HAL_DMA_Regi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
, (* 
pCÆlback
)–DMA_H™dÀTy≥De‡* 
_hdma
))

705 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

708 
	`__HAL_LOCK
(
hdma
);

710 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

712 
CÆlbackID
)

714 
HAL_DMA_XFER_CPLT_CB_ID
:

715 
hdma
->
X„rC∂tCÆlback
 = 
pCÆlback
;

718 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

719 
hdma
->
X„rHÆfC∂tCÆlback
 = 
pCÆlback
;

722 
HAL_DMA_XFER_ERROR_CB_ID
:

723 
hdma
->
X„rEº‹CÆlback
 = 
pCÆlback
;

726 
HAL_DMA_XFER_ABORT_CB_ID
:

727 
hdma
->
X„rAb‹tCÆlback
 = 
pCÆlback
;

731 
°©us
 = 
HAL_ERROR
;

737 
°©us
 = 
HAL_ERROR
;

741 
	`__HAL_UNLOCK
(
hdma
);

743  
°©us
;

744 
	}
}

754 
HAL_SètusTy≥Def
 
	$HAL_DMA_UnRegi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
)

756 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

759 
	`__HAL_LOCK
(
hdma
);

761 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

763 
CÆlbackID
)

765 
HAL_DMA_XFER_CPLT_CB_ID
:

766 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

769 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

770 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

773 
HAL_DMA_XFER_ERROR_CB_ID
:

774 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

777 
HAL_DMA_XFER_ABORT_CB_ID
:

778 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

781 
HAL_DMA_XFER_ALL_CB_ID
:

782 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

783 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

784 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

785 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

789 
°©us
 = 
HAL_ERROR
;

795 
°©us
 = 
HAL_ERROR
;

799 
	`__HAL_UNLOCK
(
hdma
);

801  
°©us
;

802 
	}
}

832 
HAL_DMA_SèãTy≥Def
 
	$HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
)

835  
hdma
->
Sèã
;

836 
	}
}

844 
uöt32_t
 
	$HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

846  
hdma
->
Eº‹Code
;

847 
	}
}

870 
	$DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

873 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

876 
hdma
->
In°™˚
->
CNDTR
 = 
D©aLígth
;

879 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

882 
hdma
->
In°™˚
->
CPAR
 = 
D°Addªss
;

885 
hdma
->
In°™˚
->
CMAR
 = 
SrcAddªss
;

891 
hdma
->
In°™˚
->
CPAR
 = 
SrcAddªss
;

894 
hdma
->
In°™˚
->
CMAR
 = 
D°Addªss
;

896 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_gpio.c

136 
	~"°m32l1xx_hÆ.h
"

147 #ifde‡
HAL_GPIO_MODULE_ENABLED


154 
	#GPIO_MODE
 ((
uöt32_t
)0x00000003)

	)

155 
	#EXTI_MODE
 ((
uöt32_t
)0x10000000)

	)

156 
	#GPIO_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

157 
	#GPIO_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

158 
	#RISING_EDGE
 ((
uöt32_t
)0x00100000)

	)

159 
	#FALLING_EDGE
 ((
uöt32_t
)0x00200000)

	)

160 
	#GPIO_OUTPUT_TYPE
 ((
uöt32_t
)0x00000010)

	)

162 
	#GPIO_NUMBER
 ((
uöt32_t
)16)

	)

196 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

198 
uöt32_t
 
posôi⁄
 = 0x00;

199 
uöt32_t
 
iocuºít
 = 0x00;

200 
uöt32_t
 
ãmp
 = 0x00;

203 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

204 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Inô
->
Pö
));

205 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

206 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

209 ((
GPIO_Inô
->
Pö
Ë>> 
posôi⁄
) != 0)

212 
iocuºít
 = (
GPIO_Inô
->
Pö
Ë& ((
uöt32_t
)1 << 
posôi⁄
);

214 if(
iocuºít
)

218 if((
GPIO_Inô
->
Mode
 =
GPIO_MODE_AF_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

221 
	`as£π_∑øm
(
	`IS_GPIO_AF_INSTANCE
(
GPIOx
));

222 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_Inô
->
A…î«ã
));

226 
ãmp
 = 
GPIOx
->
AFR
[
posôi⁄
 >> 3];

227 
	`CLEAR_BIT
(
ãmp
, (
uöt32_t
)0xF << ((uöt32_t)(
posôi⁄
 & (uint32_t)0x07) * 4)) ;

228 
	`SET_BIT
(
ãmp
, (
uöt32_t
)(
GPIO_Inô
->
A…î«ã
Ë<< (((uöt32_t)
posôi⁄
 & (uint32_t)0x07) * 4));

229 
GPIOx
->
AFR
[
posôi⁄
 >> 3] = 
ãmp
;

233 
ãmp
 = 
GPIOx
->
MODER
;

234 
	`CLEAR_BIT
(
ãmp
, 
GPIO_MODER_MODER0
 << (
posôi⁄
 * 2));

235 
	`SET_BIT
(
ãmp
, (
GPIO_Inô
->
Mode
 & 
GPIO_MODE
Ë<< (
posôi⁄
 * 2));

236 
GPIOx
->
MODER
 = 
ãmp
;

239 i‡((
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_PP
) ||

240 (
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_OD
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

243 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

245 
ãmp
 = 
GPIOx
->
OSPEEDR
;

246 
	`CLEAR_BIT
(
ãmp
, 
GPIO_OSPEEDER_OSPEEDR0
 << (
posôi⁄
 * 2));

247 
	`SET_BIT
(
ãmp
, 
GPIO_Inô
->
S≥ed
 << (
posôi⁄
 * 2));

248 
GPIOx
->
OSPEEDR
 = 
ãmp
;

251 
ãmp
 = 
GPIOx
->
OTYPER
;

252 
	`CLEAR_BIT
(
ãmp
, 
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

253 
	`SET_BIT
(
ãmp
, ((
GPIO_Inô
->
Mode
 & 
GPIO_OUTPUT_TYPE
Ë>> 4Ë<< 
posôi⁄
);

254 
GPIOx
->
OTYPER
 = 
ãmp
;

258 
ãmp
 = 
GPIOx
->
PUPDR
;

259 
	`CLEAR_BIT
(
ãmp
, 
GPIO_PUPDR_PUPDR0
 << (
posôi⁄
 * 2));

260 
	`SET_BIT
(
ãmp
, (
GPIO_Inô
->
PuŒ
Ë<< (
posôi⁄
 * 2));

261 
GPIOx
->
PUPDR
 = 
ãmp
;

265 if((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

268 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

270 
ãmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2];

271 
	`CLEAR_BIT
(
ãmp
, ((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

272 
	`SET_BIT
(
ãmp
, (
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4 * (
posôi⁄
 & 0x03)));

273 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2] = 
ãmp
;

276 
ãmp
 = 
EXTI
->
IMR
;

277 
	`CLEAR_BIT
(
ãmp
, (
uöt32_t
)
iocuºít
);

278 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

280 
	`SET_BIT
(
ãmp
, 
iocuºít
);

282 
EXTI
->
IMR
 = 
ãmp
;

284 
ãmp
 = 
EXTI
->
EMR
;

285 
	`CLEAR_BIT
(
ãmp
, (
uöt32_t
)
iocuºít
);

286 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

288 
	`SET_BIT
(
ãmp
, 
iocuºít
);

290 
EXTI
->
EMR
 = 
ãmp
;

293 
ãmp
 = 
EXTI
->
RTSR
;

294 
	`CLEAR_BIT
(
ãmp
, (
uöt32_t
)
iocuºít
);

295 if((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

297 
	`SET_BIT
(
ãmp
, 
iocuºít
);

299 
EXTI
->
RTSR
 = 
ãmp
;

301 
ãmp
 = 
EXTI
->
FTSR
;

302 
	`CLEAR_BIT
(
ãmp
, (
uöt32_t
)
iocuºít
);

303 if((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

305 
	`SET_BIT
(
ãmp
, 
iocuºít
);

307 
EXTI
->
FTSR
 = 
ãmp
;

311 
posôi⁄
++;

313 
	}
}

322 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

324 
uöt32_t
 
posôi⁄
 = 0x00;

325 
uöt32_t
 
iocuºít
 = 0x00;

326 
uöt32_t
 
tmp
 = 0x00;

329 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

330 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

333 (
GPIO_Pö
 >> 
posôi⁄
) != 0)

336 
iocuºít
 = (
GPIO_Pö
Ë& ((
uöt32_t
)1 << 
posôi⁄
);

338 i‡(
iocuºít
)

342 
	`CLEAR_BIT
(
GPIOx
->
MODER
, 
GPIO_MODER_MODER0
 << (
posôi⁄
 * 2));

345 
	`CLEAR_BIT
(
GPIOx
->
AFR
[
posôi⁄
 >> 3], (
uöt32_t
)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;

348 
	`CLEAR_BIT
(
GPIOx
->
OSPEEDR
, 
GPIO_OSPEEDER_OSPEEDR0
 << (
posôi⁄
 * 2));

351 
	`CLEAR_BIT
(
GPIOx
->
OTYPER
, 
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

354 
	`CLEAR_BIT
(
GPIOx
->
PUPDR
, 
GPIO_PUPDR_PUPDR0
 << (
posôi⁄
 * 2));

359 
tmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2];

360 
tmp
 &(((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

361 if(
tmp
 =(
	`GPIO_GET_INDEX
(
GPIOx
Ë<< (4 * (
posôi⁄
 & 0x03))))

363 
tmp
 = ((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03));

364 
	`CLEAR_BIT
(
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2], 
tmp
);

367 
	`CLEAR_BIT
(
EXTI
->
IMR
, (
uöt32_t
)
iocuºít
);

368 
	`CLEAR_BIT
(
EXTI
->
EMR
, (
uöt32_t
)
iocuºít
);

371 
	`CLEAR_BIT
(
EXTI
->
RTSR
, (
uöt32_t
)
iocuºít
);

372 
	`CLEAR_BIT
(
EXTI
->
FTSR
, (
uöt32_t
)
iocuºít
);

376 
posôi⁄
++;

378 
	}
}

403 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

405 
GPIO_PöSèã
 
bô°©us
;

408 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

410 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

412 
bô°©us
 = 
GPIO_PIN_SET
;

416 
bô°©us
 = 
GPIO_PIN_RESET
;

418  
bô°©us
;

419 
	}
}

435 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

438 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

439 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

441 i‡(
PöSèã
 !
GPIO_PIN_RESET
)

443 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
;

447 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
 << 16 ;

449 
	}
}

457 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

460 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

462 
GPIOx
->
ODR
 ^
GPIO_Pö
;

463 
	}
}

485 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

487 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

490 
	`as£π_∑øm
(
	`IS_GPIO_LOCK_INSTANCE
(
GPIOx
));

491 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

494 
	`SET_BIT
(
tmp
, 
GPIO_Pö
);

496 
GPIOx
->
LCKR
 = 
tmp
;

498 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

500 
GPIOx
->
LCKR
 = 
tmp
;

502 
tmp
 = 
GPIOx
->
LCKR
;

504 if((
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
Ë!
RESET
)

506  
HAL_OK
;

510  
HAL_ERROR
;

512 
	}
}

519 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

522 if(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
Ë!
RESET
)

524 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

525 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

527 
	}
}

534 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

537 
	`UNUSED
(
GPIO_Pö
);

542 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_i2c.c

242 
	~"°m32l1xx_hÆ.h
"

253 #ifde‡
HAL_I2C_MODULE_ENABLED


260 
	#I2C_TIMEOUT_FLAG
 ((
uöt32_t
)35UË

	)

261 
	#I2C_TIMEOUT_ADDR_SLAVE
 ((
uöt32_t
)10000UË

	)

262 
	#I2C_TIMEOUT_BUSY_FLAG
 ((
uöt32_t
)25UË

	)

263 
	#I2C_NO_OPTION_FRAME
 ((
uöt32_t
)0xFFFF0000UË

	)

265 
	#I2C_MIN_PCLK_FREQ
 ((
uöt32_t
)2000000UË

	)

268 
	#I2C_STATE_MSK
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 | 
HAL_I2C_STATE_BUSY_RX
Ë& (~(uöt32_t)
HAL_I2C_STATE_READY
))Ë

	)

269 
	#I2C_STATE_NONE
 ((
uöt32_t
)(
HAL_I2C_MODE_NONE
)Ë

	)

270 
	#I2C_STATE_MASTER_BUSY_TX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MASTER
)Ë

	)

271 
	#I2C_STATE_MASTER_BUSY_RX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_MASTER
)Ë

	)

272 
	#I2C_STATE_SLAVE_BUSY_TX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_TX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_SLAVE
)Ë

	)

273 
	#I2C_STATE_SLAVE_BUSY_RX
 ((
uöt32_t
)((
HAL_I2C_STATE_BUSY_RX
 & 
I2C_STATE_MSK
Ë| 
HAL_I2C_MODE_SLAVE
)Ë

	)

286 
I2C_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

287 
I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

288 
I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

290 
I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
);

292 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

293 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

294 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

295 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

296 
HAL_SètusTy≥Def
 
I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
);

297 
HAL_SètusTy≥Def
 
I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
);

298 
HAL_SètusTy≥Def
 
I2C_WaôOnTXEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

299 
HAL_SètusTy≥Def
 
I2C_WaôOnBTFFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

300 
HAL_SètusTy≥Def
 
I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

301 
HAL_SètusTy≥Def
 
I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
);

302 
HAL_SètusTy≥Def
 
I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
);

305 
HAL_SètusTy≥Def
 
I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

306 
HAL_SètusTy≥Def
 
I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

307 
HAL_SètusTy≥Def
 
I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

308 
HAL_SètusTy≥Def
 
I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

309 
HAL_SètusTy≥Def
 
I2C_Ma°î_SB
(
I2C_H™dÀTy≥Def
 *
hi2c
);

310 
HAL_SètusTy≥Def
 
I2C_Ma°î_ADD10
(
I2C_H™dÀTy≥Def
 *
hi2c
);

311 
HAL_SètusTy≥Def
 
I2C_Ma°î_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

313 
HAL_SètusTy≥Def
 
I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

314 
HAL_SètusTy≥Def
 
I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

315 
HAL_SètusTy≥Def
 
I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

316 
HAL_SètusTy≥Def
 
I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

317 
HAL_SètusTy≥Def
 
I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

318 
HAL_SètusTy≥Def
 
I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

319 
HAL_SètusTy≥Def
 
I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

367 
HAL_SètusTy≥Def
 
	$HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

369 
uöt32_t
 
‰eqønge
 = 0U;

370 
uöt32_t
 
p˛k1
 = 0U;

373 if(
hi2c
 =
NULL
)

375  
HAL_ERROR
;

379 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

380 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
hi2c
->
Inô
.
ClockS≥ed
));

381 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
hi2c
->
Inô
.
DutyCy˛e
));

382 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
hi2c
->
Inô
.
OwnAddªss1
));

383 
	`as£π_∑øm
(
	`IS_I2C_ADDRESSING_MODE
(
hi2c
->
Inô
.
AddªssögMode
));

384 
	`as£π_∑øm
(
	`IS_I2C_DUAL_ADDRESS
(
hi2c
->
Inô
.
DuÆAddªssMode
));

385 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2
(
hi2c
->
Inô
.
OwnAddªss2
));

386 
	`as£π_∑øm
(
	`IS_I2C_GENERAL_CALL
(
hi2c
->
Inô
.
GíîÆCÆlMode
));

387 
	`as£π_∑øm
(
	`IS_I2C_NO_STRETCH
(
hi2c
->
Inô
.
NoSåëchMode
));

389 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_RESET
)

392 
hi2c
->
Lock
 = 
HAL_UNLOCKED
;

395 
	`HAL_I2C_M•Inô
(
hi2c
);

399 
p˛k1
 = 
	`HAL_RCC_GëPCLK1Fªq
();

402 if(
p˛k1
 < 
I2C_MIN_PCLK_FREQ
)

404  
HAL_ERROR
;

407 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

410 
	`__HAL_I2C_DISABLE
(
hi2c
);

413 
‰eqønge
 = 
	`I2C_FREQ_RANGE
(
p˛k1
);

417 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_FREQ
, 
‰eqønge
);

421 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
TRISE
, 
I2C_TRISE_TRISE
, 
	`I2C_RISE_TIME
(
‰eqønge
, hi2c->
Inô
.
ClockS≥ed
));

425 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CCR
, (
I2C_CCR_FS
 | 
I2C_CCR_DUTY
 | 
I2C_CCR_CCR
), 
	`I2C_SPEED
(
p˛k1
, hi2c->
Inô
.
ClockS≥ed
, hi2c->Inô.
DutyCy˛e
));

429 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
CR1
, (
I2C_CR1_ENGC
 | 
I2C_CR1_NOSTRETCH
), (hi2c->
Inô
.
GíîÆCÆlMode
 | hi2c->Inô.
NoSåëchMode
));

433 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
OAR1
, (
I2C_OAR1_ADDMODE
 | 
I2C_OAR1_ADD8_9
 | 
I2C_OAR1_ADD1_7
 | 
I2C_OAR1_ADD0
), (hi2c->
Inô
.
AddªssögMode
 | hi2c->Inô.
OwnAddªss1
));

437 
	`MODIFY_REG
(
hi2c
->
In°™˚
->
OAR2
, (
I2C_OAR2_ENDUAL
 | 
I2C_OAR2_ADD2
), (hi2c->
Inô
.
DuÆAddªssMode
 | hi2c->Inô.
OwnAddªss2
));

440 
	`__HAL_I2C_ENABLE
(
hi2c
);

442 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

443 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

444 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

445 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

447  
HAL_OK
;

448 
	}
}

456 
HAL_SètusTy≥Def
 
	$HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

459 if(
hi2c
 =
NULL
)

461  
HAL_ERROR
;

465 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

467 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

470 
	`__HAL_I2C_DISABLE
(
hi2c
);

473 
	`HAL_I2C_M•DeInô
(
hi2c
);

475 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

476 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_RESET
;

477 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

478 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

481 
	`__HAL_UNLOCK
(
hi2c
);

483  
HAL_OK
;

484 
	}
}

492 
__wók
 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

495 
	`UNUSED
(
hi2c
);

500 
	}
}

508 
__wók
 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

511 
	`UNUSED
(
hi2c
);

516 
	}
}

597 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

599 
uöt32_t
 
tick°¨t
 = 0x00U;

602 
tick°¨t
 = 
	`HAL_GëTick
();

604 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

607 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

609  
HAL_BUSY
;

613 
	`__HAL_LOCK
(
hi2c
);

616 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

619 
	`__HAL_I2C_ENABLE
(
hi2c
);

623 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

625 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

626 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

627 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

630 
hi2c
->
pBuffPå
 = 
pD©a
;

631 
hi2c
->
X„rCou¡
 = 
Size
;

632 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

633 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

636 if(
	`I2C_Ma°îReque°Wrôe
(
hi2c
, 
DevAddªss
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

638 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

641 
	`__HAL_UNLOCK
(
hi2c
);

642  
HAL_ERROR
;

647 
	`__HAL_UNLOCK
(
hi2c
);

648  
HAL_TIMEOUT
;

653 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

655 
hi2c
->
X„rSize
 > 0U)

658 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

660 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

663 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

664  
HAL_ERROR
;

668  
HAL_TIMEOUT
;

673 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

674 
hi2c
->
X„rCou¡
--;

675 
hi2c
->
X„rSize
--;

677 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0U))

680 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

681 
hi2c
->
X„rCou¡
--;

682 
hi2c
->
X„rSize
--;

686 if(
	`I2C_WaôOnBTFFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

688 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

691 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

692  
HAL_ERROR
;

696  
HAL_TIMEOUT
;

702 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

704 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

705 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

708 
	`__HAL_UNLOCK
(
hi2c
);

710  
HAL_OK
;

714  
HAL_BUSY
;

716 
	}
}

729 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

731 
uöt32_t
 
tick°¨t
 = 0x00U;

734 
tick°¨t
 = 
	`HAL_GëTick
();

736 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

739 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

741  
HAL_BUSY
;

745 
	`__HAL_LOCK
(
hi2c
);

748 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

751 
	`__HAL_I2C_ENABLE
(
hi2c
);

755 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

757 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

758 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

759 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

762 
hi2c
->
pBuffPå
 = 
pD©a
;

763 
hi2c
->
X„rCou¡
 = 
Size
;

764 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

765 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

768 if(
	`I2C_Ma°îReque°Ród
(
hi2c
, 
DevAddªss
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

770 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

773 
	`__HAL_UNLOCK
(
hi2c
);

774  
HAL_ERROR
;

779 
	`__HAL_UNLOCK
(
hi2c
);

780  
HAL_TIMEOUT
;

784 if(
hi2c
->
X„rSize
 == 0U)

787 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

790 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

792 if(
hi2c
->
X„rSize
 == 1U)

795 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

798 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

801 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

803 if(
hi2c
->
X„rSize
 == 2U)

806 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

809 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

812 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

817 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

820 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

823 
hi2c
->
X„rSize
 > 0U)

825 if(
hi2c
->
X„rSize
 <= 3U)

828 if(
hi2c
->
X„rSize
 == 1U)

831 if(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

833 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

835  
HAL_TIMEOUT
;

839  
HAL_ERROR
;

844 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

845 
hi2c
->
X„rSize
--;

846 
hi2c
->
X„rCou¡
--;

849 if(
hi2c
->
X„rSize
 == 2U)

852 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

854  
HAL_TIMEOUT
;

858 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

861 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

862 
hi2c
->
X„rSize
--;

863 
hi2c
->
X„rCou¡
--;

866 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

867 
hi2c
->
X„rSize
--;

868 
hi2c
->
X„rCou¡
--;

874 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

876  
HAL_TIMEOUT
;

880 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

883 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

884 
hi2c
->
X„rSize
--;

885 
hi2c
->
X„rCou¡
--;

888 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

890  
HAL_TIMEOUT
;

894 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

897 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

898 
hi2c
->
X„rSize
--;

899 
hi2c
->
X„rCou¡
--;

902 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

903 
hi2c
->
X„rSize
--;

904 
hi2c
->
X„rCou¡
--;

910 if(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

912 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

914  
HAL_TIMEOUT
;

918  
HAL_ERROR
;

923 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

924 
hi2c
->
X„rSize
--;

925 
hi2c
->
X„rCou¡
--;

927 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

930 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

931 
hi2c
->
X„rSize
--;

932 
hi2c
->
X„rCou¡
--;

937 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

938 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

941 
	`__HAL_UNLOCK
(
hi2c
);

943  
HAL_OK
;

947  
HAL_BUSY
;

949 
	}
}

960 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

962 
uöt32_t
 
tick°¨t
 = 0x00U;

965 
tick°¨t
 = 
	`HAL_GëTick
();

967 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

969 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

971  
HAL_ERROR
;

975 
	`__HAL_LOCK
(
hi2c
);

978 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

981 
	`__HAL_I2C_ENABLE
(
hi2c
);

985 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

987 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

988 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

989 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

992 
hi2c
->
pBuffPå
 = 
pD©a
;

993 
hi2c
->
X„rCou¡
 = 
Size
;

994 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

995 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

998 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1001 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1003  
HAL_TIMEOUT
;

1007 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1010 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

1013 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1015  
HAL_TIMEOUT
;

1019 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1022 
hi2c
->
X„rSize
 > 0U)

1025 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1028 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1029 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1031  
HAL_ERROR
;

1035  
HAL_TIMEOUT
;

1040 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

1041 
hi2c
->
X„rCou¡
--;

1042 
hi2c
->
X„rSize
--;

1044 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0U))

1047 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

1048 
hi2c
->
X„rCou¡
--;

1049 
hi2c
->
X„rSize
--;

1054 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_AF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1056  
HAL_TIMEOUT
;

1060 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

1063 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1065 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1066 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1069 
	`__HAL_UNLOCK
(
hi2c
);

1071  
HAL_OK
;

1075  
HAL_BUSY
;

1077 
	}
}

1088 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

1090 
uöt32_t
 
tick°¨t
 = 0x00U;

1093 
tick°¨t
 = 
	`HAL_GëTick
();

1095 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1097 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1099  
HAL_ERROR
;

1103 
	`__HAL_LOCK
(
hi2c
);

1106 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1109 
	`__HAL_I2C_ENABLE
(
hi2c
);

1113 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1115 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1116 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1117 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1120 
hi2c
->
pBuffPå
 = 
pD©a
;

1121 
hi2c
->
X„rCou¡
 = 
Size
;

1122 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1123 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1126 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1129 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1131  
HAL_TIMEOUT
;

1135 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1137 
hi2c
->
X„rSize
 > 0U)

1140 if(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1143 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1144 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

1146  
HAL_TIMEOUT
;

1150  
HAL_ERROR
;

1155 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

1156 
hi2c
->
X„rSize
--;

1157 
hi2c
->
X„rCou¡
--;

1159 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0U))

1162 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

1163 
hi2c
->
X„rSize
--;

1164 
hi2c
->
X„rCou¡
--;

1169 if(
	`I2C_WaôOnSTOPFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

1172 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1174 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1176  
HAL_ERROR
;

1180  
HAL_TIMEOUT
;

1185 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

1188 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1190 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1191 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1194 
	`__HAL_UNLOCK
(
hi2c
);

1196  
HAL_OK
;

1200  
HAL_BUSY
;

1202 
	}
}

1214 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1216 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1218 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1221 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

1224 if(
cou¡
-- == 0U)

1226 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1227 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

1230 
	`__HAL_UNLOCK
(
hi2c
);

1232  
HAL_TIMEOUT
;

1235 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1238 
	`__HAL_LOCK
(
hi2c
);

1241 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1244 
	`__HAL_I2C_ENABLE
(
hi2c
);

1248 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1250 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1251 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1252 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1255 
hi2c
->
pBuffPå
 = 
pD©a
;

1256 
hi2c
->
X„rCou¡
 = 
Size
;

1257 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1258 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1259 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1262 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1265 
	`__HAL_UNLOCK
(
hi2c
);

1271 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1273  
HAL_OK
;

1277  
HAL_BUSY
;

1279 
	}
}

1291 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1293 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1295 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1298 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

1301 if(
cou¡
-- == 0U)

1303 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1304 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

1307 
	`__HAL_UNLOCK
(
hi2c
);

1309  
HAL_TIMEOUT
;

1312 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1315 
	`__HAL_LOCK
(
hi2c
);

1318 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1321 
	`__HAL_I2C_ENABLE
(
hi2c
);

1325 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1327 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1328 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1329 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1332 
hi2c
->
pBuffPå
 = 
pD©a
;

1333 
hi2c
->
X„rCou¡
 = 
Size
;

1334 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1335 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1336 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1339 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1342 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1345 
	`__HAL_UNLOCK
(
hi2c
);

1352 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1354  
HAL_OK
;

1358  
HAL_BUSY
;

1360 
	}
}

1374 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

1376 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1379 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

1381 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1384 if((
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

1387 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

1390 if(
cou¡
-- == 0U)

1392 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1393 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

1396 
	`__HAL_UNLOCK
(
hi2c
);

1398  
HAL_TIMEOUT
;

1401 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1405 
	`__HAL_LOCK
(
hi2c
);

1408 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1411 
	`__HAL_I2C_ENABLE
(
hi2c
);

1415 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1417 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1418 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1419 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1422 
hi2c
->
pBuffPå
 = 
pD©a
;

1423 
hi2c
->
X„rCou¡
 = 
Size
;

1424 
hi2c
->
X„rO±i⁄s
 = XferOptions;

1425 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1426 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1429 if((
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_RX
Ë|| (hi2c->PªviousSèã =
I2C_STATE_NONE
))

1432 if((
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

1435 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1437 if(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_RX
)

1440 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1445 
	`__HAL_UNLOCK
(
hi2c
);

1452 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1454  
HAL_OK
;

1458  
HAL_BUSY
;

1460 
	}
}

1474 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
X„rO±i⁄s
)

1476 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1479 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

1481 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1484 if((
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
))

1487 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

1490 if(
cou¡
-- == 0U)

1492 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1493 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

1496 
	`__HAL_UNLOCK
(
hi2c
);

1498  
HAL_TIMEOUT
;

1501 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1505 
	`__HAL_LOCK
(
hi2c
);

1508 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1511 
	`__HAL_I2C_ENABLE
(
hi2c
);

1515 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1517 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1518 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1519 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1522 
hi2c
->
pBuffPå
 = 
pD©a
;

1523 
hi2c
->
X„rCou¡
 = 
Size
;

1524 
hi2c
->
X„rO±i⁄s
 = XferOptions;

1525 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1526 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1528 if((
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_TX
Ë|| (hi2c->PªviousSèã =
I2C_STATE_NONE
))

1531 if((
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (X„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (X„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

1534 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1537 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1539 if(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_TX
)

1542 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1545 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1550 
	`__HAL_UNLOCK
(
hi2c
);

1557 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1559  
HAL_OK
;

1563  
HAL_BUSY
;

1565 
	}
}

1575 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1577 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1579 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1581  
HAL_ERROR
;

1585 
	`__HAL_LOCK
(
hi2c
);

1588 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1591 
	`__HAL_I2C_ENABLE
(
hi2c
);

1595 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1597 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1598 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1599 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1602 
hi2c
->
pBuffPå
 = 
pD©a
;

1603 
hi2c
->
X„rCou¡
 = 
Size
;

1604 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1605 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1608 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1611 
	`__HAL_UNLOCK
(
hi2c
);

1618 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1620  
HAL_OK
;

1624  
HAL_BUSY
;

1626 
	}
}

1636 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1638 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1640 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1642  
HAL_ERROR
;

1646 
	`__HAL_LOCK
(
hi2c
);

1649 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1652 
	`__HAL_I2C_ENABLE
(
hi2c
);

1656 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1658 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1659 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1660 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1663 
hi2c
->
pBuffPå
 = 
pD©a
;

1664 
hi2c
->
X„rCou¡
 = 
Size
;

1665 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1666 
hi2c
->
X„rSize
 = 
Size
;

1669 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1672 
	`__HAL_UNLOCK
(
hi2c
);

1679 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1681  
HAL_OK
;

1685  
HAL_BUSY
;

1687 
	}
}

1699 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Sequítül_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

1702 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

1704 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

1706 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1708  
HAL_ERROR
;

1712 
	`__HAL_LOCK
(
hi2c
);

1715 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1718 
	`__HAL_I2C_ENABLE
(
hi2c
);

1722 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1724 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX_LISTEN
;

1725 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1726 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1729 
hi2c
->
pBuffPå
 = 
pD©a
;

1730 
hi2c
->
X„rCou¡
 = 
Size
;

1731 
hi2c
->
X„rO±i⁄s
 = XferOptions;

1732 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1735 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1738 
	`__HAL_UNLOCK
(
hi2c
);

1745 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1747  
HAL_OK
;

1751  
HAL_BUSY
;

1753 
	}
}

1765 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Sequítül_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
X„rO±i⁄s
)

1768 
	`as£π_∑øm
(
	`IS_I2C_TRANSFER_OPTIONS_REQUEST
(
X„rO±i⁄s
));

1770 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

1772 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

1774  
HAL_ERROR
;

1778 
	`__HAL_LOCK
(
hi2c
);

1781 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1784 
	`__HAL_I2C_ENABLE
(
hi2c
);

1788 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1790 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX_LISTEN
;

1791 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

1792 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1795 
hi2c
->
pBuffPå
 = 
pD©a
;

1796 
hi2c
->
X„rCou¡
 = 
Size
;

1797 
hi2c
->
X„rO±i⁄s
 = XferOptions;

1798 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1801 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1804 
	`__HAL_UNLOCK
(
hi2c
);

1811 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1813  
HAL_OK
;

1817  
HAL_BUSY
;

1819 
	}
}

1827 
HAL_SètusTy≥Def
 
	$HAL_I2C_E«bÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

1829 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1831 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

1834 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1837 
	`__HAL_I2C_ENABLE
(
hi2c
);

1841 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1844 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

1846  
HAL_OK
;

1850  
HAL_BUSY
;

1852 
	}
}

1860 
HAL_SètusTy≥Def
 
	$HAL_I2C_DißbÀLi°í_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
)

1863 
uöt32_t
 
tmp
;

1866 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
)

1868 
tmp
 = (
uöt32_t
)(
hi2c
->
Sèã
Ë& 
I2C_STATE_MSK
;

1869 
hi2c
->
PªviousSèã
 = 
tmp
 | (
uöt32_t
)(hi2c->
Mode
);

1870 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1871 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

1874 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1877 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

1879  
HAL_OK
;

1883  
HAL_BUSY
;

1885 
	}
}

1897 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1899 
__IO
 
uöt32_t
 
cou¡
 = 0U;

1901 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1904 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

1907 if(
cou¡
-- == 0U)

1909 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

1910 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

1913 
	`__HAL_UNLOCK
(
hi2c
);

1915  
HAL_TIMEOUT
;

1918 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

1921 
	`__HAL_LOCK
(
hi2c
);

1924 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

1927 
	`__HAL_I2C_ENABLE
(
hi2c
);

1931 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

1933 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1934 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

1935 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1938 
hi2c
->
pBuffPå
 = 
pD©a
;

1939 
hi2c
->
X„rCou¡
 = 
Size
;

1940 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

1941 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

1942 
hi2c
->
Devaddªss
 = 
DevAddªss
;

1944 if(
hi2c
->
X„rSize
 > 0U)

1947 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

1950 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1953 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

1954 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

1957 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

1960 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1963 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1966 
	`__HAL_UNLOCK
(
hi2c
);

1973 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

1976 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

1981 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

1984 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

1987 
	`__HAL_UNLOCK
(
hi2c
);

1994 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1997  
HAL_OK
;

2001  
HAL_BUSY
;

2003 
	}
}

2015 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2017 
__IO
 
uöt32_t
 
cou¡
 = 0U;

2019 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2022 
cou¡
 = 
I2C_TIMEOUT_BUSY_FLAG
 * (
Sy°emC‹eClock
 /25U /1000U);

2025 if(
cou¡
-- == 0U)

2027 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

2028 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

2031 
	`__HAL_UNLOCK
(
hi2c
);

2033  
HAL_TIMEOUT
;

2036 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BUSY
Ë!
RESET
);

2039 
	`__HAL_LOCK
(
hi2c
);

2042 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2045 
	`__HAL_I2C_ENABLE
(
hi2c
);

2049 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2051 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2052 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MASTER
;

2053 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2056 
hi2c
->
pBuffPå
 = 
pD©a
;

2057 
hi2c
->
X„rCou¡
 = 
Size
;

2058 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2059 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2060 
hi2c
->
Devaddªss
 = 
DevAddªss
;

2062 if(
hi2c
->
X„rSize
 > 0U)

2065 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2068 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2071 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2072 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2075 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

2078 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2081 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2084 
	`__HAL_UNLOCK
(
hi2c
);

2091 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2094 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

2099 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2102 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

2105 
	`__HAL_UNLOCK
(
hi2c
);

2112 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2115  
HAL_OK
;

2119  
HAL_BUSY
;

2121 
	}
}

2132 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Ab‹t_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
)

2135 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MASTER
)

2138 
	`__HAL_LOCK
(
hi2c
);

2140 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

2141 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_ABORT
;

2144 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2147 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2149 
hi2c
->
X„rCou¡
 = 0U;

2152 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2155 
	`__HAL_UNLOCK
(
hi2c
);

2158 
	`I2C_ITEº‹
(
hi2c
);

2160  
HAL_OK
;

2166  
HAL_ERROR
;

2168 
	}
}

2178 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

2180 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2182 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2184  
HAL_ERROR
;

2188 
	`__HAL_LOCK
(
hi2c
);

2191 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2194 
	`__HAL_I2C_ENABLE
(
hi2c
);

2198 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2200 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2201 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2202 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2205 
hi2c
->
pBuffPå
 = 
pD©a
;

2206 
hi2c
->
X„rCou¡
 = 
Size
;

2207 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2208 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2211 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2214 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2217 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2218 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2221 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

2224 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2227 
	`__HAL_UNLOCK
(
hi2c
);

2233 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2236 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

2238  
HAL_OK
;

2242  
HAL_BUSY
;

2244 
	}
}

2254 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

2256 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2258 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2260  
HAL_ERROR
;

2264 
	`__HAL_LOCK
(
hi2c
);

2267 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2270 
	`__HAL_I2C_ENABLE
(
hi2c
);

2274 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2276 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2277 
hi2c
->
Mode
 = 
HAL_I2C_MODE_SLAVE
;

2278 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2281 
hi2c
->
pBuffPå
 = 
pD©a
;

2282 
hi2c
->
X„rCou¡
 = 
Size
;

2283 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2284 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2287 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2290 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2293 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2294 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

2297 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

2300 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2303 
	`__HAL_UNLOCK
(
hi2c
);

2309 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2312 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

2314  
HAL_OK
;

2318  
HAL_BUSY
;

2320 
	}
}

2334 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

2336 
uöt32_t
 
tick°¨t
 = 0x00U;

2339 
tick°¨t
 = 
	`HAL_GëTick
();

2342 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2344 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2346 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2348  
HAL_ERROR
;

2352 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2354  
HAL_BUSY
;

2358 
	`__HAL_LOCK
(
hi2c
);

2361 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2364 
	`__HAL_I2C_ENABLE
(
hi2c
);

2368 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2370 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2371 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2372 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2375 
hi2c
->
pBuffPå
 = 
pD©a
;

2376 
hi2c
->
X„rCou¡
 = 
Size
;

2377 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2378 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2381 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2383 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2386 
	`__HAL_UNLOCK
(
hi2c
);

2387  
HAL_ERROR
;

2392 
	`__HAL_UNLOCK
(
hi2c
);

2393  
HAL_TIMEOUT
;

2397 
hi2c
->
X„rSize
 > 0U)

2400 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2402 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2405 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2406  
HAL_ERROR
;

2410  
HAL_TIMEOUT
;

2415 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2416 
hi2c
->
X„rSize
--;

2417 
hi2c
->
X„rCou¡
--;

2419 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (hi2c->
X„rSize
 != 0U))

2422 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2423 
hi2c
->
X„rSize
--;

2424 
hi2c
->
X„rCou¡
--;

2429 if(
	`I2C_WaôOnBTFFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2431 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2434 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2435  
HAL_ERROR
;

2439  
HAL_TIMEOUT
;

2444 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

2446 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2447 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2450 
	`__HAL_UNLOCK
(
hi2c
);

2452  
HAL_OK
;

2456  
HAL_BUSY
;

2458 
	}
}

2473 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

2475 
uöt32_t
 
tick°¨t
 = 0x00U;

2478 
tick°¨t
 = 
	`HAL_GëTick
();

2481 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2483 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2485 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2487  
HAL_ERROR
;

2491 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2493  
HAL_BUSY
;

2497 
	`__HAL_LOCK
(
hi2c
);

2500 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2503 
	`__HAL_I2C_ENABLE
(
hi2c
);

2507 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2509 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2510 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2511 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2514 
hi2c
->
pBuffPå
 = 
pD©a
;

2515 
hi2c
->
X„rCou¡
 = 
Size
;

2516 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2517 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2520 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2522 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2525 
	`__HAL_UNLOCK
(
hi2c
);

2526  
HAL_ERROR
;

2531 
	`__HAL_UNLOCK
(
hi2c
);

2532  
HAL_TIMEOUT
;

2536 if(
hi2c
->
X„rSize
 == 1U)

2539 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2542 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2545 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2547 if(
hi2c
->
X„rSize
 == 2U)

2550 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2553 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2556 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2561 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2564 
hi2c
->
X„rSize
 > 0U)

2566 if(
hi2c
->
X„rSize
 <= 3U)

2569 if(
hi2c
->
X„rSize
== 1U)

2572 if(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2574 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

2576  
HAL_TIMEOUT
;

2580  
HAL_ERROR
;

2585 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2586 
hi2c
->
X„rSize
--;

2587 
hi2c
->
X„rCou¡
--;

2590 if(
Size
 == 2U)

2593 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2595  
HAL_TIMEOUT
;

2599 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2602 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2603 
hi2c
->
X„rSize
--;

2604 
hi2c
->
X„rCou¡
--;

2607 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2608 
hi2c
->
X„rSize
--;

2609 
hi2c
->
X„rCou¡
--;

2615 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2617  
HAL_TIMEOUT
;

2621 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2624 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2625 
hi2c
->
X„rSize
--;

2626 
hi2c
->
X„rCou¡
--;

2629 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2631  
HAL_TIMEOUT
;

2635 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

2638 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2639 
hi2c
->
X„rSize
--;

2640 
hi2c
->
X„rCou¡
--;

2643 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2644 
hi2c
->
X„rSize
--;

2645 
hi2c
->
X„rCou¡
--;

2651 if(
	`I2C_WaôOnRXNEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

2653 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_TIMEOUT
)

2655  
HAL_TIMEOUT
;

2659  
HAL_ERROR
;

2664 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2665 
hi2c
->
X„rSize
--;

2666 
hi2c
->
X„rCou¡
--;

2668 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

2671 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2672 
hi2c
->
X„rSize
--;

2673 
hi2c
->
X„rCou¡
--;

2678 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2679 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

2682 
	`__HAL_UNLOCK
(
hi2c
);

2684  
HAL_OK
;

2688  
HAL_BUSY
;

2690 
	}
}

2704 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2706 
uöt32_t
 
tick°¨t
 = 0x00U;

2709 
tick°¨t
 = 
	`HAL_GëTick
();

2712 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2714 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2716 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2718  
HAL_ERROR
;

2722 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2724  
HAL_BUSY
;

2728 
	`__HAL_LOCK
(
hi2c
);

2731 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2734 
	`__HAL_I2C_ENABLE
(
hi2c
);

2738 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2740 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2741 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2742 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2745 
hi2c
->
pBuffPå
 = 
pD©a
;

2746 
hi2c
->
X„rCou¡
 = 
Size
;

2747 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2748 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2751 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2753 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2756 
	`__HAL_UNLOCK
(
hi2c
);

2757  
HAL_ERROR
;

2762 
	`__HAL_UNLOCK
(
hi2c
);

2763  
HAL_TIMEOUT
;

2768 
	`__HAL_UNLOCK
(
hi2c
);

2775 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2777  
HAL_OK
;

2781  
HAL_BUSY
;

2783 
	}
}

2797 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2799 
uöt32_t
 
tick°¨t
 = 0x00U;

2802 
tick°¨t
 = 
	`HAL_GëTick
();

2805 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2807 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2809 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2811  
HAL_ERROR
;

2815 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2817  
HAL_BUSY
;

2821 
	`__HAL_LOCK
(
hi2c
);

2824 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2827 
	`__HAL_I2C_ENABLE
(
hi2c
);

2831 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2833 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

2834 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2835 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2838 
hi2c
->
pBuffPå
 = 
pD©a
;

2839 
hi2c
->
X„rCou¡
 = 
Size
;

2840 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2841 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2844 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2846 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2849 
	`__HAL_UNLOCK
(
hi2c
);

2850  
HAL_ERROR
;

2855 
	`__HAL_UNLOCK
(
hi2c
);

2856  
HAL_TIMEOUT
;

2860 if(
hi2c
->
X„rCou¡
 == 1U)

2863 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2866 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2869 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

2871 if(
hi2c
->
X„rCou¡
 == 2U)

2874 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2877 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2880 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2885 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

2888 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2892 
	`__HAL_UNLOCK
(
hi2c
);

2899 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2901  
HAL_OK
;

2905  
HAL_BUSY
;

2907 
	}
}

2921 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2923 
uöt32_t
 
tick°¨t
 = 0x00U;

2926 
tick°¨t
 = 
	`HAL_GëTick
();

2929 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2931 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2933 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

2935  
HAL_ERROR
;

2939 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2941  
HAL_BUSY
;

2945 
	`__HAL_LOCK
(
hi2c
);

2948 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

2951 
	`__HAL_I2C_ENABLE
(
hi2c
);

2955 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

2957 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

2958 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

2959 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2962 
hi2c
->
pBuffPå
 = 
pD©a
;

2963 
hi2c
->
X„rCou¡
 = 
Size
;

2964 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

2965 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

2968 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

2971 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2974 
hi2c
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

2975 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

2978 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)hi2c->
pBuffPå
, (uöt32_t)&hi2c->
In°™˚
->
DR
, hi2c->
X„rSize
);

2981 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

2983 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2986 
	`__HAL_UNLOCK
(
hi2c
);

2987  
HAL_ERROR
;

2992 
	`__HAL_UNLOCK
(
hi2c
);

2993  
HAL_TIMEOUT
;

2998 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3001 
	`__HAL_UNLOCK
(
hi2c
);

3007 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3010 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

3012  
HAL_OK
;

3016  
HAL_BUSY
;

3018 
	}
}

3032 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

3034 
uöt32_t
 
tick°¨t
 = 0x00U;

3037 
tick°¨t
 = 
	`HAL_GëTick
();

3040 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

3042 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3044 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0U))

3046  
HAL_ERROR
;

3050 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3052  
HAL_BUSY
;

3056 
	`__HAL_LOCK
(
hi2c
);

3059 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3062 
	`__HAL_I2C_ENABLE
(
hi2c
);

3066 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3068 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

3069 
hi2c
->
Mode
 = 
HAL_I2C_MODE_MEM
;

3070 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3073 
hi2c
->
pBuffPå
 = 
pD©a
;

3074 
hi2c
->
X„rCou¡
 = 
Size
;

3075 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3076 
hi2c
->
X„rSize
 = hi2c->
X„rCou¡
;

3079 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAX„rC∂t
;

3082 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

3085 
hi2c
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

3086 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

3089 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)hi2c->
pBuffPå
, hi2c->
X„rSize
);

3092 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3094 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3097 
	`__HAL_UNLOCK
(
hi2c
);

3098  
HAL_ERROR
;

3103 
	`__HAL_UNLOCK
(
hi2c
);

3104  
HAL_TIMEOUT
;

3108 if(
Size
 == 1U)

3111 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3116 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

3120 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3123 
	`__HAL_UNLOCK
(
hi2c
);

3129 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_ERR
);

3132 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

3134  
HAL_OK
;

3138  
HAL_BUSY
;

3140 
	}
}

3153 
HAL_SètusTy≥Def
 
	$HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
)

3155 
uöt32_t
 
tick°¨t
 = 0U, 
I2C_Trüls
 = 1U;

3158 
tick°¨t
 = 
	`HAL_GëTick
();

3160 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

3163 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3165  
HAL_BUSY
;

3169 
	`__HAL_LOCK
(
hi2c
);

3172 if((
hi2c
->
In°™˚
->
CR1
 & 
I2C_CR1_PE
) != I2C_CR1_PE)

3175 
	`__HAL_I2C_ENABLE
(
hi2c
);

3179 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3181 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

3182 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

3183 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

3188 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

3191 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
tick°¨t
Ë!
HAL_OK
)

3193  
HAL_TIMEOUT
;

3197 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

3201 
tick°¨t
 = 
	`HAL_GëTick
();

3203 (
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
Ë=
RESET
) && \

3204 (
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
RESET
) && \

3205 (
hi2c
->
Sèã
 !
HAL_I2C_STATE_TIMEOUT
))

3207 if(
Timeout
 !
HAL_MAX_DELAY
)

3209 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3211 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_TIMEOUT
;

3216 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3219 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
Ë=
SET
)

3222 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3225 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3228 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3230  
HAL_TIMEOUT
;

3233 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3236 
	`__HAL_UNLOCK
(
hi2c
);

3238  
HAL_OK
;

3243 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3246 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3249 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
, 
tick°¨t
Ë!
HAL_OK
)

3251  
HAL_TIMEOUT
;

3254 }
I2C_Trüls
++ < 
Trüls
);

3256 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3259 
	`__HAL_UNLOCK
(
hi2c
);

3261  
HAL_ERROR
;

3265  
HAL_BUSY
;

3267 
	}
}

3275 
	$HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3277 
uöt32_t
 
§2ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR2
);

3278 
uöt32_t
 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

3279 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR2
);

3282 if((
hi2c
->
Mode
 =
HAL_I2C_MODE_MASTER
) || \

3283 (
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
))

3286 if(((
§1ôÊags
 & 
I2C_FLAG_SB
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3288 
	`I2C_Ma°î_SB
(
hi2c
);

3291 if(((
§1ôÊags
 & 
I2C_FLAG_ADD10
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3293 
	`I2C_Ma°î_ADD10
(
hi2c
);

3296 if(((
§1ôÊags
 & 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3298 
	`I2C_Ma°î_ADDR
(
hi2c
);

3302 if((
hi2c
->
EvítCou¡
 =0UË&& ((
§2ôÊags
 & 
I2C_FLAG_TRA
Ë!
RESET
))

3305 if(((
§1ôÊags
 & 
I2C_FLAG_TXE
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_BUF
Ë!RESETË&& ((§1ôÊag†& 
I2C_FLAG_BTF
) == RESET))

3307 
	`I2C_Ma°îTønsmô_TXE
(
hi2c
);

3310 if(((
§1ôÊags
 & 
I2C_FLAG_BTF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3312 
	`I2C_Ma°îTønsmô_BTF
(
hi2c
);

3319 if(((
§1ôÊags
 & 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_BUF
Ë!RESETË&& ((§1ôÊag†& 
I2C_FLAG_BTF
) == RESET))

3321 
	`I2C_Ma°îRe˚ive_RXNE
(
hi2c
);

3324 if(((
§1ôÊags
 & 
I2C_FLAG_BTF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3326 
	`I2C_Ma°îRe˚ive_BTF
(
hi2c
);

3334 if(((
§1ôÊags
 & 
I2C_FLAG_ADDR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3336 
	`I2C_Sœve_ADDR
(
hi2c
);

3339 if(((
§1ôÊags
 & 
I2C_FLAG_STOPF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3341 
	`I2C_Sœve_STOPF
(
hi2c
);

3344 if((
§2ôÊags
 & 
I2C_FLAG_TRA
Ë!
RESET
)

3347 if(((
§1ôÊags
 & 
I2C_FLAG_TXE
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_BUF
Ë!RESETË&& ((§1ôÊag†& 
I2C_FLAG_BTF
) == RESET))

3349 
	`I2C_SœveTønsmô_TXE
(
hi2c
);

3352 if(((
§1ôÊags
 & 
I2C_FLAG_BTF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3354 
	`I2C_SœveTønsmô_BTF
(
hi2c
);

3361 if(((
§1ôÊags
 & 
I2C_FLAG_RXNE
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_BUF
Ë!RESETË&& ((§1ôÊag†& 
I2C_FLAG_BTF
) == RESET))

3363 
	`I2C_SœveRe˚ive_RXNE
(
hi2c
);

3366 if(((
§1ôÊags
 & 
I2C_FLAG_BTF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_EVT
) != RESET))

3368 
	`I2C_SœveRe˚ive_BTF
(
hi2c
);

3372 
	}
}

3380 
	$HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3382 
uöt32_t
 
§1ôÊags
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
SR1
);

3383 
uöt32_t
 
ôsour˚s
 = 
	`READ_REG
(
hi2c
->
In°™˚
->
CR2
);

3386 if(((
§1ôÊags
 & 
I2C_FLAG_BERR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERR
) != RESET))

3388 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_BERR
;

3391 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

3395 if(((
§1ôÊags
 & 
I2C_FLAG_ARLO
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERR
) != RESET))

3397 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_ARLO
;

3400 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

3404 if(((
§1ôÊags
 & 
I2C_FLAG_AF
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERR
) != RESET))

3406 if((
hi2c
->
Mode
 =
HAL_I2C_MODE_SLAVE
) && \

3407 (
hi2c
->
X„rCou¡
 == 0U) && \

3408 ((
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
Ë|| (hi2c->Sèã =
HAL_I2C_STATE_BUSY_TX_LISTEN
) || \

3409 ((
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
Ë&& (hi2c->
PªviousSèã
 =
HAL_I2C_STATE_BUSY_TX
))))

3411 
	`I2C_Sœve_AF
(
hi2c
);

3415 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

3418 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MASTER
)

3421 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3425 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3430 if(((
§1ôÊags
 & 
I2C_FLAG_OVR
Ë!
RESET
Ë&& ((
ôsour˚s
 & 
I2C_IT_ERR
) != RESET))

3432 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_OVR
;

3434 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

3438 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3440 
	`I2C_ITEº‹
(
hi2c
);

3442 
	}
}

3450 
__wók
 
	$HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3453 
	`UNUSED
(
hi2c
);

3458 
	}
}

3466 
__wók
 
	$HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3469 
	`UNUSED
(
hi2c
);

3474 
	}
}

3481 
__wók
 
	$HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3484 
	`UNUSED
(
hi2c
);

3489 
	}
}

3497 
__wók
 
	$HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3500 
	`UNUSED
(
hi2c
);

3505 
	}
}

3515 
__wók
 
	$HAL_I2C_AddrCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 
Tøns„rDúe˘i⁄
, 
uöt16_t
 
AddrM©chCode
)

3518 
	`UNUSED
(
hi2c
);

3519 
	`UNUSED
(
Tøns„rDúe˘i⁄
);

3520 
	`UNUSED
(
AddrM©chCode
);

3525 
	}
}

3533 
__wók
 
	$HAL_I2C_Li°íC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3536 
	`UNUSED
(
hi2c
);

3541 
	}
}

3549 
__wók
 
	$HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3552 
	`UNUSED
(
hi2c
);

3557 
	}
}

3565 
__wók
 
	$HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3568 
	`UNUSED
(
hi2c
);

3573 
	}
}

3581 
__wók
 
	$HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3584 
	`UNUSED
(
hi2c
);

3589 
	}
}

3597 
__wók
 
	$HAL_I2C_Ab‹tC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3600 
	`UNUSED
(
hi2c
);

3605 
	}
}

3632 
HAL_I2C_SèãTy≥Def
 
	$HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3635  
hi2c
->
Sèã
;

3636 
	}
}

3644 
HAL_I2C_ModeTy≥Def
 
	$HAL_I2C_GëMode
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3646  
hi2c
->
Mode
;

3647 
	}
}

3655 
uöt32_t
 
	$HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3657  
hi2c
->
Eº‹Code
;

3658 
	}
}

3680 
HAL_SètusTy≥Def
 
	$I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3682 if((
hi2c
->
X„rSize
 =0UË&& (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
))

3685 if((
hi2c
->
X„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_NO_OPTION_FRAME
))

3687 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3689 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_TX
;

3690 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3691 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3693 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3698 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3701 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3703 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3704 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3706 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3708 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3709 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

3713 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3714 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3718 if((
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
) || \

3719 ((
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
Ë&& (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)))

3721 if(
hi2c
->
X„rCou¡
 == 0U)

3724 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

3729 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

3730 
hi2c
->
X„rCou¡
--;

3733  
HAL_OK
;

3734 
	}
}

3742 
HAL_SètusTy≥Def
 
	$I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3744 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

3746 if(
hi2c
->
X„rCou¡
 != 0U)

3749 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

3750 
hi2c
->
X„rCou¡
--;

3755 if((
hi2c
->
X„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_NO_OPTION_FRAME
))

3757 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3759 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_TX
;

3760 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3761 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3763 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3768 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3771 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3773 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3774 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3776 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3778 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3780 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

3784 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3786 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3791  
HAL_OK
;

3792 
	}
}

3800 
HAL_SètusTy≥Def
 
	$I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3802 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

3804 if(
hi2c
->
X„rCou¡
 > 3U)

3807 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3808 
hi2c
->
X„rCou¡
--;

3810 if((
hi2c
->
X„rCou¡
 == 2U) || (hi2c->XferCount == 3U))

3812 if(
hi2c
->
X„rO±i⁄s
 !
I2C_NEXT_FRAME
)

3815 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3818 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

3823 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3827 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

3831 if(
hi2c
->
X„rO±i⁄s
 !
I2C_NEXT_FRAME
)

3834 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3839 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3843 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

3846 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3847 
hi2c
->
X„rCou¡
--;

3849 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3851 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3853 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3854 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3855 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

3859 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

3860 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3861 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

3865  
HAL_OK
;

3866 
	}
}

3874 
HAL_SètusTy≥Def
 
	$I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3876 if(
hi2c
->
X„rCou¡
 == 3U)

3878 if((
hi2c
->
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

3881 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3885 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3886 
hi2c
->
X„rCou¡
--;

3888 if(
hi2c
->
X„rCou¡
 == 2U)

3891 if((
hi2c
->
X„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_NO_OPTION_FRAME
))

3893 if(
hi2c
->
X„rO±i⁄s
 !
I2C_NEXT_FRAME
)

3896 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3901 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

3907 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

3911 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3912 
hi2c
->
X„rCou¡
--;

3915 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3916 
hi2c
->
X„rCou¡
--;

3919 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

3921 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3923 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3925 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

3926 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3927 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

3931 
hi2c
->
PªviousSèã
 = 
I2C_STATE_MASTER_BUSY_RX
;

3932 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

3933 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

3939 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

3940 
hi2c
->
X„rCou¡
--;

3942  
HAL_OK
;

3943 
	}
}

3951 
HAL_SètusTy≥Def
 
	$I2C_Ma°î_SB
(
I2C_H™dÀTy≥Def
 *
hi2c
)

3953 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

3955 if(
hi2c
->
EvítCou¡
 == 0U)

3958 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devaddªss
);

3962 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devaddªss
);

3967 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

3970 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

3972 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(hi2c->
Devaddªss
);

3976 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(hi2c->
Devaddªss
);

3981 if(
hi2c
->
EvítCou¡
 == 0U)

3984 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(hi2c->
Devaddªss
);

3986 if(
hi2c
->
EvítCou¡
 == 1U)

3989 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(hi2c->
Devaddªss
);

3994  
HAL_OK
;

3995 
	}
}

4003 
HAL_SètusTy≥Def
 
	$I2C_Ma°î_ADD10
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4006 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(hi2c->
Devaddªss
);

4008  
HAL_OK
;

4009 
	}
}

4017 
HAL_SètusTy≥Def
 
	$I2C_Ma°î_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4019 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
)

4021 if((
hi2c
->
EvítCou¡
 =0UË&& (hi2c->
Mode
 =
HAL_I2C_MODE_MEM
))

4024 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4026 if((
hi2c
->
EvítCou¡
 =0UË&& (hi2c->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
))

4029 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4032 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4034 
hi2c
->
EvítCou¡
++;

4038 if(
hi2c
->
X„rCou¡
 == 0U)

4041 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4044 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

4046 if(
hi2c
->
X„rCou¡
 == 1U)

4048 if(
hi2c
->
X„rO±i⁄s
 =
I2C_NO_OPTION_FRAME
)

4051 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4053 if((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4056 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4059 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4064 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4067 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

4071 if((
hi2c
->
X„rO±i⁄s
 !
I2C_FIRST_AND_LAST_FRAME
Ë&& (hi2c->X„rO±i⁄†!
I2C_LAST_FRAME
) \

4072 && (
hi2c
->
PªviousSèã
 !
I2C_STATE_MASTER_BUSY_RX
))

4074 if(
hi2c
->
X„rO±i⁄s
 !
I2C_NEXT_FRAME
)

4077 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4082 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4086 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4091 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4094 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4097 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

4100 if(
hi2c
->
X„rCou¡
 == 2U)

4102 if(
hi2c
->
X„rO±i⁄s
 !
I2C_NEXT_FRAME
)

4105 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4108 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_POS
);

4113 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4116 if((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4119 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4123 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4128 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4130 if((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4133 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4137 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4141 
hi2c
->
EvítCou¡
 = 0U;

4147 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4150  
HAL_OK
;

4151 
	}
}

4159 
HAL_SètusTy≥Def
 
	$I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4161 if(
hi2c
->
X„rCou¡
 != 0U)

4164 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

4165 
hi2c
->
X„rCou¡
--;

4167 if((
hi2c
->
X„rCou¡
 =0UË&& (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
))

4170 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

4173 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

4174 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4177 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

4180  
HAL_OK
;

4181 
	}
}

4189 
HAL_SètusTy≥Def
 
	$I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4191 if(
hi2c
->
X„rCou¡
 != 0U)

4194 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

4195 
hi2c
->
X„rCou¡
--;

4197  
HAL_OK
;

4198 
	}
}

4206 
HAL_SètusTy≥Def
 
	$I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4208 if(
hi2c
->
X„rCou¡
 != 0U)

4211 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4212 
hi2c
->
X„rCou¡
--;

4214 if((
hi2c
->
X„rCou¡
 =0UË&& (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

4217 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

4220 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_RX
;

4221 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4224 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

4227  
HAL_OK
;

4228 
	}
}

4236 
HAL_SètusTy≥Def
 
	$I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4238 if(
hi2c
->
X„rCou¡
 != 0U)

4241 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4242 
hi2c
->
X„rCou¡
--;

4244  
HAL_OK
;

4245 
	}
}

4253 
HAL_SètusTy≥Def
 
	$I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4255 
uöt8_t
 
Tøns„rDúe˘i⁄
 = 
I2C_DIRECTION_RECEIVE
;

4256 
uöt16_t
 
SœveAddrCode
 = 0U;

4259 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TRA
Ë=
RESET
)

4261 
Tøns„rDúe˘i⁄
 = 
I2C_DIRECTION_TRANSMIT
;

4264 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_DUALF
Ë=
RESET
)

4266 
SœveAddrCode
 = 
hi2c
->
Inô
.
OwnAddªss1
;

4270 
SœveAddrCode
 = 
hi2c
->
Inô
.
OwnAddªss2
;

4274 
	`HAL_I2C_AddrCÆlback
(
hi2c
, 
Tøns„rDúe˘i⁄
, 
SœveAddrCode
);

4276  
HAL_OK
;

4277 
	}
}

4285 
HAL_SètusTy≥Def
 
	$I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4288 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4291 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

4294 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4297 if((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4299 if((
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
Ë|| (hi2c->Sèã =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

4301 
hi2c
->
X„rCou¡
 = 
	`__HAL_DMA_GET_COUNTER
(hi2c->
hdm¨x
);

4305 
hi2c
->
X„rCou¡
 = 
	`__HAL_DMA_GET_COUNTER
(hi2c->
hdm©x
);

4310 if(
hi2c
->
X„rCou¡
 != 0U)

4313 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

4316 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4317 
hi2c
->
X„rCou¡
--;

4321 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

4324 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4325 
hi2c
->
X„rCou¡
--;

4329 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

4332 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

4335 
	`I2C_ITEº‹
(
hi2c
);

4339 if((
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
 ) || (hi2c->Sèã =
HAL_I2C_STATE_BUSY_RX_LISTEN
) || \

4340 (
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
))

4342 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4343 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4344 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4345 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4348 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

4352 if((
hi2c
->
PªviousSèã
 =
I2C_STATE_SLAVE_BUSY_RX
Ë|| (hi2c->
Sèã
 =
HAL_I2C_STATE_BUSY_RX
))

4354 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4355 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4356 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4358 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

4362  
HAL_OK
;

4363 
	}
}

4370 
HAL_SètusTy≥Def
 
	$I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4372 if(((
hi2c
->
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_LAST_FRAME
)) && \

4373 (
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
))

4375 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4378 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4381 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4384 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4386 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4387 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4388 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4391 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

4393 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
)

4395 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4396 
hi2c
->
PªviousSèã
 = 
I2C_STATE_SLAVE_BUSY_TX
;

4397 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4398 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4401 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

4404 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4407 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4409 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

4415 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

4418  
HAL_OK
;

4419 
	}
}

4426 
	$I2C_ITEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

4429 
uöt32_t
 
CuºítSèã
 = 
hi2c
->
Sèã
;

4431 if((
CuºítSèã
 =
HAL_I2C_STATE_BUSY_TX_LISTEN
Ë|| (CuºítSèã =
HAL_I2C_STATE_BUSY_RX_LISTEN
))

4434 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4435 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_LISTEN
;

4441 if((
hi2c
->
Sèã
 !
HAL_I2C_STATE_ABORT
Ë&& ((hi2c->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) != I2C_CR2_DMAEN))

4443 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4445 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4446 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4450 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

4453 if((
hi2c
->
In°™˚
->
CR2
 & 
I2C_CR2_DMAEN
) == I2C_CR2_DMAEN)

4455 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

4457 if(
hi2c
->
hdm©x
->
Sèã
 !
HAL_DMA_STATE_READY
)

4461 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4463 if(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm©x
Ë!
HAL_OK
)

4466 
	`__HAL_I2C_DISABLE
(
hi2c
);

4468 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4471 
hi2c
->
hdm©x
->
	`X„rAb‹tCÆlback
(hi2c->hdmatx);

4478 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
I2C_DMAAb‹t
;

4480 if(
	`HAL_DMA_Ab‹t_IT
(
hi2c
->
hdm¨x
Ë!
HAL_OK
)

4483 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

4486 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4490 
	`__HAL_I2C_DISABLE
(
hi2c
);

4492 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4495 
hi2c
->
hdm¨x
->
	`X„rAb‹tCÆlback
(hi2c->hdmarx);

4499 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

4501 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4502 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

4505 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

4508 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4512 
	`__HAL_I2C_DISABLE
(
hi2c
);

4515 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

4520 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
SET
)

4523 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

4527 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

4532 if((
hi2c
->
Sèã
 =
HAL_I2C_STATE_LISTEN
Ë&& ((hi2c->
Eº‹Code
 & 
HAL_I2C_ERROR_AF
) == HAL_I2C_ERROR_AF))

4534 
hi2c
->
X„rO±i⁄s
 = 
I2C_NO_OPTION_FRAME
;

4535 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

4536 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4537 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4540 
	`HAL_I2C_Li°íC∂tCÆlback
(
hi2c
);

4542 
	}
}

4553 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4556 if((
hi2c
->
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

4559 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4561 if(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_RX
)

4564 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4568 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4570  
HAL_TIMEOUT
;

4573 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

4576 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

4581 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

4584 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4586 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4588  
HAL_ERROR
;

4592  
HAL_TIMEOUT
;

4597 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

4601 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4603 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4605  
HAL_ERROR
;

4609  
HAL_TIMEOUT
;

4613  
HAL_OK
;

4614 
	}
}

4626 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4629 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4632 if((
hi2c
->
X„rO±i⁄s
 =
I2C_FIRST_AND_LAST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_FIRST_FRAME
Ë|| (hi2c->X„rO±i⁄†=
I2C_NO_OPTION_FRAME
))

4635 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4637 if(
hi2c
->
PªviousSèã
 =
I2C_STATE_MASTER_BUSY_TX
)

4640 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4644 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4646  
HAL_TIMEOUT
;

4649 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

4652 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

4657 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

4660 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4662 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4664  
HAL_ERROR
;

4668  
HAL_TIMEOUT
;

4673 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

4676 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4678 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4680  
HAL_ERROR
;

4684  
HAL_TIMEOUT
;

4689 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4692 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4695 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4697  
HAL_TIMEOUT
;

4701 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(
DevAddªss
);

4705 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4707 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4709  
HAL_ERROR
;

4713  
HAL_TIMEOUT
;

4717  
HAL_OK
;

4718 
	}
}

4732 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4735 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4738 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4740  
HAL_TIMEOUT
;

4744 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

4747 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4749 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4751  
HAL_ERROR
;

4755  
HAL_TIMEOUT
;

4760 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4763 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4765 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4768 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4769  
HAL_ERROR
;

4773  
HAL_TIMEOUT
;

4778 if(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

4781 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

4787 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

4790 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4792 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4795 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4796  
HAL_ERROR
;

4800  
HAL_TIMEOUT
;

4805 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

4808  
HAL_OK
;

4809 
	}
}

4823 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

4826 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4829 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4832 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4834  
HAL_TIMEOUT
;

4838 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

4841 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4843 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4845  
HAL_ERROR
;

4849  
HAL_TIMEOUT
;

4854 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

4857 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4859 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4862 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4863  
HAL_ERROR
;

4867  
HAL_TIMEOUT
;

4872 if(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

4875 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

4881 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

4884 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4886 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4889 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4890  
HAL_ERROR
;

4894  
HAL_TIMEOUT
;

4899 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

4903 if(
	`I2C_WaôOnTXEFœgU¡ûTimeout
(
hi2c
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4905 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4908 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4909  
HAL_ERROR
;

4913  
HAL_TIMEOUT
;

4918 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_START
);

4921 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4923  
HAL_TIMEOUT
;

4927 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

4930 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
, 
Tick°¨t
Ë!
HAL_OK
)

4932 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

4934  
HAL_ERROR
;

4938  
HAL_TIMEOUT
;

4942  
HAL_OK
;

4943 
	}
}

4950 
	$I2C_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4952 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

4954 if((
hi2c
->
Sèã
 =
HAL_I2C_STATE_BUSY_TX
Ë|| ((hi2c->Sèã =
HAL_I2C_STATE_BUSY_RX
Ë&& (hi2c->
Mode
 =
HAL_I2C_MODE_SLAVE
)))

4957 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4959 
hi2c
->
X„rCou¡
 = 0U;

4962 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

4967 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

4970 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
,
I2C_CR1_STOP
);

4973 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_LAST
);

4976 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR2
, 
I2C_CR2_DMAEN
);

4978 
hi2c
->
X„rCou¡
 = 0U;

4981 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

4983 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

4987 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

4989 if(
hi2c
->
Mode
 =
HAL_I2C_MODE_MEM
)

4991 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4993 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

4997 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

4999 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

5003 
	}
}

5010 
	$I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

5012 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

5015 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5017 
hi2c
->
X„rCou¡
 = 0U;

5019 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5020 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5022 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

5024 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

5025 
	}
}

5033 
	$I2C_DMAAb‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

5035 
I2C_H™dÀTy≥Def
* 
hi2c
 = ( I2C_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

5038 
	`CLEAR_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_ACK
);

5040 
hi2c
->
X„rCou¡
 = 0U;

5043 
hi2c
->
hdm©x
->
X„rAb‹tCÆlback
 = 
NULL
;

5044 
hi2c
->
hdm¨x
->
X„rAb‹tCÆlback
 = 
NULL
;

5047 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_ABORT
)

5049 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5050 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5051 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

5054 
	`__HAL_I2C_DISABLE
(
hi2c
);

5057 
	`HAL_I2C_Ab‹tC∂tCÆlback
(
hi2c
);

5061 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

5062 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5065 
	`__HAL_I2C_DISABLE
(
hi2c
);

5068 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

5070 
	}
}

5082 
HAL_SètusTy≥Def
 
	$I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
)

5084 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
Sètus
)

5087 if(
Timeout
 !
HAL_MAX_DELAY
)

5089 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
Tick°¨t
 ) > Timeout))

5091 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5092 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5093 
hi2c
->
Mode
 = 
HAL_I2C_MODE_NONE
;

5096 
	`__HAL_UNLOCK
(
hi2c
);

5097  
HAL_TIMEOUT
;

5101  
HAL_OK
;

5102 
	}
}

5113 
HAL_SètusTy≥Def
 
	$I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
, uöt32_à
Tick°¨t
)

5115 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
RESET
)

5117 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

5120 
	`SET_BIT
(
hi2c
->
In°™˚
->
CR1
, 
I2C_CR1_STOP
);

5123 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

5125 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_AF
;

5126 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5127 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5130 
	`__HAL_UNLOCK
(
hi2c
);

5132  
HAL_ERROR
;

5136 if(
Timeout
 !
HAL_MAX_DELAY
)

5138 if((
Timeout
 =0U)||((
	`HAL_GëTick
(Ë- 
Tick°¨t
 ) > Timeout))

5140 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5141 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5144 
	`__HAL_UNLOCK
(
hi2c
);

5146  
HAL_TIMEOUT
;

5150  
HAL_OK
;

5151 
	}
}

5161 
HAL_SètusTy≥Def
 
	$I2C_WaôOnTXEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

5163 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
Ë=
RESET
)

5166 if(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

5168  
HAL_ERROR
;

5172 if(
Timeout
 !
HAL_MAX_DELAY
)

5174 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
Tick°¨t
) > Timeout))

5176 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

5177 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5178 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5181 
	`__HAL_UNLOCK
(
hi2c
);

5183  
HAL_TIMEOUT
;

5187  
HAL_OK
;

5188 
	}
}

5198 
HAL_SètusTy≥Def
 
	$I2C_WaôOnBTFFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

5200 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
RESET
)

5203 if(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

5205  
HAL_ERROR
;

5209 if(
Timeout
 !
HAL_MAX_DELAY
)

5211 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
Tick°¨t
) > Timeout))

5213 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

5214 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5215 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5218 
	`__HAL_UNLOCK
(
hi2c
);

5220  
HAL_TIMEOUT
;

5224  
HAL_OK
;

5225 
	}
}

5235 
HAL_SètusTy≥Def
 
	$I2C_WaôOnSTOPFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

5237 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
RESET
)

5240 if(
	`I2C_IsAcknowÀdgeFaûed
(
hi2c
Ë!
HAL_OK
)

5242  
HAL_ERROR
;

5246 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
Tick°¨t
) > Timeout))

5248 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

5249 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5250 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5253 
	`__HAL_UNLOCK
(
hi2c
);

5255  
HAL_TIMEOUT
;

5258  
HAL_OK
;

5259 
	}
}

5269 
HAL_SètusTy≥Def
 
	$I2C_WaôOnRXNEFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Timeout
, uöt32_à
Tick°¨t
)

5272 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
Ë=
RESET
)

5275 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
Ë=
SET
)

5278 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

5280 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

5281 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5282 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5285 
	`__HAL_UNLOCK
(
hi2c
);

5287  
HAL_ERROR
;

5291 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
Tick°¨t
) > Timeout))

5293 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

5294 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5297 
	`__HAL_UNLOCK
(
hi2c
);

5299  
HAL_TIMEOUT
;

5302  
HAL_OK
;

5303 
	}
}

5311 
HAL_SètusTy≥Def
 
	$I2C_IsAcknowÀdgeFaûed
(
I2C_H™dÀTy≥Def
 *
hi2c
)

5313 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

5316 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

5318 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_AF
;

5319 
hi2c
->
PªviousSèã
 = 
I2C_STATE_NONE
;

5320 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

5323 
	`__HAL_UNLOCK
(
hi2c
);

5325  
HAL_ERROR
;

5327  
HAL_OK
;

5328 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_pwr.c

45 
	~"°m32l1xx_hÆ.h
"

56 #ifde‡
HAL_PWR_MODULE_ENABLED


60 
	#PVD_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

61 
	#PVD_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

62 
	#PVD_RISING_EDGE
 ((
uöt32_t
)0x00000001)

	)

63 
	#PVD_FALLING_EDGE
 ((
uöt32_t
)0x00000002)

	)

103 
	$HAL_PWR_DeInô
()

105 
	`__HAL_RCC_PWR_FORCE_RESET
();

106 
	`__HAL_RCC_PWR_RELEASE_RESET
();

107 
	}
}

116 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

119 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
ENABLE
;

120 
	}
}

129 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

132 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
DISABLE
;

133 
	}
}

357 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

360 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

361 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

364 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

367 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

368 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

369 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
();

372 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

374 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

378 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

380 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

384 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

386 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

389 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

391 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

393 
	}
}

399 
	$HAL_PWR_E«bÀPVD
()

402 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
ENABLE
;

403 
	}
}

409 
	$HAL_PWR_DißbÀPVD
()

412 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
DISABLE
;

413 
	}
}

424 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

427 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

429 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
ENABLE
;

430 
	}
}

441 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

444 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

446 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
DISABLE
;

447 
	}
}

464 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

467 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

468 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

471 
	`MODIFY_REG
(
PWR
->
CR
, (
PWR_CR_PDDS
 | 
PWR_CR_LPSDSR
), 
Reguœt‹
);

474 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

477 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

480 
	`__WFI
();

485 
	`__SEV
();

486 
	`__WFE
();

487 
	`__WFE
();

489 
	}
}

510 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

513 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

514 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

517 
	`MODIFY_REG
(
PWR
->
CR
, (
PWR_CR_PDDS
 | 
PWR_CR_LPSDSR
), 
Reguœt‹
);

520 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

523 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

526 
	`__WFI
();

531 
	`__SEV
();

532 
	`__WFE
();

533 
	`__WFE
();

536 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

537 
	}
}

550 
	$HAL_PWR_E¡îSTANDBYMode
()

553 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

556 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

559 #i‡
	`deföed
 ( 
__CC_ARM
)

560 
	`__f‹˚_°‹es
();

563 
	`__WFI
();

564 
	}
}

575 
	$HAL_PWR_E«bÀSÀïOnExô
()

578 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

579 
	}
}

588 
	$HAL_PWR_DißbÀSÀïOnExô
()

591 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

592 
	}
}

601 
	$HAL_PWR_E«bÀSEVOnPíd
()

604 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

605 
	}
}

614 
	$HAL_PWR_DißbÀSEVOnPíd
()

617 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

618 
	}
}

627 
	$HAL_PWR_PVD_IRQH™dÀr
()

630 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

633 
	`HAL_PWR_PVDCÆlback
();

636 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

638 
	}
}

644 
__wók
 
	$HAL_PWR_PVDCÆlback
()

649 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_pwr_ex.c

44 
	~"°m32l1xx_hÆ.h
"

55 #ifde‡
HAL_PWR_MODULE_ENABLED


84 
uöt32_t
 
	$HAL_PWREx_GëVﬁègeR™ge
()

86  (
PWR
->
CR
 & 
PWR_CR_VOS
);

87 
	}
}

97 
	$HAL_PWREx_E«bÀFa°WakeUp
()

100 *(
__IO
 
uöt32_t
 *Ë
CR_FWU_BB
 = (uöt32_t)
ENABLE
;

101 
	}
}

107 
	$HAL_PWREx_DißbÀFa°WakeUp
()

110 *(
__IO
 
uöt32_t
 *Ë
CR_FWU_BB
 = (uöt32_t)
DISABLE
;

111 
	}
}

117 
	$HAL_PWREx_E«bÀU…øLowPowî
()

120 *(
__IO
 
uöt32_t
 *Ë
CR_ULP_BB
 = (uöt32_t)
ENABLE
;

121 
	}
}

127 
	$HAL_PWREx_DißbÀU…øLowPowî
()

130 *(
__IO
 
uöt32_t
 *Ë
CR_ULP_BB
 = (uöt32_t)
DISABLE
;

131 
	}
}

143 
	$HAL_PWREx_E«bÀLowPowîRunMode
()

146 *(
__IO
 
uöt32_t
 *Ë
CR_LPSDSR_BB
 = (uöt32_t)
ENABLE
;

147 *(
__IO
 
uöt32_t
 *Ë
CR_LPRUN_BB
 = (uöt32_t)
ENABLE
;

148 
	}
}

154 
HAL_SètusTy≥Def
 
	$HAL_PWREx_DißbÀLowPowîRunMode
()

157 *(
__IO
 
uöt32_t
 *Ë
CR_LPRUN_BB
 = (uöt32_t)
DISABLE
;

158 *(
__IO
 
uöt32_t
 *Ë
CR_LPSDSR_BB
 = (uöt32_t)
DISABLE
;

159  
HAL_OK
;

160 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rcc.c

82 
	~"°m32l1xx_hÆ.h
"

93 #ifde‡
HAL_RCC_MODULE_ENABLED


101 
	#RCC_CFGR_PLLMUL_BITNUMBER
 
	`POSITION_VAL
(
RCC_CFGR_PLLMUL
)

	)

102 
	#RCC_CFGR_PLLDIV_BITNUMBER
 
	`POSITION_VAL
(
RCC_CFGR_PLLDIV
)

	)

103 
	#RCC_CFGR_HPRE_BITNUMBER
 
	`POSITION_VAL
(
RCC_CFGR_HPRE
)

	)

104 
	#RCC_CFGR_PPRE1_BITNUMBER
 
	`POSITION_VAL
(
RCC_CFGR_PPRE1
)

	)

105 
	#RCC_CFGR_PPRE2_BITNUMBER
 
	`POSITION_VAL
(
RCC_CFGR_PPRE2
)

	)

107 
	#RCC_ICSCR_MSIRANGE_BITNUMBER
 
	`POSITION_VAL
(
RCC_ICSCR_MSIRANGE
)

	)

108 
	#RCC_ICSCR_MSITRIM_BITNUMBER
 
	`POSITION_VAL
(
RCC_ICSCR_MSITRIM
)

	)

117 
	#MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

118 
	#MCO1_GPIO_PORT
 
GPIOA


	)

119 
	#MCO1_PIN
 
GPIO_PIN_8


	)

129 c⁄° 
uöt8_t
 
PLLMulTabÀ
[];

138 
HAL_SètusTy≥Def
 
RCC_SëFœshL©ícyFromMSIR™ge
(
uöt32_t
 
MSIønge
);

261 
	$HAL_RCC_DeInô
()

264 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_MSION
);

267 
	`CLEAR_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SW
);

270 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
 | 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
 | 
RCC_CR_PLLON
 | 
RCC_CR_HSEBYP
);

272 
	`CLEAR_REG
(
RCC
->
CFGR
);

275 
	`MODIFY_REG
(
RCC
->
ICSCR
, (
RCC_ICSCR_MSIRANGE
 | 
RCC_ICSCR_MSITRIM
), (((
uöt32_t
)0 << 
RCC_ICSCR_MSITRIM_BITNUMBER
Ë| 
RCC_ICSCR_MSIRANGE_5
));

278 
	`MODIFY_REG
(
RCC
->
ICSCR
, 
RCC_ICSCR_HSITRIM
, ((
uöt32_t
)0x10 << 
	`POSITION_VAL
(RCC_ICSCR_HSITRIM)));

281 
	`CLEAR_REG
(
RCC
->
CIR
);

284 
Sy°emC‹eClock
 = 
MSI_VALUE
;

285 
	}
}

301 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

303 
uöt32_t
 
tick°¨t
 = 0U;

306 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

307 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

310 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

313 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

316 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
)

317 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
)))

319 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

321  
HAL_ERROR
;

327 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

331 if(
RCC_OscInôSåu˘
->
HSESèã
 !
RCC_HSE_OFF
)

334 
tick°¨t
 = 
	`HAL_GëTick
();

337 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

339 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

341  
HAL_TIMEOUT
;

348 
tick°¨t
 = 
	`HAL_GëTick
();

351 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

353 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

355  
HAL_TIMEOUT
;

362 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

365 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

366 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

369 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
)

370 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI
)))

373 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

375  
HAL_ERROR
;

381 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

387 if(
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_OFF
)

390 
	`__HAL_RCC_HSI_ENABLE
();

393 
tick°¨t
 = 
	`HAL_GëTick
();

396 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

398 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

400  
HAL_TIMEOUT
;

405 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

410 
	`__HAL_RCC_HSI_DISABLE
();

413 
tick°¨t
 = 
	`HAL_GëTick
();

416 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

418 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

420  
HAL_TIMEOUT
;

427 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_MSI
) == RCC_OSCILLATORTYPE_MSI)

430 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_MSI
) )

432 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
MSISèã
 =
RCC_MSI_OFF
))

434  
HAL_ERROR
;

440 
	`as£π_∑øm
(
	`IS_RCC_MSICALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
));

441 
	`as£π_∑øm
(
	`IS_RCC_MSI_CLOCK_RANGE
(
RCC_OscInôSåu˘
->
MSIClockR™ge
));

446 if(
RCC_OscInôSåu˘
->
MSIClockR™ge
 > 
	`__HAL_RCC_GET_MSI_RANGE
())

449 if(
	`RCC_SëFœshL©ícyFromMSIR™ge
(
RCC_OscInôSåu˘
->
MSIClockR™ge
Ë!
HAL_OK
)

451  
HAL_ERROR
;

455 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

457 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

463 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

465 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

468 if(
	`RCC_SëFœshL©ícyFromMSIR™ge
(
RCC_OscInôSåu˘
->
MSIClockR™ge
Ë!
HAL_OK
)

470  
HAL_ERROR
;

475 
Sy°emC‹eClock
 = (32768U * (1U << ((
RCC_OscInôSåu˘
->
MSIClockR™ge
 >> 
RCC_ICSCR_MSIRANGE_BITNUMBER
) + 1U)))

476 >> 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
Ë>> 
RCC_CFGR_HPRE_BITNUMBER
)];

479 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

485 
	`as£π_∑øm
(
	`IS_RCC_MSI
(
RCC_OscInôSåu˘
->
MSISèã
));

488 if(
RCC_OscInôSåu˘
->
MSISèã
 !
RCC_MSI_OFF
)

491 
	`__HAL_RCC_MSI_ENABLE
();

494 
tick°¨t
 = 
	`HAL_GëTick
();

497 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë=
RESET
)

499 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
MSI_TIMEOUT_VALUE
)

501  
HAL_TIMEOUT
;

505 
	`as£π_∑øm
(
	`IS_RCC_MSICALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
));

506 
	`as£π_∑øm
(
	`IS_RCC_MSI_CLOCK_RANGE
(
RCC_OscInôSåu˘
->
MSIClockR™ge
));

509 
	`__HAL_RCC_MSI_RANGE_CONFIG
(
RCC_OscInôSåu˘
->
MSIClockR™ge
);

511 
	`__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
);

517 
	`__HAL_RCC_MSI_DISABLE
();

520 
tick°¨t
 = 
	`HAL_GëTick
();

523 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë!
RESET
)

525 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
MSI_TIMEOUT_VALUE
)

527  
HAL_TIMEOUT
;

534 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

537 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

540 if(
RCC_OscInôSåu˘
->
LSISèã
 !
RCC_LSI_OFF
)

543 
	`__HAL_RCC_LSI_ENABLE
();

546 
tick°¨t
 = 
	`HAL_GëTick
();

549 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

551 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

553  
HAL_TIMEOUT
;

560 
	`__HAL_RCC_LSI_DISABLE
();

563 
tick°¨t
 = 
	`HAL_GëTick
();

566 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

568 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

570  
HAL_TIMEOUT
;

576 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

578 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

581 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

585 if(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

587 
	`__HAL_RCC_PWR_CLK_ENABLE
();

588 
pwr˛kch™ged
 = 
SET
;

591 if(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

594 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

597 
tick°¨t
 = 
	`HAL_GëTick
();

599 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

601 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

603  
HAL_TIMEOUT
;

609 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

611 if(
RCC_OscInôSåu˘
->
LSESèã
 !
RCC_LSE_OFF
)

614 
tick°¨t
 = 
	`HAL_GëTick
();

617 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

619 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

621  
HAL_TIMEOUT
;

628 
tick°¨t
 = 
	`HAL_GëTick
();

631 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

633 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

635  
HAL_TIMEOUT
;

641 if(
pwr˛kch™ged
 =
SET
)

643 
	`__HAL_RCC_PWR_CLK_DISABLE
();

649 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

650 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

653 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

655 if((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

658 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

659 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
));

660 
	`as£π_∑øm
(
	`IS_RCC_PLL_DIV
(
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
));

663 
	`__HAL_RCC_PLL_DISABLE
();

666 
tick°¨t
 = 
	`HAL_GëTick
();

669 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

671 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

673  
HAL_TIMEOUT
;

678 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

679 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
,

680 
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
);

682 
	`__HAL_RCC_PLL_ENABLE
();

685 
tick°¨t
 = 
	`HAL_GëTick
();

688 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

690 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

692  
HAL_TIMEOUT
;

699 
	`__HAL_RCC_PLL_DISABLE
();

702 
tick°¨t
 = 
	`HAL_GëTick
();

705 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

707 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

709  
HAL_TIMEOUT
;

716  
HAL_ERROR
;

720  
HAL_OK
;

721 
	}
}

749 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

751 
uöt32_t
 
tick°¨t
 = 0U;

754 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

755 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

756 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

763 if(
FL©ícy
 > (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

766 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

770 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

772  
HAL_ERROR
;

777 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

779 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

780 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

784 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

786 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

789 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

792 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

794  
HAL_ERROR
;

798 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

801 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

803  
HAL_ERROR
;

807 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSI
)

810 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

812  
HAL_ERROR
;

819 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_MSIRDY
Ë=
RESET
)

821  
HAL_ERROR
;

824 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

827 
tick°¨t
 = 
	`HAL_GëTick
();

829 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

831 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

833 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

835  
HAL_TIMEOUT
;

839 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

841 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

843 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

845  
HAL_TIMEOUT
;

849 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSI
)

851 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

853 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

855  
HAL_TIMEOUT
;

861 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_MSI
)

863 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

865  
HAL_TIMEOUT
;

871 if(
FL©ícy
 < (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

874 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

878 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

880  
HAL_ERROR
;

885 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

887 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

888 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

892 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

894 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

895 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

899 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
AHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
)>> 
RCC_CFGR_HPRE_BITNUMBER
];

902 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

904  
HAL_OK
;

905 
	}
}

951 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

953 
GPIO_InôTy≥Def
 
gpio
 = {0};

956 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

957 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

958 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

961 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

962 
gpio
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

963 
gpio
.
PuŒ
 = 
GPIO_NOPULL
;

964 
gpio
.
Pö
 = 
MCO1_PIN
;

965 
gpio
.
A…î«ã
 = 
GPIO_AF0_MCO
;

968 
	`MCO1_CLK_ENABLE
();

970 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
gpio
);

973 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSour˚
, 
RCC_MCODiv
);

974 
	}
}

985 
	$HAL_RCC_E«bÀCSS
()

987 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
ENABLE
;

988 
	}
}

994 
	$HAL_RCC_DißbÀCSS
()

996 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
DISABLE
;

997 
	}
}

1029 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

1031 
uöt32_t
 
tm¥eg
 = 0, 
∂lm
 = 0, 
∂ld
 = 0, 
∂lvco
 = 0, 
msi˛kønge
 = 0;

1032 
uöt32_t
 
sys˛ock‰eq
 = 0;

1034 
tm¥eg
 = 
RCC
->
CFGR
;

1037 
tm¥eg
 & 
RCC_CFGR_SWS
)

1039 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1041 
sys˛ock‰eq
 = 
HSI_VALUE
;

1044 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1046 
sys˛ock‰eq
 = 
HSE_VALUE
;

1049 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1051 
∂lm
 = 
PLLMulTabÀ
[(
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLMUL
Ë>> 
RCC_CFGR_PLLMUL_BITNUMBER
];

1052 
∂ld
 = ((
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLDIV
Ë>> 
RCC_CFGR_PLLDIV_BITNUMBER
) + 1;

1053 i‡(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë!
RCC_PLLSOURCE_HSI
)

1056 
∂lvco
 = (
HSE_VALUE
 * 
∂lm
Ë/ 
∂ld
;

1061 
∂lvco
 = (
HSI_VALUE
 * 
∂lm
Ë/ 
∂ld
;

1063 
sys˛ock‰eq
 = 
∂lvco
;

1066 
RCC_SYSCLKSOURCE_STATUS_MSI
:

1069 
msi˛kønge
 = (
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
 ) >> 
RCC_ICSCR_MSIRANGE_BITNUMBER
;

1070 
sys˛ock‰eq
 = (32768 * (1 << (
msi˛kønge
 + 1)));

1074  
sys˛ock‰eq
;

1075 
	}
}

1086 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1088  
Sy°emC‹eClock
;

1089 
	}
}

1097 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1100  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
Ë>> 
RCC_CFGR_PPRE1_BITNUMBER
]);

1101 
	}
}

1109 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1112  (
	`HAL_RCC_GëHCLKFªq
()>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
Ë>> 
RCC_CFGR_PPRE2_BITNUMBER
]);

1113 
	}
}

1122 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1125 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

1128 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1129 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
 | 
RCC_OSCILLATORTYPE_MSI
;

1133 if((
RCC
->
CR
 &
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1135 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1137 if((
RCC
->
CR
 &
RCC_CR_HSEON
) == RCC_CR_HSEON)

1139 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1143 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1147 if((
RCC
->
CR
 &
RCC_CR_HSION
) == RCC_CR_HSION)

1149 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1153 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1156 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_HSITRIM
Ë>> 
	`POSITION_VAL
(RCC_ICSCR_HSITRIM));

1159 if((
RCC
->
CR
 &
RCC_CR_MSION
) == RCC_CR_MSION)

1161 
RCC_OscInôSåu˘
->
MSISèã
 = 
RCC_MSI_ON
;

1165 
RCC_OscInôSåu˘
->
MSISèã
 = 
RCC_MSI_OFF
;

1168 
RCC_OscInôSåu˘
->
MSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_MSITRIM
Ë>> 
RCC_ICSCR_MSITRIM_BITNUMBER
);

1169 
RCC_OscInôSåu˘
->
MSIClockR™ge
 = (
uöt32_t
)((
RCC
->
ICSCR
 & 
RCC_ICSCR_MSIRANGE
));

1172 if((
RCC
->
CSR
 &
RCC_CSR_LSEBYP
) == RCC_CSR_LSEBYP)

1174 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1176 if((
RCC
->
CSR
 &
RCC_CSR_LSEON
) == RCC_CSR_LSEON)

1178 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1182 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1186 if((
RCC
->
CSR
 &
RCC_CSR_LSION
) == RCC_CSR_LSION)

1188 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1192 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1197 if((
RCC
->
CR
 &
RCC_CR_PLLON
) == RCC_CR_PLLON)

1199 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1203 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1205 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1206 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMUL
);

1207 
RCC_OscInôSåu˘
->
PLL
.
PLLDIV
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLDIV
);

1208 
	}
}

1218 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1221 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

1222 
	`as£π_∑øm
(
pFL©ícy
 !
NULL
);

1225 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1228 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1231 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1234 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1237 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1240 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1241 
	}
}

1248 
	$HAL_RCC_NMI_IRQH™dÀr
()

1251 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1254 
	`HAL_RCC_CSSCÆlback
();

1257 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1259 
	}
}

1265 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1270 
	}
}

1290 
HAL_SètusTy≥Def
 
	$RCC_SëFœshL©ícyFromMSIR™ge
(
uöt32_t
 
MSIønge
)

1292 
uöt32_t
 
vos
 = 0;

1293 
uöt32_t
 
œãncy
 = 
FLASH_LATENCY_0
;

1296 i‡(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
Ë=
RCC_SYSCLK_DIV1
)

1298 if(
	`__HAL_RCC_PWR_IS_CLK_ENABLED
())

1300 
vos
 = 
	`HAL_PWREx_GëVﬁègeR™ge
();

1304 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1305 
vos
 = 
	`HAL_PWREx_GëVﬁègeR™ge
();

1306 
	`__HAL_RCC_PWR_CLK_DISABLE
();

1310 if((
vos
 =
PWR_REGULATOR_VOLTAGE_SCALE3
Ë&& (
MSIønge
 =
RCC_MSIRANGE_6
))

1312 
œãncy
 = 
FLASH_LATENCY_1
;

1316 
	`__HAL_FLASH_SET_LATENCY
(
œãncy
);

1320 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
œãncy
)

1322  
HAL_ERROR
;

1325  
HAL_OK
;

1326 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rcc_ex.c

43 
	~"°m32l1xx_hÆ.h
"

49 #ifde‡
HAL_RCC_MODULE_ENABLED


110 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

112 
uöt32_t
 
tick°¨t
 = 0U;

113 
uöt32_t
 
ãmp_ªg
 = 0U;

116 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

119 i‡((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC)

120 #i‡
	`deföed
(
LCD
)

121 || (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD)

126 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC)

128 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
RTCClockSñe˘i⁄
));

131 #i‡
	`deföed
(
LCD
)

132 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD)

134 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
LCDClockSñe˘i⁄
));

138 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

143 if(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

145 
	`__HAL_RCC_PWR_CLK_ENABLE
();

146 
pwr˛kch™ged
 = 
SET
;

149 if(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

152 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

155 
tick°¨t
 = 
	`HAL_GëTick
();

157 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

159 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

161  
HAL_TIMEOUT
;

167 
ãmp_ªg
 = (
RCC
->
CR
 & 
RCC_CR_RTCPRE
);

168 i‡((
ãmp_ªg
 !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CR_RTCPRE
))

169 #i‡
	`deföed
 (
LCD
)

170 || (
ãmp_ªg
 !(
PîùhClkInô
->
LCDClockSñe˘i⁄
 & 
RCC_CR_RTCPRE
))

174 i‡(((
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
Ë=
RCC_CSR_RTCSEL_HSE
Ë&& 
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
))

177  
HAL_ERROR
;

182 
ãmp_ªg
 = (
RCC
->
CSR
 & 
RCC_CSR_RTCSEL
);

184 if((
ãmp_ªg
 !0x00000000UË&& ((—emp_ªg !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
)) \

185 && (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

186 #i‡
	`deföed
(
LCD
)

187 || ((
ãmp_ªg
 !(
PîùhClkInô
->
LCDClockSñe˘i⁄
 & 
RCC_CSR_RTCSEL
)) \

188 && (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LCD
) == RCC_PERIPHCLK_LCD))

193 
ãmp_ªg
 = (
RCC
->
CSR
 & ~(
RCC_CSR_RTCSEL
));

196 
	`__HAL_RCC_BACKUPRESET_FORCE
();

197 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

200 
RCC
->
CSR
 = 
ãmp_ªg
;

203 i‡(
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSEON
))

206 
tick°¨t
 = 
	`HAL_GëTick
();

209 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

211 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

213  
HAL_TIMEOUT
;

218 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

221 if(
pwr˛kch™ged
 =
SET
)

223 
	`__HAL_RCC_PWR_CLK_DISABLE
();

227  
HAL_OK
;

228 
	}
}

236 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

238 
uöt32_t
 
§c˛k
 = 0;

241 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
;

242 #i‡
	`deföed
(
LCD
)

243 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_LCD
;

247 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

248 i‡(
§c˛k
 !
RCC_RTCCLKSOURCE_HSE_DIV2
)

251 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
;

256 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
 | (
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_RTCPRE
));

258 #i‡
	`deföed
(
LCD
)

259 
PîùhClkInô
->
LCDClockSñe˘i⁄
 = PîùhClkInô->
RTCClockSñe˘i⁄
;

261 
	}
}

273 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

275 
uöt32_t
 
ãmp_ªg
 = 0U, 
˛k¥ediv
 = 0U, 
‰equícy
 = 0U;

276 
uöt32_t
 
§c˛k
 = 0U;

279 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClk
));

281 
PîùhClk
)

283 
RCC_PERIPHCLK_RTC
:

284 #i‡
	`deföed
(
LCD
)

285 
RCC_PERIPHCLK_LCD
:

289 
ãmp_ªg
 = 
RCC
->
CSR
;

292 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

295 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSERDY
)))

297 
‰equícy
 = 
LSE_VALUE
;

300 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_LSI
Ë&& (
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_CSR_LSIRDY
)))

302 
‰equícy
 = 
LSI_VALUE
;

305 i‡((
§c˛k
 =
RCC_RTCCLKSOURCE_HSE_DIVX
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

308 
˛k¥ediv
 = 
	`__HAL_RCC_GET_RTC_HSE_PRESCALER
();

310 
˛k¥ediv
)

312 
RCC_RTC_HSE_DIV_16
:

314 
‰equícy
 = 
HSE_VALUE
 / 16U;

317 
RCC_RTC_HSE_DIV_8
:

319 
‰equícy
 = 
HSE_VALUE
 / 8U;

322 
RCC_RTC_HSE_DIV_4
:

324 
‰equícy
 = 
HSE_VALUE
 / 4U;

329 
‰equícy
 = 
HSE_VALUE
 / 2U;

337 
‰equícy
 = 0U;

346 (
‰equícy
);

347 
	}
}

349 #i‡
deföed
(
RCC_LSECSS_SUPPORT
)

362 
	$HAL_RCCEx_E«bÀLSECSS
()

364 *(
__IO
 
uöt32_t
 *Ë
CSR_LSECSSON_BB
 = (uöt32_t)
ENABLE
;

365 
	}
}

375 
	$HAL_RCCEx_DißbÀLSECSS
()

378 *(
__IO
 
uöt32_t
 *Ë
CSR_LSECSSON_BB
 = (uöt32_t)
DISABLE
;

381 
	`__HAL_RCC_DISABLE_IT
(
RCC_IT_LSECSS
);

382 
	}
}

389 
	$HAL_RCCEx_E«bÀLSECSS_IT
()

392 *(
__IO
 
uöt32_t
 *Ë
CSR_LSECSSON_BB
 = (uöt32_t)
ENABLE
;

395 
	`__HAL_RCC_ENABLE_IT
(
RCC_IT_LSECSS
);

398 
	`__HAL_RCC_LSECSS_EXTI_ENABLE_IT
();

399 
	`__HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE
();

400 
	}
}

406 
	$HAL_RCCEx_LSECSS_IRQH™dÀr
()

409 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_LSECSS
))

412 
	`HAL_RCCEx_LSECSS_CÆlback
();

415 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_LSECSS
);

417 
	}
}

423 
__wók
 
	$HAL_RCCEx_LSECSS_CÆlback
()

428 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rtc.c

133 
	~"°m32l1xx_hÆ.h
"

144 #ifde‡
HAL_RTC_MODULE_ENABLED


196 
HAL_SètusTy≥Def
 
	$HAL_RTC_Inô
(
RTC_H™dÀTy≥Def
 *
hπc
)

199 if(
hπc
 =
NULL
)

201  
HAL_ERROR
;

205 
	`as£π_∑øm
(
	`IS_RTC_ALL_INSTANCE
(
hπc
->
In°™˚
));

206 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
hπc
->
Inô
.
HourF‹m©
));

207 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
hπc
->
Inô
.
AsynchPªdiv
));

208 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
hπc
->
Inô
.
SynchPªdiv
));

209 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
hπc
->
Inô
.
OutPut
));

210 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
hπc
->
Inô
.
OutPutPﬁ¨ôy
));

211 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
hπc
->
Inô
.
OutPutTy≥
));

213 if(
hπc
->
Sèã
 =
HAL_RTC_STATE_RESET
)

216 
hπc
->
Lock
 = 
HAL_UNLOCKED
;

219 
	`HAL_RTC_M•Inô
(
hπc
);

223 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

226 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

229 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

232 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

235 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

237  
HAL_ERROR
;

242 
hπc
->
In°™˚
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
 | 
RTC_CR_OSEL
 | 
RTC_CR_POL
));

244 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)(hπc->
Inô
.
HourF‹m©
 | hπc->Inô.
OutPut
 | hπc->Inô.
OutPutPﬁ¨ôy
);

247 
hπc
->
In°™˚
->
PRER
 = (
uöt32_t
)(hπc->
Inô
.
SynchPªdiv
);

248 
hπc
->
In°™˚
->
PRER
 |(
uöt32_t
)(hπc->
Inô
.
AsynchPªdiv
 << 16);

251 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

253 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_ALARMOUTTYPE
;

254 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)(hπc->
Inô
.
OutPutTy≥
);

257 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

260 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

262  
HAL_OK
;

264 
	}
}

273 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
)

276 
	`UNUSED
(
hπc
);

282  
HAL_ERROR
;

283 
	}
}

291 
__wók
 
	$HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
* 
hπc
)

294 
	`UNUSED
(
hπc
);

299 
	}
}

307 
__wók
 
	$HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
* 
hπc
)

310 
	`UNUSED
(
hπc
);

315 
	}
}

346 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

348 
uöt32_t
 
tm¥eg
 = 0;

351 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

352 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
sTime
->
DayLightSavög
));

353 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
sTime
->
St‹eO≥øti⁄
));

356 
	`__HAL_LOCK
(
hπc
);

358 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

360 if(
F‹m©
 =
RTC_FORMAT_BIN
)

362 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

364 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sTime
->
Hours
));

365 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sTime
->
TimeF‹m©
));

369 
sTime
->
TimeF‹m©
 = 0x00;

370 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sTime
->
Hours
));

372 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sTime
->
Möuãs
));

373 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sTime
->
Sec⁄ds
));

375 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
sTime
->
Hours
) << 16) | \

376 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sTime
->
Möuãs
) << 8) | \

377 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sTime
->
Sec⁄ds
)) | \

378 (((
uöt32_t
)
sTime
->
TimeF‹m©
) << 16));

382 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

384 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sTime
->
Hours
);

385 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

386 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sTime
->
TimeF‹m©
));

390 
sTime
->
TimeF‹m©
 = 0x00;

391 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sTime
->
Hours
)));

393 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sTime
->
Möuãs
)));

394 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sTime
->
Sec⁄ds
)));

395 
tm¥eg
 = (((
uöt32_t
)(
sTime
->
Hours
) << 16) | \

396 ((
uöt32_t
)(
sTime
->
Möuãs
) << 8) | \

397 ((
uöt32_t
)
sTime
->
Sec⁄ds
) | \

398 ((
uöt32_t
)(
sTime
->
TimeF‹m©
) << 16));

402 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

405 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

408 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

411 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

414 
	`__HAL_UNLOCK
(
hπc
);

416  
HAL_ERROR
;

421 
hπc
->
In°™˚
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

424 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_BCK
;

427 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)(
sTime
->
DayLightSavög
 | sTime->
St‹eO≥øti⁄
);

430 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

433 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

436 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

438 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

441 
	`__HAL_UNLOCK
(
hπc
);

443  
HAL_ERROR
;

447 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

449 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

451 
	`__HAL_UNLOCK
(
hπc
);

453  
HAL_OK
;

455 
	}
}

469 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

471 
uöt32_t
 
d©ëm¥eg
 = 0;

474 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

477 
	`__HAL_LOCK
(
hπc
);

479 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

481 if((
F‹m©
 =
RTC_FORMAT_BIN
Ë&& ((
sD©e
->
M⁄th
 & 0x10) == 0x10))

483 
sD©e
->
M⁄th
 = (
uöt8_t
)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);

486 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
sD©e
->
WìkDay
));

488 if(
F‹m©
 =
RTC_FORMAT_BIN
)

490 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
sD©e
->
Yór
));

491 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
sD©e
->
M⁄th
));

492 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
sD©e
->
D©e
));

494 
d©ëm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
Yór
) << 16) | \

495 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
M⁄th
) << 8) | \

496 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
D©e
)) | \

497 ((
uöt32_t
)
sD©e
->
WìkDay
 << 13));

501 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
sD©e
->
Yór
)));

502 
d©ëm¥eg
 = 
	`RTC_Bcd2ToByã
(
sD©e
->
M⁄th
);

503 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
d©ëm¥eg
));

504 
d©ëm¥eg
 = 
	`RTC_Bcd2ToByã
(
sD©e
->
D©e
);

505 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
d©ëm¥eg
));

507 
d©ëm¥eg
 = ((((
uöt32_t
)
sD©e
->
Yór
) << 16) | \

508 (((
uöt32_t
)
sD©e
->
M⁄th
) << 8) | \

509 ((
uöt32_t
)
sD©e
->
D©e
) | \

510 (((
uöt32_t
)
sD©e
->
WìkDay
) << 13));

514 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

517 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

520 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

523 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

526 
	`__HAL_UNLOCK
(
hπc
);

528  
HAL_ERROR
;

533 
hπc
->
In°™˚
->
DR
 = (
uöt32_t
)(
d©ëm¥eg
 & 
RTC_DR_RESERVED_MASK
);

536 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

539 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

542 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

544 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

547 
	`__HAL_UNLOCK
(
hπc
);

549  
HAL_ERROR
;

553 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

555 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
 ;

558 
	`__HAL_UNLOCK
(
hπc
);

560  
HAL_OK
;

562 
	}
}

578 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

580 
uöt32_t
 
d©ëm¥eg
 = 0;

583 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

586 
d©ëm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
DR
 & 
RTC_DR_RESERVED_MASK
);

589 
sD©e
->
Yór
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

590 
sD©e
->
M⁄th
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

591 
sD©e
->
D©e
 = (
uöt8_t
)(
d©ëm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

592 
sD©e
->
WìkDay
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_WDU
)) >> 13);

595 if(
F‹m©
 =
RTC_FORMAT_BIN
)

598 
sD©e
->
Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Year);

599 
sD©e
->
M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Month);

600 
sD©e
->
D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Date);

602  
HAL_OK
;

603 
	}
}

633 
HAL_SètusTy≥Def
 
	$HAL_RTC_Dó˘iv©eAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Aœrm
)

635 
uöt32_t
 
tick°¨t
 = 0;

638 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

641 
	`__HAL_LOCK
(
hπc
);

643 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

646 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

648 if(
Aœrm
 =
RTC_ALARM_A
)

651 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

654 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

656 
tick°¨t
 = 
	`HAL_GëTick
();

659 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

661 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

664 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

666 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

669 
	`__HAL_UNLOCK
(
hπc
);

671  
HAL_TIMEOUT
;

678 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

681 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
,
RTC_IT_ALRB
);

683 
tick°¨t
 = 
	`HAL_GëTick
();

686 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

688 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

691 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

693 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

696 
	`__HAL_UNLOCK
(
hπc
);

698  
HAL_TIMEOUT
;

703 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

705 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

708 
	`__HAL_UNLOCK
(
hπc
);

710  
HAL_OK
;

711 
	}
}

719 
	$HAL_RTC_AœrmIRQH™dÀr
(
RTC_H™dÀTy≥Def
* 
hπc
)

722 if(
	`__HAL_RTC_ALARM_GET_IT_SOURCE
(
hπc
, 
RTC_IT_ALRA
Ë!
RESET
)

725 if(
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
Ë!
RESET
)

728 
	`HAL_RTC_AœrmAEvítCÆlback
(
hπc
);

731 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

736 if(
	`__HAL_RTC_ALARM_GET_IT_SOURCE
(
hπc
, 
RTC_IT_ALRB
Ë!
RESET
)

739 if(
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
Ë!
RESET
)

742 
	`HAL_RTCEx_AœrmBEvítCÆlback
(
hπc
);

745 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
);

750 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
();

753 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

754 
	}
}

762 
__wók
 
	$HAL_RTC_AœrmAEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

765 
	`UNUSED
(
hπc
);

770 
	}
}

779 
HAL_SètusTy≥Def
 
	$HAL_RTC_PﬁlF‹AœrmAEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

782 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

784 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
Ë=
RESET
)

786 if(
Timeout
 !
HAL_MAX_DELAY
)

788 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

790 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

791  
HAL_TIMEOUT
;

797 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

800 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

802  
HAL_OK
;

803 
	}
}

829 
HAL_RTCSèãTy≥Def
 
	$HAL_RTC_GëSèã
(
RTC_H™dÀTy≥Def
* 
hπc
)

831  
hπc
->
Sèã
;

832 
	}
}

854 
HAL_SètusTy≥Def
 
	$RTC_E¡îInôMode
(
RTC_H™dÀTy≥Def
* 
hπc
)

856 
uöt32_t
 
tick°¨t
 = 0;

859 if((
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

862 
hπc
->
In°™˚
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

864 
tick°¨t
 = 
	`HAL_GëTick
();

866 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

868 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RTC_TIMEOUT_VALUE
)

870  
HAL_TIMEOUT
;

875  
HAL_OK
;

876 
	}
}

883 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

885 
uöt32_t
 
bcdhigh
 = 0;

887 
VÆue
 >= 10)

889 
bcdhigh
++;

890 
VÆue
 -= 10;

893  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

894 
	}
}

901 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

903 
uöt32_t
 
tmp
 = 0;

904 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

905  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

906 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rtc_ex.c

94 
	~"°m32l1xx_hÆ.h
"

104 #ifde‡
HAL_RTC_MODULE_ENABLED


129 
HAL_SètusTy≥Def
 
	$HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
)

131 
uöt32_t
 
tick°¨t
 = 0;

134 
	`as£π_∑øm
(
	`IS_RTC_ALL_INSTANCE
(
hπc
->
In°™˚
));

137 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

140 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

143 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

146 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

149 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

151  
HAL_ERROR
;

156 
hπc
->
In°™˚
->
TR
 = (
uöt32_t
)0x00000000;

157 
hπc
->
In°™˚
->
DR
 = (
uöt32_t
)0x00002101;

159 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)0x00000007;

161 
tick°¨t
 = 
	`HAL_GëTick
();

164 ((
hπc
->
In°™˚
->
ISR
Ë& 
RTC_ISR_WUTWF
Ë=(
uöt32_t
)
RESET
)

166 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

169 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

172 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

174  
HAL_TIMEOUT
;

179 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)0x00000000;

180 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

181 
hπc
->
In°™˚
->
PRER
 = (
uöt32_t
)0x007F00FF;

182 
hπc
->
In°™˚
->
CALIBR
 = (
uöt32_t
)0x00000000;

183 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)0x00000000;

184 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)0x00000000;

185 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

186 
hπc
->
In°™˚
->
SHIFTR
 = (
uöt32_t
)0x00000000;

187 
hπc
->
In°™˚
->
CALR
 = (
uöt32_t
)0x00000000;

188 
hπc
->
In°™˚
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

189 
hπc
->
In°™˚
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

192 
hπc
->
In°™˚
->
ISR
 = (
uöt32_t
)0x00000000;

195 
hπc
->
In°™˚
->
TAFCR
 = 0x00000000;

198 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

201 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

203 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

205  
HAL_ERROR
;

210 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

213 
	`HAL_RTC_M•DeInô
(
hπc
);

215 
hπc
->
Sèã
 = 
HAL_RTC_STATE_RESET
;

218 
	`__HAL_UNLOCK
(
hπc
);

220  
HAL_OK
;

221 
	}
}

253 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

255 
uöt32_t
 
tm¥eg
 = 0;

258 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

260 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

262 
sTime
->
SubSec⁄ds
 = (
uöt32_t
)((
hπc
->
In°™˚
->
SSR
Ë& 
RTC_SSR_SS
);

265 
sTime
->
Sec⁄dFø˘i⁄
 = (
uöt32_t
)(
hπc
->
In°™˚
->
PRER
 & 
RTC_PRER_PREDIV_S
);

269 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TR
 & 
RTC_TR_RESERVED_MASK
);

272 
sTime
->
Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

273 
sTime
->
Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

274 
sTime
->
Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

275 
sTime
->
TimeF‹m©
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

278 if(
F‹m©
 =
RTC_FORMAT_BIN
)

281 
sTime
->
Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Hours);

282 
sTime
->
Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Minutes);

283 
sTime
->
Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Seconds);

286  
HAL_OK
;

287 
	}
}

308 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

310 
uöt32_t
 
tick°¨t
 = 0;

311 
uöt32_t
 
tm¥eg
 = 0;

313 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

314 
uöt32_t
 
sub£c⁄dtm¥eg
 = 0;

318 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

319 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

320 
	`as£π_∑øm
(
	`IS_RTC_ALARM_MASK
(
sAœrm
->
AœrmMask
));

321 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
sAœrm
->
AœrmD©eWìkDaySñ
));

322 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

323 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
sAœrm
->
AœrmTime
.
SubSec⁄ds
));

324 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
sAœrm
->
AœrmSubSec⁄dMask
));

328 
	`__HAL_LOCK
(
hπc
);

330 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

332 if(
F‹m©
 =
RTC_FORMAT_BIN
)

334 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

336 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sAœrm
->
AœrmTime
.
Hours
));

337 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

341 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

342 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

344 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

345 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

347 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

349 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
sAœrm
->
AœrmD©eWìkDay
));

353 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
sAœrm
->
AœrmD©eWìkDay
));

356 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

357 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

358 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)) | \

359 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

360 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

361 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

362 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

366 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

368 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
);

369 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

370 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

374 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

375 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

378 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

379 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

381 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

383 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

384 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

388 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

389 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

392 
tm¥eg
 = (((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

393 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

394 ((
uöt32_t
Ë
sAœrm
->
AœrmTime
.
Sec⁄ds
) | \

395 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

396 ((
uöt32_t
)(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

397 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

398 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

401 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

403 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((uöt32_t)(
sAœrm
->
AœrmTime
.
SubSec⁄ds
Ë| (uöt32_t)(sAœrm->
AœrmSubSec⁄dMask
));

407 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

410 if(
sAœrm
->
Aœrm
 =
RTC_ALARM_A
)

413 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

416 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

418 
tick°¨t
 = 
	`HAL_GëTick
();

420 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

422 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

425 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

427 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

430 
	`__HAL_UNLOCK
(
hπc
);

432  
HAL_TIMEOUT
;

436 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

437 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

439 
hπc
->
In°™˚
->
ALRMASSR
 = 
sub£c⁄dtm¥eg
;

442 
	`__HAL_RTC_ALARMA_ENABLE
(
hπc
);

447 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

450 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRB
);

452 
tick°¨t
 = 
	`HAL_GëTick
();

454 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

456 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

459 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

461 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

464 
	`__HAL_UNLOCK
(
hπc
);

466  
HAL_TIMEOUT
;

470 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

471 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

473 
hπc
->
In°™˚
->
ALRMBSSR
 = 
sub£c⁄dtm¥eg
;

476 
	`__HAL_RTC_ALARMB_ENABLE
(
hπc
);

480 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

483 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

486 
	`__HAL_UNLOCK
(
hπc
);

488  
HAL_OK
;

489 
	}
}

505 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

507 
uöt32_t
 
tick°¨t
 = 0;

508 
uöt32_t
 
tm¥eg
 = 0;

509 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

510 
uöt32_t
 
sub£c⁄dtm¥eg
 = 0;

514 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

515 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

516 
	`as£π_∑øm
(
	`IS_RTC_ALARM_MASK
(
sAœrm
->
AœrmMask
));

517 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
sAœrm
->
AœrmD©eWìkDaySñ
));

518 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

519 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
sAœrm
->
AœrmTime
.
SubSec⁄ds
));

520 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
sAœrm
->
AœrmSubSec⁄dMask
));

524 
	`__HAL_LOCK
(
hπc
);

526 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

528 if(
F‹m©
 =
RTC_FORMAT_BIN
)

530 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

532 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sAœrm
->
AœrmTime
.
Hours
));

533 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

537 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

538 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

540 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

541 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

543 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

545 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
sAœrm
->
AœrmD©eWìkDay
));

549 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
sAœrm
->
AœrmD©eWìkDay
));

551 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

552 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

553 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)) | \

554 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

555 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

556 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

557 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

561 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

563 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
);

564 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

565 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

569 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

570 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

573 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

574 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

576 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

578 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

579 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

583 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

584 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

586 
tm¥eg
 = (((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

587 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

588 ((
uöt32_t
Ë
sAœrm
->
AœrmTime
.
Sec⁄ds
) | \

589 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

590 ((
uöt32_t
)(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

591 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

592 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

594 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

596 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((uöt32_t)(
sAœrm
->
AœrmTime
.
SubSec⁄ds
Ë| (uöt32_t)(sAœrm->
AœrmSubSec⁄dMask
));

600 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

603 if(
sAœrm
->
Aœrm
 =
RTC_ALARM_A
)

606 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

609 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

611 
tick°¨t
 = 
	`HAL_GëTick
();

613 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

615 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

618 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

620 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

623 
	`__HAL_UNLOCK
(
hπc
);

625  
HAL_TIMEOUT
;

629 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

630 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

632 
hπc
->
In°™˚
->
ALRMASSR
 = 
sub£c⁄dtm¥eg
;

635 
	`__HAL_RTC_ALARMA_ENABLE
(
hπc
);

637 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hπc
,
RTC_IT_ALRA
);

642 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

645 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
);

647 
tick°¨t
 = 
	`HAL_GëTick
();

649 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

651 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

654 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

656 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

659 
	`__HAL_UNLOCK
(
hπc
);

661  
HAL_TIMEOUT
;

665 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

666 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

668 
hπc
->
In°™˚
->
ALRMBSSR
 = 
sub£c⁄dtm¥eg
;

671 
	`__HAL_RTC_ALARMB_ENABLE
(
hπc
);

673 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hπc
, 
RTC_IT_ALRB
);

677 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
();

679 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
();

682 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

684 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

687 
	`__HAL_UNLOCK
(
hπc
);

689  
HAL_OK
;

690 
	}
}

707 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
Aœrm
, uöt32_à
F‹m©
)

709 
uöt32_t
 
tm¥eg
 = 0;

710 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

711 
uöt32_t
 
sub£c⁄dtm¥eg
 = 0;

715 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

716 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

718 if(
Aœrm
 =
RTC_ALARM_A
)

721 
sAœrm
->
Aœrm
 = 
RTC_ALARM_A
;

723 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
ALRMAR
);

724 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

725 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((
hπc
->
In°™˚
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

730 
sAœrm
->
Aœrm
 = 
RTC_ALARM_B
;

732 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
ALRMBR
);

733 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

734 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((
hπc
->
In°™˚
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

739 
sAœrm
->
AœrmTime
.
Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | 
RTC_ALRMAR_HU
)) >> 16);

740 
sAœrm
->
AœrmTime
.
Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | 
RTC_ALRMAR_MNU
)) >> 8);

741 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | 
RTC_ALRMAR_SU
));

742 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

743 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

744 
sAœrm
->
AœrmTime
.
SubSec⁄ds
 = (
uöt32_t
Ë
sub£c⁄dtm¥eg
;

746 
sAœrm
->
AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

747 
sAœrm
->
AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

748 
sAœrm
->
AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALARMMASK_ALL
);

750 if(
F‹m©
 =
RTC_FORMAT_BIN
)

752 
sAœrm
->
AœrmTime
.
Hours
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Hours);

753 
sAœrm
->
AœrmTime
.
Möuãs
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Minutes);

754 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Seconds);

755 
sAœrm
->
AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmDateWeekDay);

758  
HAL_OK
;

759 
	}
}

796 
HAL_SètusTy≥Def
 
	$HAL_RTC_WaôF‹Synchro
(
RTC_H™dÀTy≥Def
* 
hπc
)

798 
uöt32_t
 
tick°¨t
 = 0;

800 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

802 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

806 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

808 
tick°¨t
 = 
	`HAL_GëTick
();

811 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RSF
Ë=(
uöt32_t
)
RESET
)

813 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

815  
HAL_TIMEOUT
;

820  
HAL_OK
;

821 
	}
}

872 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
)

874 
uöt32_t
 
tm¥eg
 = 0;

877 
	`as£π_∑øm
(
	`IS_TIMESTAMP_EDGE
(
TimeSèmpEdge
));

880 
	`__HAL_LOCK
(
hπc
);

882 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

885 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

887 
tm¥eg
|
TimeSèmpEdge
;

890 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

893 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

895 
	`__HAL_RTC_TIMESTAMP_ENABLE
(
hπc
);

898 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

901 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

904 
	`__HAL_UNLOCK
(
hπc
);

906  
HAL_OK
;

907 
	}
}

923 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTimeSèmp_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
)

925 
uöt32_t
 
tm¥eg
 = 0;

928 
	`as£π_∑øm
(
	`IS_TIMESTAMP_EDGE
(
TimeSèmpEdge
));

931 
	`__HAL_LOCK
(
hπc
);

933 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

936 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

938 
tm¥eg
 |
TimeSèmpEdge
;

941 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

944 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

946 
	`__HAL_RTC_TIMESTAMP_ENABLE
(
hπc
);

949 
	`__HAL_RTC_TIMESTAMP_ENABLE_IT
(
hπc
,
RTC_IT_TS
);

952 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
();

954 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE
();

957 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

959 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

962 
	`__HAL_UNLOCK
(
hπc
);

964  
HAL_OK
;

965 
	}
}

973 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
)

975 
uöt32_t
 
tm¥eg
 = 0;

978 
	`__HAL_LOCK
(
hπc
);

980 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

983 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

986 
	`__HAL_RTC_TIMESTAMP_DISABLE_IT
(
hπc
, 
RTC_IT_TS
);

989 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

992 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

995 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

997 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1000 
	`__HAL_UNLOCK
(
hπc
);

1002  
HAL_OK
;

1003 
	}
}

1017 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_GëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
* 
sTimeSèmp
, 
RTC_D©eTy≥Def
* 
sTimeSèmpD©e
, 
uöt32_t
 
F‹m©
)

1019 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

1022 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1025 
tm±ime
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

1026 
tmpd©e
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

1029 
sTimeSèmp
->
Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

1030 
sTimeSèmp
->
Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

1031 
sTimeSèmp
->
Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

1032 
sTimeSèmp
->
TimeF‹m©
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

1033 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1034 
sTimeSèmp
->
SubSec⁄ds
 = (
uöt32_t
)((
hπc
->
In°™˚
->
TSSSR
Ë& 
RTC_TSSSR_SS
);

1038 
sTimeSèmpD©e
->
Yór
 = 0;

1039 
sTimeSèmpD©e
->
M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1040 
sTimeSèmpD©e
->
D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1041 
sTimeSèmpD©e
->
WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

1044 if(
F‹m©
 =
RTC_FORMAT_BIN
)

1047 
sTimeSèmp
->
Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Hours);

1048 
sTimeSèmp
->
Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Minutes);

1049 
sTimeSèmp
->
Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Seconds);

1052 
sTimeSèmpD©e
->
M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->Month);

1053 
sTimeSèmpD©e
->
D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->Date);

1054 
sTimeSèmpD©e
->
WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->WeekDay);

1058 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TSF
);

1060  
HAL_OK
;

1061 
	}
}

1071 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
)

1073 
uöt32_t
 
tm¥eg
 = 0;

1076 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

1077 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

1078 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1079 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
sTam≥r
->
Fûãr
));

1080 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
sTam≥r
->
Sam∂ögFªquícy
));

1081 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
sTam≥r
->
Pªch¨geDuøti⁄
));

1082 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PULLUP_STATE
(
sTam≥r
->
Tam≥rPuŒUp
));

1083 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
(
sTam≥r
->
TimeSèmpOnTam≥rDëe˘i⁄
));

1087 
	`__HAL_LOCK
(
hπc
);

1089 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1091 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1092 if((
sTam≥r
->
Triggî
 =
RTC_TAMPERTRIGGER_RISINGEDGE
))

1095 
sTam≥r
->
Triggî
 = 
RTC_TAMPERTRIGGER_RISINGEDGE
;

1099 
sTam≥r
->
Triggî
 = (
uöt32_t
)(sTam≥r->
Tam≥r
 << 1);

1102 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)sTam≥r->
Triggî
 | (uöt32_t)sTam≥r->
Fûãr
 |\

1103 (
uöt32_t
)
sTam≥r
->
Sam∂ögFªquícy
 | (uöt32_t)sTam≥r->
Pªch¨geDuøti⁄
 |\

1104 (
uöt32_t
)
sTam≥r
->
Tam≥rPuŒUp
 | sTam≥r->
TimeSèmpOnTam≥rDëe˘i⁄
);

1106 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
sTam≥r
->
Tam≥r
 | (uöt32_t)(sTam≥r->Tam≥∏<< 1Ë| (uöt32_t)
RTC_TAFCR_TAMPTS
 |\

1107 (
uöt32_t
)
RTC_TAFCR_TAMPFREQ
 | (uöt32_t)
RTC_TAFCR_TAMPFLT
 | (uöt32_t)
RTC_TAFCR_TAMPPRCH
 |\

1108 (
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
 | (uöt32_t)
RTC_TAFCR_TAMPIE
);

1110 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)(sTam≥r->
Triggî
));

1112 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
RTC_TAFCR_TAMP1E
 | (uöt32_t)
RTC_TAFCR_TAMP1TRG
);

1115 
hπc
->
In°™˚
->
TAFCR
 |
tm¥eg
;

1117 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1120 
	`__HAL_UNLOCK
(
hπc
);

1122  
HAL_OK
;

1123 
	}
}

1133 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
)

1135 
uöt32_t
 
tm¥eg
 = 0;

1138 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

1139 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

1140 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1141 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
sTam≥r
->
Fûãr
));

1142 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
sTam≥r
->
Sam∂ögFªquícy
));

1143 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
sTam≥r
->
Pªch¨geDuøti⁄
));

1144 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PULLUP_STATE
(
sTam≥r
->
Tam≥rPuŒUp
));

1145 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
(
sTam≥r
->
TimeSèmpOnTam≥rDëe˘i⁄
));

1149 
	`__HAL_LOCK
(
hπc
);

1151 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1153 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1155 if((
sTam≥r
->
Triggî
 =
RTC_TAMPERTRIGGER_RISINGEDGE
))

1157 
sTam≥r
->
Triggî
 = 
RTC_TAMPERTRIGGER_RISINGEDGE
;

1161 
sTam≥r
->
Triggî
 = (
uöt32_t
Ë(sTam≥r->
Tam≥r
<<1);

1164 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)sTam≥r->
Triggî
 | (uöt32_t)sTam≥r->
Fûãr
 |\

1165 (
uöt32_t
)
sTam≥r
->
Sam∂ögFªquícy
 | (uöt32_t)sTam≥r->
Pªch¨geDuøti⁄
 |\

1166 (
uöt32_t
)
sTam≥r
->
Tam≥rPuŒUp
 | sTam≥r->
TimeSèmpOnTam≥rDëe˘i⁄
);

1168 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
sTam≥r
->
Tam≥r
 | (uöt32_t)(sTam≥r->Tam≥∏<< 1Ë| (uöt32_t)
RTC_TAFCR_TAMPTS
 |\

1169 (
uöt32_t
)
RTC_TAFCR_TAMPFREQ
 | (uöt32_t)
RTC_TAFCR_TAMPFLT
 | (uöt32_t)
RTC_TAFCR_TAMPPRCH
 |\

1170 (
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
);

1172 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)sTam≥r->
Triggî
);

1174 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
RTC_TAFCR_TAMP1E
 | (uöt32_t)
RTC_TAFCR_TAMP1TRG
 | (uöt32_t)
RTC_TAFCR_TAMPIE
);

1176 
hπc
->
In°™˚
->
TAFCR
 |
tm¥eg
;

1179 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPIE
;

1182 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
();

1184 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE
();

1186 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1189 
	`__HAL_UNLOCK
(
hπc
);

1191  
HAL_OK
;

1192 
	}
}

1202 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Tam≥r
)

1204 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
Tam≥r
));

1207 
	`__HAL_LOCK
(
hπc
);

1209 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1212 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
Tam≥r
;

1214 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1217 
	`__HAL_UNLOCK
(
hπc
);

1219  
HAL_OK
;

1220 
	}
}

1228 
	$HAL_RTCEx_Tam≥rTimeSèmpIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

1231 if(
	`__HAL_RTC_TIMESTAMP_GET_IT_SOURCE
(
hπc
, 
RTC_IT_TS
Ë!
RESET
)

1234 if(
	`__HAL_RTC_TIMESTAMP_GET_FLAG
(
hπc
, 
RTC_FLAG_TSF
Ë!
RESET
)

1237 
	`HAL_RTCEx_TimeSèmpEvítCÆlback
(
hπc
);

1240 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TSF
);

1245 if(
	`__HAL_RTC_TAMPER_GET_IT_SOURCE
(
hπc
, 
RTC_IT_TAMP
 | 
RTC_IT_TAMP1
Ë!
RESET
)

1248 if(
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
Ë!
RESET
)

1251 
	`HAL_RTCEx_Tam≥r1EvítCÆlback
(
hπc
);

1254 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
);

1258 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1260 if(
	`__HAL_RTC_TAMPER_GET_IT_SOURCE
(
hπc
, 
RTC_IT_TAMP
 | 
RTC_IT_TAMP2
Ë!
RESET
)

1263 if(
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP2F
Ë!
RESET
)

1266 
	`HAL_RTCEx_Tam≥r2EvítCÆlback
(
hπc
);

1269 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP2F
);

1274 if(
	`__HAL_RTC_TAMPER_GET_IT_SOURCE
(
hπc
, 
RTC_IT_TAMP
 | 
RTC_IT_TAMP3
Ë!
RESET
)

1277 if(
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP3F
Ë!
RESET
)

1280 
	`HAL_RTCEx_Tam≥r3EvítCÆlback
(
hπc
);

1283 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP3F
);

1289 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
();

1292 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1293 
	}
}

1301 
__wók
 
	$HAL_RTCEx_TimeSèmpEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1304 
	`UNUSED
(
hπc
);

1309 
	}
}

1317 
__wók
 
	$HAL_RTCEx_Tam≥r1EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1320 
	`UNUSED
(
hπc
);

1325 
	}
}

1327 #i‡
deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1334 
__wók
 
	$HAL_RTCEx_Tam≥r2EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1337 
	`UNUSED
(
hπc
);

1342 
	}
}

1349 
__wók
 
	$HAL_RTCEx_Tam≥r3EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1352 
	`UNUSED
(
hπc
);

1357 
	}
}

1367 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹TimeSèmpEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1369 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1371 
	`__HAL_RTC_TIMESTAMP_GET_FLAG
(
hπc
, 
RTC_FLAG_TSF
Ë=
RESET
)

1373 if(
	`__HAL_RTC_TIMESTAMP_GET_FLAG
(
hπc
, 
RTC_FLAG_TSOVF
Ë!
RESET
)

1376 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TSOVF
);

1379 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1381  
HAL_ERROR
;

1384 if(
Timeout
 !
HAL_MAX_DELAY
)

1386 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1388 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1389  
HAL_TIMEOUT
;

1395 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1397  
HAL_OK
;

1398 
	}
}

1407 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r1Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1409 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1412 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
,
RTC_FLAG_TAMP1F
)=
RESET
)

1414 if(
Timeout
 !
HAL_MAX_DELAY
)

1416 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1418 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1419  
HAL_TIMEOUT
;

1425 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP1F
);

1428 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1430  
HAL_OK
;

1431 
	}
}

1433 #i‡
deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

1441 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r2Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1443 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1446 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
,
RTC_FLAG_TAMP2F
Ë=
RESET
)

1448 if(
Timeout
 !
HAL_MAX_DELAY
)

1450 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1452 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1453  
HAL_TIMEOUT
;

1459 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP2F
);

1462 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1464  
HAL_OK
;

1465 
	}
}

1473 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r3Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1475 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1478 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
,
RTC_FLAG_TAMP3F
Ë=
RESET
)

1480 if(
Timeout
 !
HAL_MAX_DELAY
)

1482 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1484 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1485  
HAL_TIMEOUT
;

1491 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP3F
);

1494 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1496  
HAL_OK
;

1497 
	}
}

1525 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
)

1527 
uöt32_t
 
tick°¨t
 = 0;

1530 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
WakeUpClock
));

1531 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
WakeUpCou¡î
));

1534 
	`__HAL_LOCK
(
hπc
);

1536 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1539 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1542 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_WUTE
Ë!
RESET
){

1543 
tick°¨t
 = 
	`HAL_GëTick
();

1546 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
SET
)

1548 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1551 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1553 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1556 
	`__HAL_UNLOCK
(
hπc
);

1558  
HAL_TIMEOUT
;

1563 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

1565 
tick°¨t
 = 
	`HAL_GëTick
();

1568 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

1570 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1573 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1575 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1578 
	`__HAL_UNLOCK
(
hπc
);

1580  
HAL_TIMEOUT
;

1585 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1588 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
WakeUpClock
;

1591 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)
WakeUpCou¡î
;

1594 
	`__HAL_RTC_WAKEUPTIMER_ENABLE
(
hπc
);

1597 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1599 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1602 
	`__HAL_UNLOCK
(
hπc
);

1604  
HAL_OK
;

1605 
	}
}

1614 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëWakeUpTimî_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
)

1616 
uöt32_t
 
tick°¨t
 = 0;

1619 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
WakeUpClock
));

1620 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
WakeUpCou¡î
));

1623 
	`__HAL_LOCK
(
hπc
);

1625 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1628 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1631 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_WUTE
Ë!
RESET
){

1632 
tick°¨t
 = 
	`HAL_GëTick
();

1635 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
SET
)

1637 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1640 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1642 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1645 
	`__HAL_UNLOCK
(
hπc
);

1647  
HAL_TIMEOUT
;

1653 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

1656 
	`__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_WUTF
);

1658 
tick°¨t
 = 
	`HAL_GëTick
();

1661 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

1663 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1666 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1668 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1671 
	`__HAL_UNLOCK
(
hπc
);

1673  
HAL_TIMEOUT
;

1678 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)
WakeUpCou¡î
;

1681 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1684 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
WakeUpClock
;

1687 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
();

1689 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE
();

1692 
	`__HAL_RTC_WAKEUPTIMER_ENABLE_IT
(
hπc
,
RTC_IT_WUT
);

1695 
	`__HAL_RTC_WAKEUPTIMER_ENABLE
(
hπc
);

1698 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1700 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1703 
	`__HAL_UNLOCK
(
hπc
);

1705  
HAL_OK
;

1706 
	}
}

1714 
uöt32_t
 
	$HAL_RTCEx_Dó˘iv©eWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
)

1716 
uöt32_t
 
tick°¨t
 = 0;

1719 
	`__HAL_LOCK
(
hπc
);

1721 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1724 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1727 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

1730 
	`__HAL_RTC_WAKEUPTIMER_DISABLE_IT
(
hπc
,
RTC_IT_WUT
);

1732 
tick°¨t
 = 
	`HAL_GëTick
();

1734 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

1736 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1739 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1741 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1744 
	`__HAL_UNLOCK
(
hπc
);

1746  
HAL_TIMEOUT
;

1751 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1753 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1756 
	`__HAL_UNLOCK
(
hπc
);

1758  
HAL_OK
;

1759 
	}
}

1767 
uöt32_t
 
	$HAL_RTCEx_GëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
)

1770  ((
uöt32_t
)(
hπc
->
In°™˚
->
WUTR
 & 
RTC_WUTR_WUT
));

1771 
	}
}

1779 
	$HAL_RTCEx_WakeUpTimîIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

1782 if(
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTF
Ë!
RESET
)

1785 
	`HAL_RTCEx_WakeUpTimîEvítCÆlback
(
hπc
);

1788 
	`__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_WUTF
);

1793 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
();

1796 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1797 
	}
}

1805 
__wók
 
	$HAL_RTCEx_WakeUpTimîEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1808 
	`UNUSED
(
hπc
);

1813 
	}
}

1822 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹WakeUpTimîEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1824 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1826 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTF
Ë=
RESET
)

1828 if(
Timeout
 !
HAL_MAX_DELAY
)

1830 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1832 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1834  
HAL_TIMEOUT
;

1840 
	`__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_WUTF
);

1843 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1845  
HAL_OK
;

1846 
	}
}

1888 
	$HAL_RTCEx_BKUPWrôe
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
, uöt32_à
D©a
)

1890 
uöt32_t
 
tmp
 = 0;

1893 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

1895 
tmp
 = (
uöt32_t
)&(
hπc
->
In°™˚
->
BKP0R
);

1896 
tmp
 +(
BackupRegi°î
 * 4);

1899 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

1900 
	}
}

1911 
uöt32_t
 
	$HAL_RTCEx_BKUPRód
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
)

1913 
uöt32_t
 
tmp
 = 0;

1916 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

1918 
tmp
 = (
uöt32_t
)&(
hπc
->
In°™˚
->
BKP0R
);

1919 
tmp
 +(
BackupRegi°î
 * 4);

1922  (*(
__IO
 
uöt32_t
 *)
tmp
);

1923 
	}
}

1942 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëCﬂr£CÆib
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
CÆibSign
, uöt32_à
VÆue
)

1945 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
CÆibSign
));

1946 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1949 
	`__HAL_LOCK
(
hπc
);

1951 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1954 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1957 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1960 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1963 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1966 
	`__HAL_UNLOCK
(
hπc
);

1968  
HAL_ERROR
;

1973 
	`__HAL_RTC_COARSE_CALIB_ENABLE
(
hπc
);

1976 
hπc
->
In°™˚
->
CALIBR
 = (
uöt32_t
)(
CÆibSign
|
VÆue
);

1979 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

1983 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1986 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1989 
	`__HAL_UNLOCK
(
hπc
);

1991  
HAL_OK
;

1992 
	}
}

2000 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eCﬂr£CÆib
(
RTC_H™dÀTy≥Def
* 
hπc
)

2003 
	`__HAL_LOCK
(
hπc
);

2005 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2008 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2011 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

2014 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2017 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

2020 
	`__HAL_UNLOCK
(
hπc
);

2022  
HAL_ERROR
;

2027 
	`__HAL_RTC_COARSE_CALIB_DISABLE
(
hπc
);

2030 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

2034 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2037 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2040 
	`__HAL_UNLOCK
(
hπc
);

2042  
HAL_OK
;

2043 
	}
}

2045 #i‡
deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

2066 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSmoŸhCÆib
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
SmoŸhCÆibPîiod
, uöt32_à
SmoŸhCÆibPlusPul£s
, uöt32_à
SmoŸhCÆibMöusPul£sVÆue
)

2068 
uöt32_t
 
tick°¨t
 = 0;

2071 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
SmoŸhCÆibPîiod
));

2072 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
SmoŸhCÆibPlusPul£s
));

2073 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
SmoŸhCÆibMöusPul£sVÆue
));

2076 
	`__HAL_LOCK
(
hπc
);

2078 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2081 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2084 if((
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

2086 
tick°¨t
 = 
	`HAL_GëTick
();

2089 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

2091 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

2094 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2097 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

2100 
	`__HAL_UNLOCK
(
hπc
);

2102  
HAL_TIMEOUT
;

2108 
hπc
->
In°™˚
->
CALR
 = (
uöt32_t
)((uöt32_t)
SmoŸhCÆibPîiod
 | (uöt32_t)
SmoŸhCÆibPlusPul£s
 | (uöt32_t)
SmoŸhCÆibMöusPul£sVÆue
);

2111 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2114 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2117 
	`__HAL_UNLOCK
(
hπc
);

2119  
HAL_OK
;

2120 
	}
}

2135 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSynchroShi·
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
Shi·Add1S
, uöt32_à
Shi·SubFS
)

2137 
uöt32_t
 
tick°¨t
 = 0;

2140 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
Shi·Add1S
));

2141 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
Shi·SubFS
));

2144 
	`__HAL_LOCK
(
hπc
);

2146 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2149 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2151 
tick°¨t
 = 
	`HAL_GëTick
();

2154 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2156 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

2159 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2161 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

2164 
	`__HAL_UNLOCK
(
hπc
);

2166  
HAL_TIMEOUT
;

2171 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2174 
hπc
->
In°™˚
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
Shi·SubFS
Ë| (uöt32_t)(
Shi·Add1S
);

2177 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

2180 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2182 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

2185 
	`__HAL_UNLOCK
(
hπc
);

2187  
HAL_ERROR
;

2193 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2196 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

2199 
	`__HAL_UNLOCK
(
hπc
);

2201  
HAL_ERROR
;

2205 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2208 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2211 
	`__HAL_UNLOCK
(
hπc
);

2213  
HAL_OK
;

2214 
	}
}

2218 #i‡
deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

2229 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
CÆibOuçut
)

2236 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
* 
hπc
)

2239 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

2241 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
CÆibOuçut
));

2245 
	`__HAL_LOCK
(
hπc
);

2247 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2250 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2252 #i‡
	`deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

2254 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_COSEL
;

2257 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
CÆibOuçut
;

2260 
	`__HAL_RTC_CALIBRATION_OUTPUT_ENABLE
(
hπc
);

2263 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2266 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2269 
	`__HAL_UNLOCK
(
hπc
);

2271  
HAL_OK
;

2272 
	}
}

2280 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
* 
hπc
)

2283 
	`__HAL_LOCK
(
hπc
);

2285 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2288 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2290 
	`__HAL_RTC_CALIBRATION_OUTPUT_DISABLE
(
hπc
);

2293 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2296 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2299 
	`__HAL_UNLOCK
(
hπc
);

2301  
HAL_OK
;

2302 
	}
}

2310 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëRefClock
(
RTC_H™dÀTy≥Def
* 
hπc
)

2313 
	`__HAL_LOCK
(
hπc
);

2315 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2318 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2321 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

2324 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2327 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

2330 
	`__HAL_UNLOCK
(
hπc
);

2332  
HAL_ERROR
;

2336 
	`__HAL_RTC_CLOCKREF_DETECTION_ENABLE
(
hπc
);

2339 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

2343 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2346 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2349 
	`__HAL_UNLOCK
(
hπc
);

2351  
HAL_OK
;

2352 
	}
}

2360 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eRefClock
(
RTC_H™dÀTy≥Def
* 
hπc
)

2363 
	`__HAL_LOCK
(
hπc
);

2365 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2368 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2371 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

2374 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2377 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

2380 
	`__HAL_UNLOCK
(
hπc
);

2382  
HAL_ERROR
;

2386 
	`__HAL_RTC_CLOCKREF_DETECTION_DISABLE
(
hπc
);

2389 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

2393 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2396 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2399 
	`__HAL_UNLOCK
(
hπc
);

2401  
HAL_OK
;

2402 
	}
}

2404 #i‡
deföed
(
STM32L100xBA
Ë|| deföed (
STM32L151xBA
Ë|| deföed (
STM32L152xBA
Ë|| deföed(
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed(
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed(
STM32L151xE
Ë|| deföed(
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

2413 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_E«bÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
* 
hπc
)

2416 
	`__HAL_LOCK
(
hπc
);

2418 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2421 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2424 
hπc
->
In°™˚
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

2427 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2430 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2433 
	`__HAL_UNLOCK
(
hπc
);

2435  
HAL_OK
;

2436 
	}
}

2446 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_DißbÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
* 
hπc
)

2449 
	`__HAL_LOCK
(
hπc
);

2451 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

2454 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

2457 
hπc
->
In°™˚
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

2460 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

2463 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2466 
	`__HAL_UNLOCK
(
hπc
);

2468  
HAL_OK
;

2469 
	}
}

2497 
__wók
 
	$HAL_RTCEx_AœrmBEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

2500 
	`UNUSED
(
hπc
);

2505 
	}
}

2514 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹AœrmBEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

2516 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

2518 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
Ë=
RESET
)

2520 if(
Timeout
 !
HAL_MAX_DELAY
)

2522 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2524 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

2525  
HAL_TIMEOUT
;

2531 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
);

2534 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

2536  
HAL_OK
;

2537 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi.c

90 
	~"°m32l1xx_hÆ.h
"

101 #ifde‡
HAL_SPI_MODULE_ENABLED


108 
	#SPI_TIMEOUT_VALUE
 10

	)

120 
SPI_TxClo£IRQH™dÀr
(
__SPI_H™dÀTy≥Def
 *
h•i
);

121 
SPI_TxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
);

122 
SPI_RxClo£IRQH™dÀr
(
__SPI_H™dÀTy≥Def
 *
h•i
);

123 
SPI_2LöesRxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
);

124 
SPI_RxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
);

125 
SPI_DMATønsmôC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

126 
SPI_DMARe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

127 
SPI_DMATønsmôRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

128 
SPI_DMAHÆfTønsmôC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

129 
SPI_DMAHÆfRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

130 
SPI_DMAHÆfTønsmôRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
);

131 
SPI_DMAEº‹
(
__DMA_H™dÀTy≥Def
 *
hdma
);

132 
HAL_SètusTy≥Def
 
SPI_WaôOnFœgU¡ûTimeout
(
__SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

183 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

186 
	`UNUSED
(
h•i
);

188  
HAL_ERROR
;

189 
	}
}

197 
HAL_SètusTy≥Def
 
	$HAL_SPI_DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

200 if(
h•i
 =
NULL
)

202  
HAL_ERROR
;

206 
	`__HAL_SPI_DISABLE
(
h•i
);

209 
	`HAL_SPI_M•DeInô
(
h•i
);

211 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

212 
h•i
->
Sèã
 = 
HAL_SPI_STATE_RESET
;

215 
	`__HAL_UNLOCK
(
h•i
);

217  
HAL_OK
;

218 
	}
}

226 
__wók
 
	$HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

229 
	`UNUSED
(
h•i
);

234 
	}
}

242 
__wók
 
	$HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

245 
	`UNUSED
(
h•i
);

250 
	}
}

297 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

300 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

302 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

304  
HAL_ERROR
;

308 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

311 
	`__HAL_LOCK
(
h•i
);

314 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

315 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

317 
h•i
->
pTxBuffPå
 = 
pD©a
;

318 
h•i
->
TxX„rSize
 = 
Size
;

319 
h•i
->
TxX„rCou¡
 = 
Size
;

322 
h•i
->
TxISR
 = 0;

323 
h•i
->
RxISR
 = 0;

324 
h•i
->
pRxBuffPå
 = 
NULL
;

325 
h•i
->
RxX„rSize
 = 0;

326 
h•i
->
RxX„rCou¡
 = 0;

329 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

331 
	`SPI_RESET_CRC
(
h•i
);

334 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

337 
	`SPI_1LINE_TX
(
h•i
);

341 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

344 
	`__HAL_SPI_ENABLE
(
h•i
);

348 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

350 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)|| (h•i->
TxX„rCou¡
 == 0x01))

352 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

353 
h•i
->
TxX„rCou¡
--;

355 
h•i
->
TxX„rCou¡
 > 0)

358 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

360  
HAL_TIMEOUT
;

362 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

363 
h•i
->
TxX„rCou¡
--;

366 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

368 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

374 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (h•i->
TxX„rCou¡
 == 0x01))

376 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

377 
h•i
->
pTxBuffPå
+=2;

378 
h•i
->
TxX„rCou¡
--;

380 
h•i
->
TxX„rCou¡
 > 0)

383 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

385  
HAL_TIMEOUT
;

387 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

388 
h•i
->
pTxBuffPå
+=2;

389 
h•i
->
TxX„rCou¡
--;

392 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

394 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

399 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

401 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

402  
HAL_TIMEOUT
;

406 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

408 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

409  
HAL_TIMEOUT
;

413 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

415 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

418 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

421 
	`__HAL_UNLOCK
(
h•i
);

423  
HAL_OK
;

427  
HAL_BUSY
;

429 
	}
}

440 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

442 
__IO
 
uöt16_t
 
tm¥eg
 = 0;

444 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

446 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

448  
HAL_ERROR
;

452 
	`__HAL_LOCK
(
h•i
);

455 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

456 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

458 
h•i
->
pRxBuffPå
 = 
pD©a
;

459 
h•i
->
RxX„rSize
 = 
Size
;

460 
h•i
->
RxX„rCou¡
 = 
Size
;

463 
h•i
->
RxISR
 = 0;

464 
h•i
->
TxISR
 = 0;

465 
h•i
->
pTxBuffPå
 = 
NULL
;

466 
h•i
->
TxX„rSize
 = 0;

467 
h•i
->
TxX„rCou¡
 = 0;

470 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

472 
	`SPI_1LINE_RX
(
h•i
);

476 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

478 
	`SPI_RESET_CRC
(
h•i
);

481 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
))

484 
	`__HAL_UNLOCK
(
h•i
);

487  
	`HAL_SPI_TønsmôRe˚ive
(
h•i
, 
pD©a
,ÖD©a, 
Size
, 
Timeout
);

491 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

494 
	`__HAL_SPI_ENABLE
(
h•i
);

498 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

500 
h•i
->
RxX„rCou¡
 > 1)

503 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

505  
HAL_TIMEOUT
;

508 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

509 
h•i
->
RxX„rCou¡
--;

512 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

514 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

520 
h•i
->
RxX„rCou¡
 > 1)

523 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

525  
HAL_TIMEOUT
;

528 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

529 
h•i
->
pRxBuffPå
+=2;

530 
h•i
->
RxX„rCou¡
--;

533 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

535 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

540 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

542  
HAL_TIMEOUT
;

546 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

548 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

553 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

554 
h•i
->
pRxBuffPå
+=2;

556 
h•i
->
RxX„rCou¡
--;

559 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

561 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

563 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

564  
HAL_TIMEOUT
;

568 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

569 
	`UNUSED
(
tm¥eg
);

572 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

575 
	`__HAL_SPI_DISABLE
(
h•i
);

578 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

581 if((
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
Ë&& (
	`__HAL_SPI_GET_FLAG
(h•i, 
SPI_FLAG_CRCERR
Ë!
RESET
))

583 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

586 
	`SPI_RESET_CRC
(
h•i
);

589 
	`__HAL_UNLOCK
(
h•i
);

591  
HAL_ERROR
;

595 
	`__HAL_UNLOCK
(
h•i
);

597  
HAL_OK
;

601  
HAL_BUSY
;

603 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

617 
__IO
 
uöt16_t
 
tm¥eg
 = 0;

619 if((
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
Ë|| (h•i->Sèã =
HAL_SPI_STATE_BUSY_RX
))

621 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

623  
HAL_ERROR
;

627 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

630 
	`__HAL_LOCK
(
h•i
);

633 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

635 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

639 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

641 
h•i
->
pRxBuffPå
 = 
pRxD©a
;

642 
h•i
->
RxX„rSize
 = 
Size
;

643 
h•i
->
RxX„rCou¡
 = 
Size
;

645 
h•i
->
pTxBuffPå
 = 
pTxD©a
;

646 
h•i
->
TxX„rSize
 = 
Size
;

647 
h•i
->
TxX„rCou¡
 = 
Size
;

650 
h•i
->
RxISR
 = 0;

651 
h•i
->
TxISR
 = 0;

654 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

656 
	`SPI_RESET_CRC
(
h•i
);

660 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

663 
	`__HAL_SPI_ENABLE
(
h•i
);

667 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_16BIT
)

669 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| ((h•i->Inô.Modê=
SPI_MODE_MASTER
Ë&& (h•i->
TxX„rCou¡
 == 0x01)))

671 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

672 
h•i
->
pTxBuffPå
+=2;

673 
h•i
->
TxX„rCou¡
--;

675 if(
h•i
->
TxX„rCou¡
 == 0)

678 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

680 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

684 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

686  
HAL_TIMEOUT
;

689 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

690 
h•i
->
pRxBuffPå
+=2;

691 
h•i
->
RxX„rCou¡
--;

695 
h•i
->
TxX„rCou¡
 > 0)

698 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

700  
HAL_TIMEOUT
;

703 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

704 
h•i
->
pTxBuffPå
+=2;

705 
h•i
->
TxX„rCou¡
--;

708 if((
h•i
->
TxX„rCou¡
 =0Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

710 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

714 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

716  
HAL_TIMEOUT
;

719 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

720 
h•i
->
pRxBuffPå
+=2;

721 
h•i
->
RxX„rCou¡
--;

724 if(
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)

727 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

729  
HAL_TIMEOUT
;

732 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

733 
h•i
->
pRxBuffPå
+=2;

734 
h•i
->
RxX„rCou¡
--;

741 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| ((h•i->Inô.Modê=
SPI_MODE_MASTER
Ë&& (h•i->
TxX„rCou¡
 == 0x01)))

743 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

744 
h•i
->
TxX„rCou¡
--;

746 if(
h•i
->
TxX„rCou¡
 == 0)

749 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

751 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

755 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

757  
HAL_TIMEOUT
;

760 (*
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

761 
h•i
->
RxX„rCou¡
--;

765 
h•i
->
TxX„rCou¡
 > 0)

768 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

770  
HAL_TIMEOUT
;

773 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

774 
h•i
->
TxX„rCou¡
--;

777 if((
h•i
->
TxX„rCou¡
 =0Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

779 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

783 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

785  
HAL_TIMEOUT
;

788 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

789 
h•i
->
RxX„rCou¡
--;

791 if(
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)

794 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

796  
HAL_TIMEOUT
;

799 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

800 
h•i
->
RxX„rCou¡
--;

806 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

809 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

811 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

812  
HAL_TIMEOUT
;

815 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

816 
	`UNUSED
(
tm¥eg
);

820 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

822 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

823  
HAL_TIMEOUT
;

826 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

829 if((
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
Ë&& (
	`__HAL_SPI_GET_FLAG
(h•i, 
SPI_FLAG_CRCERR
Ë!
RESET
))

831 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

834 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

836 
	`SPI_RESET_CRC
(
h•i
);

840 
	`__HAL_UNLOCK
(
h•i
);

842  
HAL_ERROR
;

846 
	`__HAL_UNLOCK
(
h•i
);

848  
HAL_OK
;

852  
HAL_BUSY
;

854 
	}
}

864 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

866 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

868 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

870  
HAL_ERROR
;

874 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

877 
	`__HAL_LOCK
(
h•i
);

880 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

881 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

883 
h•i
->
TxISR
 = &
SPI_TxISR
;

884 
h•i
->
pTxBuffPå
 = 
pD©a
;

885 
h•i
->
TxX„rSize
 = 
Size
;

886 
h•i
->
TxX„rCou¡
 = 
Size
;

889 
h•i
->
RxISR
 = 0;

890 
h•i
->
pRxBuffPå
 = 
NULL
;

891 
h•i
->
RxX„rSize
 = 0;

892 
h•i
->
RxX„rCou¡
 = 0;

895 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

897 
	`SPI_1LINE_TX
(
h•i
);

901 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

903 
	`SPI_RESET_CRC
(
h•i
);

906 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

908 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
));

912 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

915 
	`__HAL_UNLOCK
(
h•i
);

918 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

921 
	`__HAL_SPI_ENABLE
(
h•i
);

924  
HAL_OK
;

928  
HAL_BUSY
;

930 
	}
}

940 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

942 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

944 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

946  
HAL_ERROR
;

950 
	`__HAL_LOCK
(
h•i
);

953 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

954 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

956 
h•i
->
RxISR
 = &
SPI_RxISR
;

957 
h•i
->
pRxBuffPå
 = 
pD©a
;

958 
h•i
->
RxX„rSize
 = 
Size
;

959 
h•i
->
RxX„rCou¡
 = 
Size
 ;

962 
h•i
->
TxISR
 = 0;

963 
h•i
->
pTxBuffPå
 = 
NULL
;

964 
h•i
->
TxX„rSize
 = 0;

965 
h•i
->
TxX„rCou¡
 = 0;

968 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

970 
	`SPI_1LINE_RX
(
h•i
);

972 if((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

975 
	`__HAL_UNLOCK
(
h•i
);

978  
	`HAL_SPI_TønsmôRe˚ive_IT
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

982 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

984 
	`SPI_RESET_CRC
(
h•i
);

988 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

991 
	`__HAL_UNLOCK
(
h•i
);

998 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1001 
	`__HAL_SPI_ENABLE
(
h•i
);

1004  
HAL_OK
;

1008  
HAL_BUSY
;

1010 
	}
}

1021 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

1024 if((
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
) || \

1025 ((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)))

1027 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

1029  
HAL_ERROR
;

1033 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1036 
	`__HAL_LOCK
(
h•i
);

1039 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1041 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1045 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1047 
h•i
->
TxISR
 = &
SPI_TxISR
;

1048 
h•i
->
pTxBuffPå
 = 
pTxD©a
;

1049 
h•i
->
TxX„rSize
 = 
Size
;

1050 
h•i
->
TxX„rCou¡
 = 
Size
;

1052 
h•i
->
RxISR
 = &
SPI_2LöesRxISR
;

1053 
h•i
->
pRxBuffPå
 = 
pRxD©a
;

1054 
h•i
->
RxX„rSize
 = 
Size
;

1055 
h•i
->
RxX„rCou¡
 = 
Size
;

1058 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1060 
	`SPI_RESET_CRC
(
h•i
);

1064 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1067 
	`__HAL_UNLOCK
(
h•i
);

1070 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1073 
	`__HAL_SPI_ENABLE
(
h•i
);

1076  
HAL_OK
;

1080  
HAL_BUSY
;

1082 
	}
}

1092 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1094 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

1096 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1098  
HAL_ERROR
;

1102 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

1105 
	`__HAL_LOCK
(
h•i
);

1108 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

1109 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1111 
h•i
->
pTxBuffPå
 = 
pD©a
;

1112 
h•i
->
TxX„rSize
 = 
Size
;

1113 
h•i
->
TxX„rCou¡
 = 
Size
;

1116 
h•i
->
TxISR
 = 0;

1117 
h•i
->
RxISR
 = 0;

1118 
h•i
->
pRxBuffPå
 = 
NULL
;

1119 
h•i
->
RxX„rSize
 = 0;

1120 
h•i
->
RxX„rCou¡
 = 0;

1123 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1125 
	`SPI_1LINE_TX
(
h•i
);

1129 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1131 
	`SPI_RESET_CRC
(
h•i
);

1135 
h•i
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôC∂t
;

1138 
h•i
->
hdm©x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôC∂t
;

1141 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1144 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
, h•i->
TxX„rCou¡
);

1147 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1150 
	`__HAL_UNLOCK
(
h•i
);

1153 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1156 
	`__HAL_SPI_ENABLE
(
h•i
);

1159  
HAL_OK
;

1163  
HAL_BUSY
;

1165 
	}
}

1176 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1178 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

1180 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1182  
HAL_ERROR
;

1186 
	`__HAL_LOCK
(
h•i
);

1189 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1190 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1192 
h•i
->
pRxBuffPå
 = 
pD©a
;

1193 
h•i
->
RxX„rSize
 = 
Size
;

1194 
h•i
->
RxX„rCou¡
 = 
Size
;

1197 
h•i
->
RxISR
 = 0;

1198 
h•i
->
TxISR
 = 0;

1199 
h•i
->
pTxBuffPå
 = 
NULL
;

1200 
h•i
->
TxX„rSize
 = 0;

1201 
h•i
->
TxX„rCou¡
 = 0;

1204 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1206 
	`SPI_1LINE_RX
(
h•i
);

1208 if((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)&&(h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1211 
	`__HAL_UNLOCK
(
h•i
);

1214  
	`HAL_SPI_TønsmôRe˚ive_DMA
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

1218 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1220 
	`SPI_RESET_CRC
(
h•i
);

1224 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1227 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1230 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1233 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
, h•i->
RxX„rCou¡
);

1236 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1239 
	`__HAL_UNLOCK
(
h•i
);

1242 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1245 
	`__HAL_SPI_ENABLE
(
h•i
);

1248  
HAL_OK
;

1252  
HAL_BUSY
;

1254 
	}
}

1266 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

1268 if((
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
) || \

1269 ((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)))

1271 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

1273  
HAL_ERROR
;

1277 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1280 
	`__HAL_LOCK
(
h•i
);

1283 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1285 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1289 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1291 
h•i
->
pTxBuffPå
 = (
uöt8_t
*)
pTxD©a
;

1292 
h•i
->
TxX„rSize
 = 
Size
;

1293 
h•i
->
TxX„rCou¡
 = 
Size
;

1295 
h•i
->
pRxBuffPå
 = (
uöt8_t
*)
pRxD©a
;

1296 
h•i
->
RxX„rSize
 = 
Size
;

1297 
h•i
->
RxX„rCou¡
 = 
Size
;

1300 
h•i
->
RxISR
 = 0;

1301 
h•i
->
TxISR
 = 0;

1304 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1306 
	`SPI_RESET_CRC
(
h•i
);

1310 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)

1313 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1315 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1320 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôRe˚iveC∂t
;

1322 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôRe˚iveC∂t
;

1326 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1329 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
, h•i->
RxX„rCou¡
);

1332 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1336 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1339 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1343 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
NULL
;

1347 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
, h•i->
TxX„rCou¡
);

1350 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1353 
	`__HAL_SPI_ENABLE
(
h•i
);

1357 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1360 
	`__HAL_UNLOCK
(
h•i
);

1362  
HAL_OK
;

1366  
HAL_BUSY
;

1368 
	}
}

1377 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAPau£
(
SPI_H™dÀTy≥Def
 *
h•i
)

1380 
	`__HAL_LOCK
(
h•i
);

1383 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1384 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1387 
	`__HAL_UNLOCK
(
h•i
);

1389  
HAL_OK
;

1390 
	}
}

1398 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAResume
(
SPI_H™dÀTy≥Def
 *
h•i
)

1401 
	`__HAL_LOCK
(
h•i
);

1404 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1405 
	`SET_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1408 
	`__HAL_UNLOCK
(
h•i
);

1410  
HAL_OK
;

1411 
	}
}

1419 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMASt›
(
SPI_H™dÀTy≥Def
 *
h•i
)

1428 if(
h•i
->
hdm©x
 !
NULL
)

1430 
	`HAL_DMA_Ab‹t
(
h•i
->
hdm©x
);

1433 if(
h•i
->
hdm¨x
 !
NULL
)

1435 
	`HAL_DMA_Ab‹t
(
h•i
->
hdm¨x
);

1439 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1440 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1442 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1444  
HAL_OK
;

1445 
	}
}

1453 
	$HAL_SPI_IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
)

1456 if((
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_RXNE
Ë!
RESET
Ë&& (
	`__HAL_SPI_GET_FLAG
(h•i, 
SPI_FLAG_RXNE
Ë!RESETË&& (__HAL_SPI_GET_FLAG(h•i, 
SPI_FLAG_OVR
) == RESET))

1458 
h•i
->
	`RxISR
(hspi);

1463 if((
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_TXE
Ë!
RESET
Ë&& (
	`__HAL_SPI_GET_FLAG
(h•i, 
SPI_FLAG_TXE
) != RESET))

1465 
h•i
->
	`TxISR
(hspi);

1469 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_ERR
Ë!
RESET
)

1472 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1474 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1475 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

1478 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_MODF
Ë!
RESET
)

1480 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_MODF
);

1481 
	`__HAL_SPI_CLEAR_MODFFLAG
(
h•i
);

1485 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_OVR
Ë!
RESET
)

1487 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_TX
)

1489 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_OVR
);

1490 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1495 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_FRE
Ë!
RESET
)

1497 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FRE
);

1498 
	`__HAL_SPI_CLEAR_FREFLAG
(
h•i
);

1502 if(
h•i
->
Eº‹Code
!=
HAL_SPI_ERROR_NONE
)

1504 
	`__HAL_SPI_DISABLE_IT
(
h•i
, 
SPI_IT_RXNE
 | 
SPI_IT_TXE
 | 
SPI_IT_ERR
);

1505 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1506 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1509 
	}
}

1517 
__wók
 
	$HAL_SPI_TxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1520 
	`UNUSED
(
h•i
);

1525 
	}
}

1533 
__wók
 
	$HAL_SPI_RxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1536 
	`UNUSED
(
h•i
);

1541 
	}
}

1549 
__wók
 
	$HAL_SPI_TxRxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1552 
	`UNUSED
(
h•i
);

1557 
	}
}

1565 
__wók
 
	$HAL_SPI_TxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1568 
	`UNUSED
(
h•i
);

1573 
	}
}

1581 
__wók
 
	$HAL_SPI_RxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1584 
	`UNUSED
(
h•i
);

1589 
	}
}

1597 
__wók
 
	$HAL_SPI_TxRxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1600 
	`UNUSED
(
h•i
);

1605 
	}
}

1613 
__wók
 
	$HAL_SPI_Eº‹CÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1616 
	`UNUSED
(
h•i
);

1623 
	}
}

1650 
HAL_SPI_SèãTy≥Def
 
	$HAL_SPI_GëSèã
(
SPI_H™dÀTy≥Def
 *
h•i
)

1652  
h•i
->
Sèã
;

1653 
	}
}

1661 
uöt32_t
 
	$HAL_SPI_GëEº‹
(
SPI_H™dÀTy≥Def
 *
h•i
)

1663  
h•i
->
Eº‹Code
;

1664 
	}
}

1687 
	$SPI_TxClo£IRQH™dÀr
(
__SPI_H™dÀTy≥Def
 *
h•i
)

1690 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1692 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1696 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 ));

1699 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_RXNE
Ë=
RESET
)

1701 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1704 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1706 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1710 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

1712 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1716 if(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

1719 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1722 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1723 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

1728 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1729 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

1735 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1737 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1740 
	}
}

1748 
	$SPI_TxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
)

1751 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1753 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

1758 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

1759 
h•i
->
pTxBuffPå
+=2;

1761 
h•i
->
TxX„rCou¡
--;

1763 if(
h•i
->
TxX„rCou¡
 == 0)

1765 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1768 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1770 
	`SPI_TxClo£IRQH™dÀr
(
h•i
);

1772 
	}
}

1780 
	$SPI_RxClo£IRQH™dÀr
(
__SPI_H™dÀTy≥Def
 *
h•i
)

1782 
__IO
 
uöt16_t
 
tm¥eg
 = 0;

1784 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1787 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1789 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1793 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

1794 
	`UNUSED
(
tm¥eg
);

1797 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1799 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1803 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1805 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

1808 
	`SPI_RESET_CRC
(
h•i
);

1813 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
));

1816 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_TXE
Ë=
RESET
)

1819 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1821 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

1824 
	`__HAL_SPI_DISABLE
(
h•i
);

1828 if(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

1831 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1834 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1835 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

1840 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1841 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

1847 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1849 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1852 
	}
}

1860 
	$SPI_2LöesRxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
)

1863 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1865 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

1870 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

1871 
h•i
->
pRxBuffPå
+=2;

1873 
h•i
->
RxX„rCou¡
--;

1875 if(
h•i
->
RxX„rCou¡
==0)

1877 
	`SPI_RxClo£IRQH™dÀr
(
h•i
);

1879 
	}
}

1887 
	$SPI_RxISR
(
__SPI_H™dÀTy≥Def
 *
h•i
)

1890 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1892 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

1897 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

1898 
h•i
->
pRxBuffPå
+=2;

1900 
h•i
->
RxX„rCou¡
--;

1903 if((
h•i
->
RxX„rCou¡
 =1Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1906 
	`SET_BIT
(
h•i
->
In°™˚
->
CR1
, 
SPI_CR1_CRCNEXT
);

1909 if(
h•i
->
RxX„rCou¡
 == 0)

1911 
	`SPI_RxClo£IRQH™dÀr
(
h•i
);

1913 
	}
}

1921 
	$SPI_DMATønsmôC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

1923 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1926 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CIRCULAR
) == 0)

1929 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1931 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1935 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1938 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1940 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

1943 
h•i
->
TxX„rCou¡
 = 0;

1944 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1948 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

1950 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1954 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

1956 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1960 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

1962 
	}
}

1970 
	$SPI_DMARe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

1972 
__IO
 
uöt16_t
 
tm¥eg
 = 0;

1974 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1977 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CIRCULAR
) == 0)

1979 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

1982 
	`__HAL_SPI_DISABLE
(
h•i
);

1986 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

1989 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

1992 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1995 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1997 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2001 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

2002 
	`UNUSED
(
tm¥eg
);

2005 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2007 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2011 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2013 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2014 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2018 
h•i
->
RxX„rCou¡
 = 0;

2019 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2022 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2024 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2028 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

2033 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

2035 
	}
}

2043 
	$SPI_DMATønsmôRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

2045 
__IO
 
uöt16_t
 
tm¥eg
 = 0;

2047 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2049 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CIRCULAR
) == 0)

2052 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2055 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë=
HAL_OK
)

2058 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2060 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2064 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

2065 
	`UNUSED
(
tm¥eg
);

2068 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2070 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_CRC
);

2071 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2076 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2078 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2082 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_TXDMAEN
);

2085 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2087 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_FLAG
);

2091 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
CR2
, 
SPI_CR2_RXDMAEN
);

2093 
h•i
->
TxX„rCou¡
 = 0;

2094 
h•i
->
RxX„rCou¡
 = 0;

2096 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2099 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2101 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2105 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

2110 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

2112 
	}
}

2120 
	$SPI_DMAHÆfTønsmôC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

2122 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2124 
	`HAL_SPI_TxHÆfC∂tCÆlback
(
h•i
);

2125 
	}
}

2133 
	$SPI_DMAHÆfRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

2135 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2137 
	`HAL_SPI_RxHÆfC∂tCÆlback
(
h•i
);

2138 
	}
}

2146 
	$SPI_DMAHÆfTønsmôRe˚iveC∂t
(
__DMA_H™dÀTy≥Def
 *
hdma
)

2148 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2150 
	`HAL_SPI_TxRxHÆfC∂tCÆlback
(
h•i
);

2151 
	}
}

2159 
	$SPI_DMAEº‹
(
__DMA_H™dÀTy≥Def
 *
hdma
)

2161 
SPI_H™dÀTy≥Def
* 
h•i
 = (SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2162 
h•i
->
TxX„rCou¡
 = 0;

2163 
h•i
->
RxX„rCou¡
 = 0;

2164 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2165 
	`SET_BIT
(
h•i
->
Eº‹Code
, 
HAL_SPI_ERROR_DMA
);

2166 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2167 
	}
}

2178 
HAL_SètusTy≥Def
 
	$SPI_WaôOnFœgU¡ûTimeout
(
__SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

2180 
uöt32_t
 
tick°¨t
 = 0;

2183 
tick°¨t
 = 
	`HAL_GëTick
();

2186 if(
Sètus
 =
RESET
)

2188 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
Fœg
Ë=
RESET
)

2190 if(
Timeout
 !
HAL_MAX_DELAY
)

2192 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2199 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

2202 
	`__HAL_SPI_DISABLE
(
h•i
);

2205 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2207 
	`SPI_RESET_CRC
(
h•i
);

2210 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2213 
	`__HAL_UNLOCK
(
h•i
);

2215  
HAL_TIMEOUT
;

2222 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
Fœg
Ë!
RESET
)

2224 if(
Timeout
 !
HAL_MAX_DELAY
)

2226 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2233 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

2236 
	`__HAL_SPI_DISABLE
(
h•i
);

2239 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2241 
	`SPI_RESET_CRC
(
h•i
);

2244 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2247 
	`__HAL_UNLOCK
(
h•i
);

2249  
HAL_TIMEOUT
;

2254  
HAL_OK
;

2255 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi_ex.c

44 
	~"°m32l1xx_hÆ.h
"

53 #ifde‡
HAL_SPI_MODULE_ENABLED


78 
HAL_SètusTy≥Def
 
	$HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

81 if(
h•i
 =
NULL
)

83  
HAL_ERROR
;

87 
	`as£π_∑øm
(
	`IS_SPI_ALL_INSTANCE
(
h•i
->
In°™˚
));

88 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
h•i
->
Inô
.
Mode
));

89 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
h•i
->
Inô
.
Dúe˘i⁄
));

90 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
h•i
->
Inô
.
D©aSize
));

91 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
h•i
->
Inô
.
CLKPﬁ¨ôy
));

92 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
h•i
->
Inô
.
CLKPha£
));

93 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
h•i
->
Inô
.
NSS
));

94 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h•i
->
Inô
.
BaudR©ePªsˇÀr
));

95 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
h•i
->
Inô
.
Fú°Bô
));

96 
	`as£π_∑øm
(
	`IS_SPI_TIMODE
(
h•i
->
Inô
.
TIMode
));

97 
	`as£π_∑øm
(
	`IS_SPI_CRC_CALCULATION
(
h•i
->
Inô
.
CRCCÆcuœti⁄
));

98 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
h•i
->
Inô
.
CRCPﬁynomül
));

100 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_RESET
)

103 
h•i
->
Lock
 = 
HAL_UNLOCKED
;

106 
	`HAL_SPI_M•Inô
(
h•i
);

109 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY
;

112 
	`__HAL_SPI_DISABLE
(
h•i
);

117 
h•i
->
In°™˚
->
CR1
 = (h•i->
Inô
.
Mode
 | h•i->Inô.
Dúe˘i⁄
 | h•i->Inô.
D©aSize
 |

118 
h•i
->
Inô
.
CLKPﬁ¨ôy
 | h•i->Inô.
CLKPha£
 | (h•i->Inô.
NSS
 & 
SPI_CR1_SSM
) |

119 
h•i
->
Inô
.
BaudR©ePªsˇÀr
 | h•i->Inô.
Fú°Bô
 | h•i->Inô.
CRCCÆcuœti⁄
);

122 
h•i
->
In°™˚
->
CR2
 = (((h•i->
Inô
.
NSS
 >> 16Ë& 
SPI_CR2_SSOE
Ë| h•i->Inô.
TIMode
);

126 
h•i
->
In°™˚
->
CRCPR
 = h•i->
Inô
.
CRCPﬁynomül
;

128 #i‡
	`deföed
 (
STM32L100xC
Ë|| deföed (
STM32L151xC
Ë|| deföed (
STM32L152xC
Ë|| deföed (
STM32L162xC
Ë|| deföed (
STM32L151xCA
Ë|| deföed (
STM32L151xD
Ë|| deföed (
STM32L152xCA
Ë|| deföed (
STM32L152xD
Ë|| deföed (
STM32L162xCA
Ë|| deföed (
STM32L162xD
Ë|| deföed (
STM32L151xE
Ë|| deföed (
STM32L151xDX
Ë|| deföed (
STM32L152xE
Ë|| deföed (
STM32L152xDX
Ë|| deföed (
STM32L162xE
Ë|| deföed (
STM32L162xDX
)

130 
	`CLEAR_BIT
(
h•i
->
In°™˚
->
I2SCFGR
, 
SPI_I2SCFGR_I2SMOD
);

133 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

134 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

136  
HAL_OK
;

137 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_uart.c

158 
	~"°m32l1xx_hÆ.h
"

168 #ifde‡
HAL_UART_MODULE_ENABLED


178 
UART_SëC⁄fig
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

179 
HAL_SètusTy≥Def
 
UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

180 
HAL_SètusTy≥Def
 
UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

181 
HAL_SètusTy≥Def
 
UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

182 
UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

183 
UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

184 
UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

185 
UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

186 
UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

187 
HAL_SètusTy≥Def
 
UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

250 
HAL_SètusTy≥Def
 
	$HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

253 if(
hu¨t
 =
NULL
)

255  
HAL_ERROR
;

259 if(
hu¨t
->
Inô
.
HwFlowCé
 !
UART_HWCONTROL_NONE
)

262 
	`as£π_∑øm
(
	`IS_UART_HWFLOW_INSTANCE
(
hu¨t
->
In°™˚
));

263 
	`as£π_∑øm
(
	`IS_UART_HARDWARE_FLOW_CONTROL
(
hu¨t
->
Inô
.
HwFlowCé
));

267 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

269 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

270 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

272 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

275 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

278 
	`HAL_UART_M•Inô
(
hu¨t
);

281 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

284 
	`__HAL_UART_DISABLE
(
hu¨t
);

287 
	`UART_SëC⁄fig
(
hu¨t
);

292 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

293 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

296 
	`__HAL_UART_ENABLE
(
hu¨t
);

299 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

300 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

302  
HAL_OK
;

303 
	}
}

312 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

315 if(
hu¨t
 =
NULL
)

317  
HAL_ERROR
;

321 
	`as£π_∑øm
(
	`IS_UART_HALFDUPLEX_INSTANCE
(
hu¨t
->
In°™˚
));

322 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

323 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

325 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

328 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

331 
	`HAL_UART_M•Inô
(
hu¨t
);

334 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

337 
	`__HAL_UART_DISABLE
(
hu¨t
);

340 
	`UART_SëC⁄fig
(
hu¨t
);

345 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

346 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

349 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_HDSEL
);

352 
	`__HAL_UART_ENABLE
(
hu¨t
);

355 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

356 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

358  
HAL_OK
;

359 
	}
}

372 
HAL_SètusTy≥Def
 
	$HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
)

375 if(
hu¨t
 =
NULL
)

377  
HAL_ERROR
;

381 
	`as£π_∑øm
(
	`IS_UART_LIN_INSTANCE
(
hu¨t
->
In°™˚
));

383 
	`as£π_∑øm
(
	`IS_UART_LIN_BREAK_DETECT_LENGTH
(
BªakDëe˘Lígth
));

384 
	`as£π_∑øm
(
	`IS_UART_LIN_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

385 
	`as£π_∑øm
(
	`IS_UART_LIN_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

387 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

390 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

393 
	`HAL_UART_M•Inô
(
hu¨t
);

396 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

399 
	`__HAL_UART_DISABLE
(
hu¨t
);

402 
	`UART_SëC⁄fig
(
hu¨t
);

407 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_CLKEN
);

408 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_HDSEL
 | 
USART_CR3_IREN
 | 
USART_CR3_SCEN
));

411 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LINEN
);

414 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_LBDL
, 
BªakDëe˘Lígth
);

417 
	`__HAL_UART_ENABLE
(
hu¨t
);

420 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

421 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

423  
HAL_OK
;

424 
	}
}

438 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
)

441 if(
hu¨t
 =
NULL
)

443  
HAL_ERROR
;

447 
	`as£π_∑øm
(
	`IS_UART_MULTIPROCESSOR_INSTANCE
(
hu¨t
->
In°™˚
));

450 
	`as£π_∑øm
(
	`IS_UART_WAKEUPMETHOD
(
WakeUpMëhod
));

451 
	`as£π_∑øm
(
	`IS_UART_ADDRESS
(
Addªss
));

452 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

453 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

455 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

458 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

461 
	`HAL_UART_M•Inô
(
hu¨t
);

464 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

467 
	`__HAL_UART_DISABLE
(
hu¨t
);

470 
	`UART_SëC⁄fig
(
hu¨t
);

475 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR2
, (
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
));

476 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
));

479 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_ADD
, 
Addªss
);

482 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_WAKE
, 
WakeUpMëhod
);

485 
	`__HAL_UART_ENABLE
(
hu¨t
);

488 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

489 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

491  
HAL_OK
;

492 
	}
}

500 
HAL_SètusTy≥Def
 
	$HAL_UART_DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

503 if(
hu¨t
 =
NULL
)

505  
HAL_ERROR
;

509 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

511 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

514 
	`__HAL_UART_DISABLE
(
hu¨t
);

516 
hu¨t
->
In°™˚
->
CR1
 = 0x0;

517 
hu¨t
->
In°™˚
->
CR2
 = 0x0;

518 
hu¨t
->
In°™˚
->
CR3
 = 0x0;

521 
	`HAL_UART_M•DeInô
(
hu¨t
);

523 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

524 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_RESET
;

527 
	`__HAL_UNLOCK
(
hu¨t
);

529  
HAL_OK
;

530 
	}
}

538 
__wók
 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

541 
	`UNUSED
(
hu¨t
);

546 
	}
}

554 
__wók
 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

557 
	`UNUSED
(
hu¨t
);

562 
	}
}

634 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

636 
uöt16_t
* 
tmp
;

637 
uöt32_t
 
tmp_°©e
 = 0;

639 
tmp_°©e
 = 
hu¨t
->
Sèã
;

640 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_RX
))

642 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

644  
HAL_ERROR
;

648 
	`__HAL_LOCK
(
hu¨t
);

650 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

652 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

654 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

658 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

661 
hu¨t
->
TxX„rSize
 = 
Size
;

662 
hu¨t
->
TxX„rCou¡
 = 
Size
;

663 
hu¨t
->
TxX„rCou¡
 > 0)

665 
hu¨t
->
TxX„rCou¡
--;

666 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

668 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

670  
HAL_TIMEOUT
;

672 
tmp
 = (
uöt16_t
*Ë
pD©a
;

673 
hu¨t
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

674 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

676 
pD©a
 +=2;

680 
pD©a
 +=1;

685 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

687  
HAL_TIMEOUT
;

689 
hu¨t
->
In°™˚
->
DR
 = (*
pD©a
++ & (
uöt8_t
)0xFF);

693 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

695  
HAL_TIMEOUT
;

699 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

701 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

705 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

709 
	`__HAL_UNLOCK
(
hu¨t
);

711  
HAL_OK
;

715  
HAL_BUSY
;

717 
	}
}

728 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

730 
uöt16_t
* 
tmp
;

731 
uöt32_t
 
tmp_°©e
 = 0;

733 
tmp_°©e
 = 
hu¨t
->
Sèã
;

734 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_TX
))

736 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

738  
HAL_ERROR
;

742 
	`__HAL_LOCK
(
hu¨t
);

744 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

746 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

748 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

752 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

755 
hu¨t
->
RxX„rSize
 = 
Size
;

756 
hu¨t
->
RxX„rCou¡
 = 
Size
;

759 
hu¨t
->
RxX„rCou¡
 > 0)

761 
hu¨t
->
RxX„rCou¡
--;

762 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

764 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

766  
HAL_TIMEOUT
;

768 
tmp
 = (
uöt16_t
*Ë
pD©a
 ;

769 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

771 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

772 
pD©a
 +=2;

776 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

777 
pD©a
 +=1;

783 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

785  
HAL_TIMEOUT
;

787 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

789 *
pD©a
++ = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

793 *
pD©a
++ = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x007F);

800 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

802 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

806 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

809 
	`__HAL_UNLOCK
(
hu¨t
);

811  
HAL_OK
;

815  
HAL_BUSY
;

817 
	}
}

827 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

829 
uöt32_t
 
tmp_°©e
 = 0;

831 
tmp_°©e
 = 
hu¨t
->
Sèã
;

832 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_RX
))

834 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

836  
HAL_ERROR
;

840 
	`__HAL_LOCK
(
hu¨t
);

842 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

843 
hu¨t
->
TxX„rSize
 = 
Size
;

844 
hu¨t
->
TxX„rCou¡
 = 
Size
;

846 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

848 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

850 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

854 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

858 
	`__HAL_UNLOCK
(
hu¨t
);

861 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

863  
HAL_OK
;

867  
HAL_BUSY
;

869 
	}
}

879 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

881 
uöt32_t
 
tmp_°©e
 = 0;

883 
tmp_°©e
 = 
hu¨t
->
Sèã
;

884 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_TX
))

886 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

888  
HAL_ERROR
;

892 
	`__HAL_LOCK
(
hu¨t
);

894 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

895 
hu¨t
->
RxX„rSize
 = 
Size
;

896 
hu¨t
->
RxX„rCou¡
 = 
Size
;

898 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

900 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

902 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

906 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

910 
	`__HAL_UNLOCK
(
hu¨t
);

913 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_PE
);

916 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

919 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

921  
HAL_OK
;

925  
HAL_BUSY
;

927 
	}
}

937 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

939 
uöt32_t
 *
tmp
;

940 
uöt32_t
 
tmp_°©e
 = 0;

942 
tmp_°©e
 = 
hu¨t
->
Sèã
;

943 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_RX
))

945 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

947  
HAL_ERROR
;

951 
	`__HAL_LOCK
(
hu¨t
);

953 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

954 
hu¨t
->
TxX„rSize
 = 
Size
;

955 
hu¨t
->
TxX„rCou¡
 = 
Size
;

957 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

959 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

961 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

965 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

969 
hu¨t
->
hdm©x
->
X„rC∂tCÆlback
 = 
UART_DMATønsmôC∂t
;

972 
hu¨t
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMATxHÆfC∂t
;

975 
hu¨t
->
hdm©x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

978 
tmp
 = (
uöt32_t
*)&
pD©a
;

979 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hu¨t->
In°™˚
->
DR
, 
Size
);

982 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_FLAG_TC
);

986 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

989 
	`__HAL_UNLOCK
(
hu¨t
);

991  
HAL_OK
;

995  
HAL_BUSY
;

997 
	}
}

1009 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1011 
uöt32_t
 *
tmp
;

1012 
uöt32_t
 
tmp_°©e
 = 0;

1014 
tmp_°©e
 = 
hu¨t
->
Sèã
;

1015 if((
tmp_°©e
 =
HAL_UART_STATE_READY
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_TX
))

1017 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

1019  
HAL_ERROR
;

1023 
	`__HAL_LOCK
(
hu¨t
);

1025 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

1026 
hu¨t
->
RxX„rSize
 = 
Size
;

1028 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1030 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1032 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

1036 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

1040 
hu¨t
->
hdm¨x
->
X„rC∂tCÆlback
 = 
UART_DMARe˚iveC∂t
;

1043 
hu¨t
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMARxHÆfC∂t
;

1046 
hu¨t
->
hdm¨x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

1049 
tmp
 = (
uöt32_t
*)&
pD©a
;

1050 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm¨x
, (
uöt32_t
)&hu¨t->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

1054 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1057 
	`__HAL_UNLOCK
(
hu¨t
);

1059  
HAL_OK
;

1063  
HAL_BUSY
;

1065 
	}
}

1073 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1076 
	`__HAL_LOCK
(
hu¨t
);

1078 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1081 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1083 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

1086 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1088 i‡(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1091 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_DMAT
 | 
USART_CR3_DMAR
));

1096 
	`__HAL_UNLOCK
(
hu¨t
);

1098  
HAL_ERROR
;

1102 
	`__HAL_UNLOCK
(
hu¨t
);

1104  
HAL_OK
;

1105 
	}
}

1113 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1116 
	`__HAL_LOCK
(
hu¨t
);

1118 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1121 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1123 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

1126 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1128 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1130 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1133 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1135 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_DMAT
 | 
USART_CR3_DMAR
));

1140 
	`__HAL_UNLOCK
(
hu¨t
);

1142  
HAL_ERROR
;

1146 
	`__HAL_UNLOCK
(
hu¨t
);

1148  
HAL_OK
;

1149 
	}
}

1157 
HAL_SètusTy≥Def
 
	$HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1166 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_DMAT
 | 
USART_CR3_DMAR
));

1169 if(
hu¨t
->
hdm©x
 !
NULL
)

1171 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1174 if(
hu¨t
->
hdm¨x
 !
NULL
)

1176 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1179 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1181  
HAL_OK
;

1182 
	}
}

1190 
	$HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1192 
uöt32_t
 
tmp_Êag
 = 0, 
tmp_ô_sour˚
 = 0;

1194 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_PE
);

1195 
tmp_ô_sour˚
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_PE
);

1197 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1199 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_PE
;

1202 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_FE
);

1203 
tmp_ô_sour˚
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_ERR
);

1205 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1207 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_FE
;

1210 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_NE
);

1212 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1214 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_NE
;

1217 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_ORE
);

1219 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1221 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_ORE
;

1224 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_RXNE
);

1225 
tmp_ô_sour˚
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_RXNE
);

1227 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1229 
	`UART_Re˚ive_IT
(
hu¨t
);

1232 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_TXE
);

1233 
tmp_ô_sour˚
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_TXE
);

1235 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1237 
	`UART_Tønsmô_IT
(
hu¨t
);

1240 
tmp_Êag
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_TC
);

1241 
tmp_ô_sour˚
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_TC
);

1243 if((
tmp_Êag
 !
RESET
Ë&& (
tmp_ô_sour˚
 != RESET))

1245 
	`UART_EndTønsmô_IT
(
hu¨t
);

1248 if(
hu¨t
->
Eº‹Code
 !
HAL_UART_ERROR_NONE
)

1251 
	`__HAL_UART_CLEAR_PEFLAG
(
hu¨t
);

1254 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1256 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1258 
	}
}

1266 
__wók
 
	$HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1269 
	`UNUSED
(
hu¨t
);

1274 
	}
}

1282 
__wók
 
	$HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1285 
	`UNUSED
(
hu¨t
);

1290 
	}
}

1298 
__wók
 
	$HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1301 
	`UNUSED
(
hu¨t
);

1306 
	}
}

1314 
__wók
 
	$HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1317 
	`UNUSED
(
hu¨t
);

1322 
	}
}

1330 
__wók
 
	$HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1333 
	`UNUSED
(
hu¨t
);

1338 
	}
}

1369 
HAL_SètusTy≥Def
 
	$HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1372 
	`as£π_∑øm
(
	`IS_UART_LIN_INSTANCE
(
hu¨t
->
In°™˚
));

1375 
	`__HAL_LOCK
(
hu¨t
);

1377 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1380 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_SBK
);

1382 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1385 
	`__HAL_UNLOCK
(
hu¨t
);

1387  
HAL_OK
;

1388 
	}
}

1396 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1399 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

1402 
	`__HAL_LOCK
(
hu¨t
);

1404 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1407 
	`SET_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RWU
);

1409 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1412 
	`__HAL_UNLOCK
(
hu¨t
);

1414  
HAL_OK
;

1415 
	}
}

1423 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_ExôMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1426 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

1429 
	`__HAL_LOCK
(
hu¨t
);

1431 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1434 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR1
, 
USART_CR1_RWU
);

1436 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1439 
	`__HAL_UNLOCK
(
hu¨t
);

1441  
HAL_OK
;

1442 
	}
}

1450 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1453 
	`__HAL_LOCK
(
hu¨t
);

1455 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1460 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, (
uöt32_t
)(
USART_CR1_TE
 | 
USART_CR1_RE
), USART_CR1_TE);

1462 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1465 
	`__HAL_UNLOCK
(
hu¨t
);

1467  
HAL_OK
;

1468 
	}
}

1476 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1479 
	`__HAL_LOCK
(
hu¨t
);

1481 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1486 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
, (
uöt32_t
)(
USART_CR1_TE
 | 
USART_CR1_RE
), USART_CR1_RE);

1488 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1491 
	`__HAL_UNLOCK
(
hu¨t
);

1493  
HAL_OK
;

1494 
	}
}

1524 
HAL_UART_SèãTy≥Def
 
	$HAL_UART_GëSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1526  
hu¨t
->
Sèã
;

1527 
	}
}

1535 
uöt32_t
 
	$HAL_UART_GëEº‹
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1537  
hu¨t
->
Eº‹Code
;

1538 
	}
}

1558 
	$UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1560 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1562 i‡–
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
) )

1564 
hu¨t
->
TxX„rCou¡
 = 0;

1568 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1571 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1576 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

1578 
	}
}

1586 
	$UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1588 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1590 
	`HAL_UART_TxHÆfC∂tCÆlback
(
hu¨t
);

1591 
	}
}

1599 
	$UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1601 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1603 i‡–
	`HAL_IS_BIT_CLR
(
hdma
->
In°™˚
->
CCR
, 
DMA_CCR_CIRC
) )

1605 
hu¨t
->
RxX„rCou¡
 = 0;

1609 
	`CLEAR_BIT
(
hu¨t
->
In°™˚
->
CR3
, 
USART_CR3_DMAR
);

1612 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1614 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

1618 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1621 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

1622 
	}
}

1630 
	$UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1632 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1634 
	`HAL_UART_RxHÆfC∂tCÆlback
(
hu¨t
);

1635 
	}
}

1643 
	$UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1645 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1646 
hu¨t
->
RxX„rCou¡
 = 0;

1647 
hu¨t
->
TxX„rCou¡
 = 0;

1648 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1649 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_DMA
;

1650 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1651 
	}
}

1662 
HAL_SètusTy≥Def
 
	$UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1664 
uöt32_t
 
tick°¨t
 = 0;

1667 
tick°¨t
 = 
	`HAL_GëTick
();

1670 if(
Sètus
 =
RESET
)

1672 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë=
RESET
)

1675 if(
Timeout
 !
HAL_MAX_DELAY
)

1677 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1680 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1681 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1682 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1683 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1685 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1688 
	`__HAL_UNLOCK
(
hu¨t
);

1690  
HAL_TIMEOUT
;

1697 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë!
RESET
)

1700 if(
Timeout
 !
HAL_MAX_DELAY
)

1702 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1705 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1706 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1707 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1708 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1710 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1713 
	`__HAL_UNLOCK
(
hu¨t
);

1715  
HAL_TIMEOUT
;

1720  
HAL_OK
;

1721 
	}
}

1729 
HAL_SètusTy≥Def
 
	$UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1731 
uöt16_t
* 
tmp
;

1732 
uöt32_t
 
tmp_°©e
 = 0;

1734 
tmp_°©e
 = 
hu¨t
->
Sèã
;

1735 if((
tmp_°©e
 =
HAL_UART_STATE_BUSY_TX
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_TX_RX
))

1737 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

1739 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pTxBuffPå
;

1740 
hu¨t
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1741 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1743 
hu¨t
->
pTxBuffPå
 += 2;

1747 
hu¨t
->
pTxBuffPå
 += 1;

1752 
hu¨t
->
In°™˚
->
DR
 = (
uöt8_t
)(*hu¨t->
pTxBuffPå
++ & (uint8_t)0x00FF);

1755 if(--
hu¨t
->
TxX„rCou¡
 == 0)

1758 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1761 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1763  
HAL_OK
;

1767  
HAL_BUSY
;

1769 
	}
}

1778 
HAL_SètusTy≥Def
 
	$UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1781 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1784 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1786 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

1790 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1793 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

1795  
HAL_OK
;

1796 
	}
}

1804 
HAL_SètusTy≥Def
 
	$UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1806 
uöt16_t
* 
tmp
;

1807 
uöt32_t
 
tmp_°©e
 = 0;

1809 
tmp_°©e
 = 
hu¨t
->
Sèã
;

1810 if((
tmp_°©e
 =
HAL_UART_STATE_BUSY_RX
Ë|| (tmp_°©ê=
HAL_UART_STATE_BUSY_TX_RX
))

1812 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

1814 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pRxBuffPå
;

1815 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1817 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1818 
hu¨t
->
pRxBuffPå
 += 2;

1822 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1823 
hu¨t
->
pRxBuffPå
 += 1;

1828 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1830 *
hu¨t
->
pRxBuffPå
++ = (
uöt8_t
)(hu¨t->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1834 *
hu¨t
->
pRxBuffPå
++ = (
uöt8_t
)(hu¨t->
In°™˚
->
DR
 & (uint8_t)0x007F);

1838 if(--
hu¨t
->
RxX„rCou¡
 == 0)

1840 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1843 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1845 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

1850 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1853 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1855 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1857 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

1859  
HAL_OK
;

1861  
HAL_OK
;

1865  
HAL_BUSY
;

1867 
	}
}

1875 
	$UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1877 
uöt32_t
 
tm¥eg
 = 0x00;

1880 
	`as£π_∑øm
(
	`IS_UART_BAUDRATE
(
hu¨t
->
Inô
.
BaudR©e
));

1881 
	`as£π_∑øm
(
	`IS_UART_STOPBITS
(
hu¨t
->
Inô
.
St›Bôs
));

1882 
	`as£π_∑øm
(
	`IS_UART_PARITY
(
hu¨t
->
Inô
.
P¨ôy
));

1883 
	`as£π_∑øm
(
	`IS_UART_MODE
(
hu¨t
->
Inô
.
Mode
));

1888 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR2
, 
USART_CR2_STOP
, hu¨t->
Inô
.
St›Bôs
);

1896 
tm¥eg
 = (
uöt32_t
)
hu¨t
->
Inô
.
W‹dLígth
 | hu¨t->Inô.
P¨ôy
 | hu¨t->Inô.
Mode
 | hu¨t->Inô.
OvîSam∂ög
;

1897 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR1
,

1898 (
uöt32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | 
USART_CR1_RE
 | 
USART_CR1_OVER8
),

1899 
tm¥eg
);

1903 
	`MODIFY_REG
(
hu¨t
->
In°™˚
->
CR3
, (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
), hu¨t->
Inô
.
HwFlowCé
);

1906 if(
hu¨t
->
Inô
.
OvîSam∂ög
 =
UART_OVERSAMPLING_8
)

1909 if((
hu¨t
->
In°™˚
 =
USART1
))

1911 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
	`HAL_RCC_GëPCLK2Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1915 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
	`HAL_RCC_GëPCLK1Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1921 if((
hu¨t
->
In°™˚
 =
USART1
))

1923 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
	`HAL_RCC_GëPCLK2Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1927 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
	`HAL_RCC_GëPCLK1Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1930 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\sysIrqHandlers.c

15 
	~"bﬂrd.h
"

22 
	$NMI_H™dÀr
( )

24 
	}
}

31 #i‡
deföed
–
HARD_FAULT_HANDLER_ENABLED
 )

32 
	$H¨dFau…_H™dÀr_C
–*
¨gs
 )

34 vﬁ©ûê
°acked_r0
;

35 vﬁ©ûê
°acked_r1
;

36 vﬁ©ûê
°acked_r2
;

37 vﬁ©ûê
°acked_r3
;

38 vﬁ©ûê
°acked_r12
;

39 vﬁ©ûê
°acked_Ã
;

40 vﬁ©ûê
°acked_pc
;

41 vﬁ©ûê
°acked_p§
;

43 
°acked_r0
 = ( ( Ë
¨gs
[0] );

44 
°acked_r1
 = ( ( Ë
¨gs
[1] );

45 
°acked_r2
 = ( ( Ë
¨gs
[2] );

46 
°acked_r3
 = ( ( Ë
¨gs
[3] );

48 
°acked_r12
 = ( ( Ë
¨gs
[4] );

49 
°acked_Ã
 = ( ( Ë
¨gs
[5] );

50 
°acked_pc
 = ( ( Ë
¨gs
[6] );

51 
°acked_p§
 = ( ( Ë
¨gs
[7] );

53 –)
°acked_r0
;

54 –)
°acked_r1
;

55 –)
°acked_r2
;

56 –)
°acked_r3
;

58 –)
°acked_r12
;

59 –)
°acked_Ã
 ;

60 –)
°acked_pc
 ;

61 –)
°acked_p§
;

64 
	}
}

66 #i‡
deföed
(
__CC_ARM
)

67 
__asm
 
	$H¨dFau…_H™dÀr
()

69 
TST
 
LR
, #4

70 
ITE
 
EQ


71 
MRSEQ
 
r0
, 
MSP


72 
MRSNE
 
r0
, 
PSP


73 
B
 
	`__˝p
(
H¨dFau…_H™dÀr_C
)

74 
	}
}

75 #ñi‡
deföed
(
__ICCARM__
)

76 
	$H¨dFau…_H™dÀr
()

78 
	`__asm
("TST LR, #4");

79 
	`__asm
("ITE EQ");

80 
	`__asm
("MRSEQÑ0, MSP");

81 
	`__asm
("MRSNEÑ0, PSP");

82 
	`__asm
("B HardFault_Handler_C");

83 
	}
}

84 #ñi‡
deföed
(
__GNUC__
)

85 
	$H¨dFau…_H™dÀr
()

87 
__asm
 volatile( "TST LR, #4" );

88 
__asm
 volatile( "ITE EQ" );

89 
__asm
 volatile( "MRSEQ R0, MSP" );

90 
__asm
 volatile( "MRSNE R0, PSP" );

91 
__asm
 volatile( "B HardFault_Handler_C" );

92 
	}
}

94 #w¨nög 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


104 
	$MemM™age_H™dÀr
( )

110 
	}
}

117 
	$BusFau…_H™dÀr
( )

123 
	}
}

130 
	$UßgeFau…_H™dÀr
( )

136 
	}
}

143 
	$DebugM⁄_H™dÀr
( )

145 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\utilities.c

15 
	~<°dlib.h
>

16 
	~<°dio.h
>

17 
	~"bﬂrd.h
"

18 
	~"utûôõs.h
"

26 
	#RAND_LOCAL_MAX
 2147483647L

	)

28 
uöt32_t
 
	g√xt
 = 1;

30 
öt32_t
 
	$ønd1
( )

32  ( ( 
√xt
 =Çexà* 1103515245L + 12345L ) % 
RAND_LOCAL_MAX
 );

33 
	}
}

35 
	$§™d1
–
uöt32_t
 
£ed
 )

37 
√xt
 = 
£ed
;

38 
	}
}

41 
öt32_t
 
	$øndr
–
öt32_t
 
mö
, i¡32_à
max
 )

43  ( 
öt32_t
 )
	`ønd1
–Ë% ( 
max
 - 
mö
 + 1 ) + min;

44 
	}
}

46 
	$mem˝y1
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 )

48  
size
-- )

50 *
d°
++ = *
§c
++;

52 
	}
}

54 
	$mem˝yr
–
uöt8_t
 *
d°
, c⁄° uöt8_à*
§c
, 
uöt16_t
 
size
 )

56 
d°
 = d° + ( 
size
 - 1 );

57  
size
-- )

59 *
d°
-- = *
§c
++;

61 
	}
}

63 
	$mem£t1
–
uöt8_t
 *
d°
, uöt8_à
vÆue
, 
uöt16_t
 
size
 )

65  
size
-- )

67 *
d°
++ = 
vÆue
;

69 
	}
}

71 
öt8_t
 
	$NibbÀ2HexCh¨
–
uöt8_t
 
a
 )

73 if–
a
 < 10 )

75  '0' + 
a
;

77 if–
a
 < 16 )

79  'A' + ( 
a
 - 10 );

85 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\mac\LoRaMac.c

20 
	~<m©h.h
>

21 
	~"bﬂrd.h
"

23 
	~"LoRaMacCry±o.h
"

24 
	~"LoRaMac.h
"

25 
	~"LoRaMacTe°.h
"

30 
	#LORAMAC_PHY_MAXPAYLOAD
 255

	)

35 
	#LORA_MAC_COMMAND_MAX_LENGTH
 15

	)

42 
	#LORA_MAC_FRMPAYLOAD_OVERHEAD
 13

43 

	)

47 
	#BACKOFF_DC_1_HOUR
 100

	)

52 
	#BACKOFF_DC_10_HOURS
 1000

	)

57 
	#BACKOFF_DC_24_HOURS
 10000

	)

62 
uöt8_t
 *
	gLoRaMacDevEui
;

67 
uöt8_t
 *
	gLoRaMacAµEui
;

72 
uöt8_t
 *
	gLoRaMacAµKey
;

77 
uöt8_t
 
	gLoRaMacNwkSKey
[] =

86 
uöt8_t
 
	gLoRaMacAµSKey
[] =

96 
uöt16_t
 
	gLoRaMacDevN⁄˚
;

101 
uöt32_t
 
	gLoRaMacNëID
;

106 
uöt32_t
 
	gLoRaMacDevAddr
;

111 
Mu…iˇ°P¨ams_t
 *
	gMu…iˇ°Ch™√ls
 = 
NULL
;

116 
Devi˚Cœss_t
 
	gLoRaMacDevi˚Cœss
;

121 
boﬁ
 
	gPublicNëw‹k
;

126 
boﬁ
 
	gRïóãrSuµ‹t
;

131 
uöt8_t
 
	gLoRaMacBuf„r
[
LORAMAC_PHY_MAXPAYLOAD
];

136 
uöt16_t
 
	gLoRaMacBuf„rPktLí
 = 0;

141 
uöt8_t
 
	gLoRaMacTxPaylﬂdLí
 = 0;

146 
uöt8_t
 
	gLoRaMacRxPaylﬂd
[
LORAMAC_PHY_MAXPAYLOAD
];

152 
uöt32_t
 
	gUpLökCou¡î
 = 0;

158 
uöt32_t
 
	gDownLökCou¡î
 = 0;

164 
boﬁ
 
	gIsUpLökCou¡îFixed
 = 
Ál£
;

169 
boﬁ
 
	gIsRxWödowsE«bÀd
 = 
åue
;

174 
boﬁ
 
	gIsLoRaMacNëw‹kJoöed
 = 
Ál£
;

179 
boﬁ
 
	gAdrCålOn
 = 
Ál£
;

184 
uöt32_t
 
	gAdrAckCou¡î
 = 0;

190 
boﬁ
 
	gNodeAckReque°ed
 = 
Ál£
;

196 
boﬁ
 
	gSrvAckReque°ed
 = 
Ál£
;

201 
boﬁ
 
	gMacComm™dsInNextTx
 = 
Ál£
;

206 
uöt8_t
 
	gMacComm™dsBuf„rIndex
 = 0;

211 
uöt8_t
 
	gMacComm™dsBuf„rToRïótIndex
 = 0;

216 
uöt8_t
 
	gMacComm™dsBuf„r
[
LORA_MAC_COMMAND_MAX_LENGTH
];

221 
uöt8_t
 
	gMacComm™dsBuf„rToRïót
[
LORA_MAC_COMMAND_MAX_LENGTH
];

223 #i‡
deföed
–
USE_BAND_433
 )

227 c⁄° 
uöt8_t
 
	gD©¨©es
[] = { 12, 11, 10, 9, 8, 7, 7, 50 };

232 c⁄° 
uöt32_t
 
	gB™dwidths
[] = { 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 250e3, 0 };

237 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©e
[] = { 51, 51, 51, 115, 242, 242, 242, 242 };

242 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©eRïóãr
[] = { 51, 51, 51, 115, 222, 222, 222, 222 };

247 c⁄° 
öt8_t
 
	gTxPowîs
[] = { 10, 7, 4, 1, -2, -5 };

252 
B™d_t
 
	gB™ds
[
LORA_MAX_NB_BANDS
] =

254 
BAND0
,

260 
Ch™√lP¨ams_t
 
	gCh™√ls
[
LORA_MAX_NB_CHANNELS
] =

262 
LC1
,

263 
LC2
,

264 
LC3
,

266 #ñi‡
deföed
–
USE_BAND_470
 )

271 c⁄° 
uöt8_t
 
	gD©¨©es
[] = { 12, 11, 10, 9, 8, 7 };

276 c⁄° 
uöt32_t
 
	gB™dwidths
[] = { 125e3, 125e3, 125e3, 125e3, 125e3, 125e3 };

281 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©e
[] = { 51, 51, 51, 115, 222, 222 };

286 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©eRïóãr
[] = { 51, 51, 51, 115, 222, 222 };

291 c⁄° 
öt8_t
 
	gTxPowîs
[] = { 17, 16, 14, 12, 10, 7, 5, 2 };

296 
B™d_t
 
	gB™ds
[
LORA_MAX_NB_BANDS
] =

298 
BAND0
,

304 
Ch™√lP¨ams_t
 
	gCh™√ls
[
LORA_MAX_NB_CHANNELS
];

309 
	#LORAMAC_FIRST_RX1_CHANNEL
 ( (
uöt32_t
Ë500.3e6 )

	)

314 
	#LORAMAC_LAST_RX1_CHANNEL
 ( (
uöt32_t
Ë509.7e6 )

	)

319 
	#LORAMAC_STEPWIDTH_RX1_CHANNEL
 ( (
uöt32_t
Ë200e3 )

	)

321 #ñi‡
deföed
–
USE_BAND_780
 )

325 c⁄° 
uöt8_t
 
	gD©¨©es
[] = { 12, 11, 10, 9, 8, 7, 7, 50 };

330 c⁄° 
uöt32_t
 
	gB™dwidths
[] = { 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 250e3, 0 };

335 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©e
[] = { 51, 51, 51, 115, 242, 242, 242, 242 };

340 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©eRïóãr
[] = { 51, 51, 51, 115, 222, 222, 222, 222 };

345 c⁄° 
öt8_t
 
	gTxPowîs
[] = { 10, 7, 4, 1, -2, -5 };

350 
B™d_t
 
	gB™ds
[
LORA_MAX_NB_BANDS
] =

352 
BAND0
,

358 
Ch™√lP¨ams_t
 
	gCh™√ls
[
LORA_MAX_NB_CHANNELS
] =

360 
LC1
,

361 
LC2
,

362 
LC3
,

364 #ñi‡
deföed
–
USE_BAND_868
 )

368 c⁄° 
uöt8_t
 
	gD©¨©es
[] = { 12, 11, 10, 9, 8, 7, 7, 50 };

373 c⁄° 
uöt32_t
 
	gB™dwidths
[] = { 125e3, 125e3, 125e3, 125e3, 125e3, 125e3, 250e3, 0 };

378 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©e
[] = { 51, 51, 51, 115, 242, 242, 242, 242 };

383 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©eRïóãr
[] = { 51, 51, 51, 115, 222, 222, 222, 222 };

388 c⁄° 
öt8_t
 
	gTxPowîs
[] = { 20, 14, 11, 8, 5, 2 };

393 
B™d_t
 
	gB™ds
[
LORA_MAX_NB_BANDS
] =

395 
BAND0
,

396 
BAND1
,

397 
BAND2
,

398 
BAND3
,

399 
BAND4
,

405 
Ch™√lP¨ams_t
 
	gCh™√ls
[
LORA_MAX_NB_CHANNELS
] =

407 
LC1
,

408 
LC2
,

409 
LC3
,

411 #ñi‡
deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

415 c⁄° 
uöt8_t
 
	gD©¨©es
[] = { 10, 9, 8, 7, 8, 0, 0, 0, 12, 11, 10, 9, 8, 7, 0, 0 };

420 c⁄° 
uöt32_t
 
	gB™dwidths
[] = { 125e3, 125e3, 125e3, 125e3, 500e3, 0, 0, 0, 500e3, 500e3, 500e3, 500e3, 500e3, 500e3, 0, 0 };

425 c⁄° 
öt8_t
 
	gD©¨©eOff£ts
[5][4] =

427 { 
DR_10
, 
DR_9
 , 
DR_8
 , DR_8 },

428 { 
DR_11
, 
DR_10
, 
DR_9
 , 
DR_8
 },

429 { 
DR_12
, 
DR_11
, 
DR_10
, 
DR_9
 },

430 { 
DR_13
, 
DR_12
, 
DR_11
, 
DR_10
 },

431 { 
DR_13
, DR_13, 
DR_12
, 
DR_11
 },

437 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©e
[] = { 11, 53, 125, 242, 242, 0, 0, 0, 53, 129, 242, 242, 242, 242, 0, 0 };

442 c⁄° 
uöt8_t
 
	gMaxPaylﬂdOfD©¨©eRïóãr
[] = { 11, 53, 125, 242, 242, 0, 0, 0, 33, 109, 222, 222, 222, 222, 0, 0 };

447 c⁄° 
öt8_t
 
	gTxPowîs
[] = { 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10 };

452 
B™d_t
 
	gB™ds
[
LORA_MAX_NB_BANDS
] =

454 
BAND0
,

460 
Ch™√lP¨ams_t
 
	gCh™√ls
[
LORA_MAX_NB_CHANNELS
];

465 
uöt16_t
 
	gCh™√lsMaskRemaöög
[6];

470 
	#LORAMAC_FIRST_RX1_CHANNEL
 ( (
uöt32_t
Ë923.3e6 )

	)

475 
	#LORAMAC_LAST_RX1_CHANNEL
 ( (
uöt32_t
Ë927.5e6 )

	)

480 
	#LORAMAC_STEPWIDTH_RX1_CHANNEL
 ( (
uöt32_t
Ë600e3 )

	)

489 
LoRaMacP¨ams_t
 
	gLoRaMacP¨ams
;

494 
LoRaMacP¨ams_t
 
	gLoRaMacP¨amsDeÁu…s
;

499 
uöt8_t
 
	gCh™√lsNbRïCou¡î
 = 0;

505 
uöt8_t
 
	gMaxDCy˛e
 = 0;

510 
uöt16_t
 
	gAggªg©edDCy˛e
;

511 
TimîTime_t
 
	gAggªg©edLa°TxD⁄eTime
;

512 
TimîTime_t
 
	gAggªg©edTimeOff
;

517 
boﬁ
 
	gDutyCy˛eOn
;

522 
uöt8_t
 
	gCh™√l
;

529 
TimîTime_t
 
	gLoRaMacInôüliz©i⁄Time
 = 0;

534 
	eeLoRaMacSèã


536 
	mLORAMAC_IDLE
 = 0x00000000,

537 
	mLORAMAC_TX_RUNNING
 = 0x00000001,

538 
	mLORAMAC_RX
 = 0x00000002,

539 
	mLORAMAC_ACK_REQ
 = 0x00000004,

540 
	mLORAMAC_ACK_RETRY
 = 0x00000008,

541 
	mLORAMAC_TX_DELAYED
 = 0x00000010,

542 
	mLORAMAC_TX_CONFIG
 = 0x00000020,

543 
	mLORAMAC_RX_ABORT
 = 0x00000040,

549 
uöt32_t
 
	gLoRaMacSèã
 = 
LORAMAC_IDLE
;

554 
TimîEvít_t
 
	gMacSèãCheckTimî
;

559 
LoRaMacPrimôives_t
 *
	gLoRaMacPrimôives
;

564 
LoRaMacCÆlback_t
 *
	gLoRaMacCÆlbacks
;

569 
RadioEvíts_t
 
	gRadioEvíts
;

574 
TimîEvít_t
 
	gTxDñayedTimî
;

579 
TimîEvít_t
 
	gRxWödowTimî1
;

580 
TimîEvít_t
 
	gRxWödowTimî2
;

587 
uöt32_t
 
	gRxWödow1Dñay
;

588 
uöt32_t
 
	gRxWödow2Dñay
;

595 
öt8_t
 
	mD©¨©e
;

596 
uöt8_t
 
	mB™dwidth
;

597 
uöt32_t
 
	mRxWödowTimeout
;

598 
öt32_t
 
	mRxOff£t
;

599 }
	tRxC⁄figP¨ams_t
;

604 
RxC⁄figP¨ams_t
 
	gRxWödowsP¨ams
[2];

609 
TimîEvít_t
 
	gAckTimeoutTimî
;

614 
uöt8_t
 
	gAckTimeoutRërõs
 = 1;

619 
uöt8_t
 
	gAckTimeoutRërõsCou¡î
 = 1;

624 
boﬁ
 
	gAckTimeoutRëry
 = 
Ál£
;

629 
TimîTime_t
 
	gTxTimeOnAú
 = 0;

634 
uöt8_t
 
	gJoöReque°Trüls
;

639 
uöt8_t
 
	gMaxJoöReque°Trüls
;

644 
M˝sIndiˇti⁄_t
 
	gM˝sIndiˇti⁄
;

649 
M˝sC⁄fúm_t
 
	gM˝sC⁄fúm
;

654 
MlmeC⁄fúm_t
 
	gMlmeC⁄fúm
;

659 
uöt8_t
 
	gRxSlŸ
 = 0;

664 
LoRaMacFœgs_t
 
	gLoRaMacFœgs
;

669 
OnRadioTxD⁄e
( );

675 
Pª∑ªRxD⁄eAb‹t
( );

680 
OnRadioRxD⁄e
–
uöt8_t
 *
∑ylﬂd
, 
uöt16_t
 
size
, 
öt16_t
 
rssi
, 
öt8_t
 
¢r
 );

685 
OnRadioTxTimeout
( );

690 
OnRadioRxEº‹
( );

695 
OnRadioRxTimeout
( );

700 
OnMacSèãCheckTimîEvít
( );

705 
OnTxDñayedTimîEvít
( );

710 
OnRxWödow1TimîEvít
( );

715 
OnRxWödow2TimîEvít
( );

720 
OnAckTimeoutTimîEvít
( );

731 
boﬁ
 
SëNextCh™√l
–
TimîTime_t
* 
time
 );

743 
boﬁ
 
RxWödowSëup
–
uöt32_t
 
‰eq
, 
öt8_t
 
d©¨©e
, uöt32_à
b™dwidth
, 
uöt16_t
 
timeout
, boﬁ 
rxC⁄töuous
 );

752 
boﬁ
 
Rx2FªqInR™ge
–
uöt32_t
 
‰eq
 );

771 
LoRaMacSètus_t
 
AddMacComm™d
–
uöt8_t
 
cmd
, uöt8_à
p1
, uöt8_à
p2
 );

785 
uöt8_t
 
P¨£MacComm™dsToRïót
–uöt8_t* 
cmdBufIn
, uöt8_à
Àngth
, uöt8_t* 
cmdBufOut
 );

803 
boﬁ
 
VÆid©ePaylﬂdLígth
–
uöt8_t
 
ÀnN
, 
öt8_t
 
d©¨©e
, uöt8_à
fO±sLí
 );

813 
uöt8_t
 
Cou¡Bôs
–
uöt16_t
 
mask
, uöt8_à
nbBôs
 );

815 #i‡
deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

824 
uöt8_t
 
Cou¡NbE«bÀd125kHzCh™√ls
–
uöt16_t
 *
ch™√lsMask
 );

826 #i‡
deföed
–
USE_BAND_915_HYBRID
 )

833 
Rì«bÀCh™√ls
–
uöt16_t
 
mask
, uöt16_t* 
ch™√lsMask
 );

842 
boﬁ
 
VÆid©eCh™√lMask
–
uöt16_t
* 
ch™√lsMask
 );

855 
boﬁ
 
VÆid©eD©¨©e
–
öt8_t
 
d©¨©e
, 
uöt16_t
* 
ch™√lsMask
 );

865 
öt8_t
 
LimôTxPowî
–öt8_à
txPowî
, i¡8_à
maxB™dTxPowî
 );

878 
boﬁ
 
VÆueInR™ge
–
öt8_t
 
vÆue
, i¡8_à
mö
, i¡8_à
max
 );

891 
boﬁ
 
AdrNextDr
–boﬁ 
adrE«bÀd
, boﬁ 
upd©eCh™√lMask
, 
öt8_t
* 
d©¨©eOut
 );

902 
boﬁ
 
DißbÀCh™√lInMask
–
uöt8_t
 
id
, 
uöt16_t
* 
mask
 );

907 
Pro˚ssMacComm™ds
–
uöt8_t
 *
∑ylﬂd
, uöt8_à
macIndex
, uöt8_à
comm™dsSize
, uöt8_à
¢r
 );

918 
LoRaMacSètus_t
 
Síd
–
LoRaMacHódî_t
 *
macHdr
, 
uöt8_t
 
fP‹t
, *
fBuf„r
, 
uöt16_t
 
fBuf„rSize
 );

931 
LoRaMacSètus_t
 
Pª∑ªFøme
–
LoRaMacHódî_t
 *
macHdr
, 
LoRaMacFømeCål_t
 *
fCål
, 
uöt8_t
 
fP‹t
, *
fBuf„r
, 
uöt16_t
 
fBuf„rSize
 );

938 
LoRaMacSètus_t
 
ScheduÀTx
( );

945 
uöt16_t
 
JoöDutyCy˛e
( );

952 
CÆcuœãBackOff
–
uöt8_t
 
ch™√l
 );

960 
öt8_t
 
A…î«ãD©¨©e
–
uöt16_t
 
nbTrüls
 );

971 
LoRaMacSètus_t
 
SídFømeOnCh™√l
–
Ch™√lP¨ams_t
 
ch™√l
 );

981 
LoRaMacSètus_t
 
SëTxC⁄töuousWave
–
uöt16_t
 
timeout
 );

993 
LoRaMacSètus_t
 
SëTxC⁄töuousWave1
–
uöt16_t
 
timeout
, 
uöt32_t
 
‰equícy
, 
uöt8_t
 
powî
 );

998 
Re£tMacP¨amëîs
( );

1048 
RxC⁄figP¨ams_t
 
CompuãRxWödowP¨amëîs
–
öt8_t
 
d©¨©e
, 
uöt32_t
 
rxEº‹
 );

1050 
	$OnRadioTxD⁄e
( )

1052 
TimîTime_t
 
curTime
 = 
	`TimîGëCuºítTime
( );

1054 if–
LoRaMacDevi˚Cœss
 !
CLASS_C
 )

1056 
Radio
.
	`SÀï
( );

1060 
	`OnRxWödow2TimîEvít
( );

1064 if–
IsRxWödowsE«bÀd
 =
åue
 )

1066 
	`TimîSëVÆue
–&
RxWödowTimî1
, 
RxWödow1Dñay
 );

1067 
	`TimîSèπ
–&
RxWödowTimî1
 );

1068 if–
LoRaMacDevi˚Cœss
 !
CLASS_C
 )

1070 
	`TimîSëVÆue
–&
RxWödowTimî2
, 
RxWödow2Dñay
 );

1071 
	`TimîSèπ
–&
RxWödowTimî2
 );

1073 if––
LoRaMacDevi˚Cœss
 =
CLASS_C
 ) || ( 
NodeAckReque°ed
 =
åue
 ) )

1075 
	`TimîSëVÆue
–&
AckTimeoutTimî
, 
RxWödow2Dñay
 + 
ACK_TIMEOUT
 +

1076 
	`øndr
–-
ACK_TIMEOUT_RND
, ACK_TIMEOUT_RND ) );

1077 
	`TimîSèπ
–&
AckTimeoutTimî
 );

1082 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1083 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT
;

1085 if–
LoRaMacFœgs
.
VÆue
 == 0 )

1087 
LoRaMacFœgs
.
Bôs
.
M˝sReq
 = 1;

1089 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1093 
B™ds
[
Ch™√ls
[
Ch™√l
].
B™d
].
La°TxD⁄eTime
 = 
curTime
;

1095 
Aggªg©edLa°TxD⁄eTime
 = 
curTime
;

1097 
	`CÆcuœãBackOff
–
Ch™√l
 );

1099 if–
NodeAckReque°ed
 =
Ál£
 )

1101 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1102 
Ch™√lsNbRïCou¡î
++;

1104 
	}
}

1106 
	$Pª∑ªRxD⁄eAb‹t
( )

1108 
LoRaMacSèã
 |
LORAMAC_RX_ABORT
;

1110 if–
NodeAckReque°ed
 )

1112 
	`OnAckTimeoutTimîEvít
( );

1115 
LoRaMacFœgs
.
Bôs
.
M˝sInd
 = 1;

1116 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1119 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 1 );

1120 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

1121 
	}
}

1123 
	$OnRadioRxD⁄e
–
uöt8_t
 *
∑ylﬂd
, 
uöt16_t
 
size
, 
öt16_t
 
rssi
, 
öt8_t
 
¢r
 )

1125 
LoRaMacHódî_t
 
macHdr
;

1126 
LoRaMacFømeCål_t
 
fCål
;

1127 
boﬁ
 
skùIndiˇti⁄
 = 
Ál£
;

1129 
uöt8_t
 
pktHódîLí
 = 0;

1130 
uöt32_t
 
addªss
 = 0;

1131 
uöt8_t
 
≠pPaylﬂdSèπIndex
 = 0;

1132 
uöt8_t
 
p‹t
 = 0xFF;

1133 
uöt8_t
 
‰ameLí
 = 0;

1134 
uöt32_t
 
mic
 = 0;

1135 
uöt32_t
 
micRx
 = 0;

1137 
uöt16_t
 
£quí˚Cou¡î
 = 0;

1138 
uöt16_t
 
£quí˚Cou¡îPªv
 = 0;

1139 
uöt16_t
 
£quí˚Cou¡îDiff
 = 0;

1140 
uöt32_t
 
downLökCou¡î
 = 0;

1142 
Mu…iˇ°P¨ams_t
 *
curMu…iˇ°P¨ams
 = 
NULL
;

1143 
uöt8_t
 *
nwkSKey
 = 
LoRaMacNwkSKey
;

1144 
uöt8_t
 *
≠pSKey
 = 
LoRaMacAµSKey
;

1146 
uöt8_t
 
mu…iˇ°
 = 0;

1148 
boﬁ
 
isMicOk
 = 
Ál£
;

1150 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

1151 
M˝sIndiˇti⁄
.
Rssi
 = 
rssi
;

1152 
M˝sIndiˇti⁄
.
Sƒ
 = 
¢r
;

1153 
M˝sIndiˇti⁄
.
RxSlŸ
 = RxSlot;

1154 
M˝sIndiˇti⁄
.
P‹t
 = 0;

1155 
M˝sIndiˇti⁄
.
Mu…iˇ°
 = 0;

1156 
M˝sIndiˇti⁄
.
FømePídög
 = 0;

1157 
M˝sIndiˇti⁄
.
Buf„r
 = 
NULL
;

1158 
M˝sIndiˇti⁄
.
Buf„rSize
 = 0;

1159 
M˝sIndiˇti⁄
.
RxD©a
 = 
Ál£
;

1160 
M˝sIndiˇti⁄
.
AckRe˚ived
 = 
Ál£
;

1161 
M˝sIndiˇti⁄
.
DownLökCou¡î
 = 0;

1162 
M˝sIndiˇti⁄
.M˝sIndiˇti⁄ = 
MCPS_UNCONFIRMED
;

1164 
Radio
.
	`SÀï
( );

1165 
	`TimîSt›
–&
RxWödowTimî2
 );

1167 
macHdr
.
VÆue
 = 
∑ylﬂd
[
pktHódîLí
++];

1169  
macHdr
.
Bôs
.
MTy≥
 )

1171 
FRAME_TYPE_JOIN_ACCEPT
:

1172 if–
IsLoRaMacNëw‹kJoöed
 =
åue
 )

1174 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

1175 
	`Pª∑ªRxD⁄eAb‹t
( );

1178 
	`LoRaMacJoöDe¸y±
–
∑ylﬂd
 + 1, 
size
 - 1, 
LoRaMacAµKey
, 
LoRaMacRxPaylﬂd
 + 1 );

1180 
LoRaMacRxPaylﬂd
[0] = 
macHdr
.
VÆue
;

1182 
	`LoRaMacJoöCompuãMic
–
LoRaMacRxPaylﬂd
, 
size
 - 
LORAMAC_MFR_LEN
, 
LoRaMacAµKey
, &
mic
 );

1184 
micRx
 |–
uöt32_t
 )
LoRaMacRxPaylﬂd
[
size
 - 
LORAMAC_MFR_LEN
];

1185 
micRx
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 1] << 8 );

1186 
micRx
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 2] << 16 );

1187 
micRx
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 3] << 24 );

1189 if–
micRx
 =
mic
 )

1191 
	`LoRaMacJoöCompuãSKeys
–
LoRaMacAµKey
, 
LoRaMacRxPaylﬂd
 + 1, 
LoRaMacDevN⁄˚
, 
LoRaMacNwkSKey
, 
LoRaMacAµSKey
 );

1193 
LoRaMacNëID
 = ( 
uöt32_t
 )
LoRaMacRxPaylﬂd
[4];

1194 
LoRaMacNëID
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[5] << 8 );

1195 
LoRaMacNëID
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[6] << 16 );

1197 
LoRaMacDevAddr
 = ( 
uöt32_t
 )
LoRaMacRxPaylﬂd
[7];

1198 
LoRaMacDevAddr
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[8] << 8 );

1199 
LoRaMacDevAddr
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[9] << 16 );

1200 
LoRaMacDevAddr
 |––
uöt32_t
 )
LoRaMacRxPaylﬂd
[10] << 24 );

1203 
LoRaMacP¨ams
.
Rx1DrOff£t
 = ( 
LoRaMacRxPaylﬂd
[11] >> 4 ) & 0x07;

1204 
LoRaMacP¨ams
.
Rx2Ch™√l
.
D©¨©e
 = 
LoRaMacRxPaylﬂd
[11] & 0x0F;

1207 
LoRaMacP¨ams
.
Re˚iveDñay1
 = ( 
LoRaMacRxPaylﬂd
[12] & 0x0F );

1208 if–
LoRaMacP¨ams
.
Re˚iveDñay1
 == 0 )

1210 
LoRaMacP¨ams
.
Re˚iveDñay1
 = 1;

1212 
LoRaMacP¨ams
.
Re˚iveDñay1
 *= 1e3;

1213 
LoRaMacP¨ams
.
Re˚iveDñay2
 = LoRaMacP¨ams.
Re˚iveDñay1
 + 1e3;

1215 #i‡!–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) )

1217 if––
size
 - 1 ) > 16 )

1219 
Ch™√lP¨ams_t
 
∑øm
;

1220 
∑øm
.
DrR™ge
.
VÆue
 = ( 
DR_5
 << 4 ) | 
DR_0
;

1222 
LoRaMacSèã
 |
LORAMAC_TX_CONFIG
;

1223  
uöt8_t
 
i
 = 3, 
j
 = 0; i < ( 5 + 3 ); i++, j += 3 )

1225 
∑øm
.
Fªquícy
 = ( ( 
uöt32_t
 )
LoRaMacRxPaylﬂd
[13 + 
j
] | ( ( uint32_t )LoRaMacRxPayload[14 + j] << 8 ) | ( ( uint32_t )LoRaMacRxPayload[15 + j] << 16 ) ) * 100;

1226 if–
∑øm
.
Fªquícy
 != 0 )

1228 
	`LoRaMacCh™√lAdd
–
i
, 
∑øm
 );

1232 
	`LoRaMacCh™√lRemove
–
i
 );

1235 
LoRaMacSèã
 &~
LORAMAC_TX_CONFIG
;

1238 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1239 
IsLoRaMacNëw‹kJoöed
 = 
åue
;

1240 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
LoRaMacP¨amsDeÁu…s
.ChannelsDatarate;

1244 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL
;

1247 
FRAME_TYPE_DATA_CONFIRMED_DOWN
:

1248 
FRAME_TYPE_DATA_UNCONFIRMED_DOWN
:

1250 
addªss
 = 
∑ylﬂd
[
pktHódîLí
++];

1251 
addªss
 |–(
uöt32_t
)
∑ylﬂd
[
pktHódîLí
++] << 8 );

1252 
addªss
 |–(
uöt32_t
)
∑ylﬂd
[
pktHódîLí
++] << 16 );

1253 
addªss
 |–(
uöt32_t
)
∑ylﬂd
[
pktHódîLí
++] << 24 );

1255 if–
addªss
 !
LoRaMacDevAddr
 )

1257 
curMu…iˇ°P¨ams
 = 
Mu…iˇ°Ch™√ls
;

1258  
curMu…iˇ°P¨ams
 !
NULL
 )

1260 if–
addªss
 =
curMu…iˇ°P¨ams
->
Addªss
 )

1262 
mu…iˇ°
 = 1;

1263 
nwkSKey
 = 
curMu…iˇ°P¨ams
->
NwkSKey
;

1264 
≠pSKey
 = 
curMu…iˇ°P¨ams
->
AµSKey
;

1265 
downLökCou¡î
 = 
curMu…iˇ°P¨ams
->
DownLökCou¡î
;

1268 
curMu…iˇ°P¨ams
 = curMu…iˇ°P¨ams->
Next
;

1270 if–
mu…iˇ°
 == 0 )

1273 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL
;

1274 
	`Pª∑ªRxD⁄eAb‹t
( );

1280 
mu…iˇ°
 = 0;

1281 
nwkSKey
 = 
LoRaMacNwkSKey
;

1282 
≠pSKey
 = 
LoRaMacAµSKey
;

1283 
downLökCou¡î
 = 
DownLökCou¡î
;

1286 
fCål
.
VÆue
 = 
∑ylﬂd
[
pktHódîLí
++];

1288 
£quí˚Cou¡î
 = ( 
uöt16_t
 )
∑ylﬂd
[
pktHódîLí
++];

1289 
£quí˚Cou¡î
 |–
uöt16_t
 )
∑ylﬂd
[
pktHódîLí
++] << 8;

1291 
≠pPaylﬂdSèπIndex
 = 8 + 
fCål
.
Bôs
.
FO±sLí
;

1293 
micRx
 |–
uöt32_t
 )
∑ylﬂd
[
size
 - 
LORAMAC_MFR_LEN
];

1294 
micRx
 |––
uöt32_t
 )
∑ylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 1] << 8 );

1295 
micRx
 |––
uöt32_t
 )
∑ylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 2] << 16 );

1296 
micRx
 |––
uöt32_t
 )
∑ylﬂd
[
size
 - 
LORAMAC_MFR_LEN
 + 3] << 24 );

1298 
£quí˚Cou¡îPªv
 = ( 
uöt16_t
 )
downLökCou¡î
;

1299 
£quí˚Cou¡îDiff
 = ( 
£quí˚Cou¡î
 - 
£quí˚Cou¡îPªv
 );

1301 if–
£quí˚Cou¡îDiff
 < ( 1 << 15 ) )

1303 
downLökCou¡î
 +
£quí˚Cou¡îDiff
;

1304 
	`LoRaMacCompuãMic
–
∑ylﬂd
, 
size
 - 
LORAMAC_MFR_LEN
, 
nwkSKey
, 
addªss
, 
DOWN_LINK
, 
downLökCou¡î
, &
mic
 );

1305 if–
micRx
 =
mic
 )

1307 
isMicOk
 = 
åue
;

1313 
uöt32_t
 
downLökCou¡îTmp
 = 
downLökCou¡î
 + 0x10000 + ( 
öt16_t
 )
£quí˚Cou¡îDiff
;

1314 
	`LoRaMacCompuãMic
–
∑ylﬂd
, 
size
 - 
LORAMAC_MFR_LEN
, 
nwkSKey
, 
addªss
, 
DOWN_LINK
, 
downLökCou¡îTmp
, &
mic
 );

1315 if–
micRx
 =
mic
 )

1317 
isMicOk
 = 
åue
;

1318 
downLökCou¡î
 = 
downLökCou¡îTmp
;

1323 if–
£quí˚Cou¡îDiff
 >
MAX_FCNT_GAP
 )

1325 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS
;

1326 
M˝sIndiˇti⁄
.
DownLökCou¡î
 = 
downLökCou¡î
;

1327 
	`Pª∑ªRxD⁄eAb‹t
( );

1331 if–
isMicOk
 =
åue
 )

1333 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1334 
M˝sIndiˇti⁄
.
Mu…iˇ°
 = 
mu…iˇ°
;

1335 
M˝sIndiˇti⁄
.
FømePídög
 = 
fCål
.
Bôs
.
FPídög
;

1336 
M˝sIndiˇti⁄
.
Buf„r
 = 
NULL
;

1337 
M˝sIndiˇti⁄
.
Buf„rSize
 = 0;

1338 
M˝sIndiˇti⁄
.
DownLökCou¡î
 = 
downLökCou¡î
;

1340 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1342 
AdrAckCou¡î
 = 0;

1343 
MacComm™dsBuf„rToRïótIndex
 = 0;

1346 if–
mu…iˇ°
 == 1 )

1348 
M˝sIndiˇti⁄
.M˝sIndiˇti⁄ = 
MCPS_MULTICAST
;

1350 if––
curMu…iˇ°P¨ams
->
DownLökCou¡î
 =
downLökCou¡î
 ) &&

1351 –
curMu…iˇ°P¨ams
->
DownLökCou¡î
 != 0 ) )

1353 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED
;

1354 
M˝sIndiˇti⁄
.
DownLökCou¡î
 = 
downLökCou¡î
;

1355 
	`Pª∑ªRxD⁄eAb‹t
( );

1358 
curMu…iˇ°P¨ams
->
DownLökCou¡î
 = 
downLökCou¡î
;

1362 if–
macHdr
.
Bôs
.
MTy≥
 =
FRAME_TYPE_DATA_CONFIRMED_DOWN
 )

1364 
SrvAckReque°ed
 = 
åue
;

1365 
M˝sIndiˇti⁄
.M˝sIndiˇti⁄ = 
MCPS_CONFIRMED
;

1367 if––
DownLökCou¡î
 =
downLökCou¡î
 ) &&

1368 –
DownLökCou¡î
 != 0 ) )

1375 
skùIndiˇti⁄
 = 
åue
;

1380 
SrvAckReque°ed
 = 
Ál£
;

1381 
M˝sIndiˇti⁄
.M˝sIndiˇti⁄ = 
MCPS_UNCONFIRMED
;

1383 if––
DownLökCou¡î
 =
downLökCou¡î
 ) &&

1384 –
DownLökCou¡î
 != 0 ) )

1386 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED
;

1387 
M˝sIndiˇti⁄
.
DownLökCou¡î
 = 
downLökCou¡î
;

1388 
	`Pª∑ªRxD⁄eAb‹t
( );

1392 
DownLökCou¡î
 = 
downLökCou¡î
;

1399 if–
M˝sC⁄fúm
.
M˝sReque°
 =
MCPS_CONFIRMED
 )

1401 if–
fCål
.
Bôs
.
Ack
 == 1 )

1403 
MacComm™dsBuf„rIndex
 = 0;

1408 
MacComm™dsBuf„rIndex
 = 0;

1412 if–––
size
 - 4 ) - 
≠pPaylﬂdSèπIndex
 ) > 0 )

1414 
p‹t
 = 
∑ylﬂd
[
≠pPaylﬂdSèπIndex
++];

1415 
‰ameLí
 = ( 
size
 - 4 ) - 
≠pPaylﬂdSèπIndex
;

1417 
M˝sIndiˇti⁄
.
P‹t
 = 
p‹t
;

1419 if–
p‹t
 == 0 )

1422 if–
fCål
.
Bôs
.
FO±sLí
 == 0 )

1424 
	`LoRaMacPaylﬂdDe¸y±
–
∑ylﬂd
 + 
≠pPaylﬂdSèπIndex
,

1425 
‰ameLí
,

1426 
nwkSKey
,

1427 
addªss
,

1428 
DOWN_LINK
,

1429 
downLökCou¡î
,

1430 
LoRaMacRxPaylﬂd
 );

1433 
	`Pro˚ssMacComm™ds
–
LoRaMacRxPaylﬂd
, 0, 
‰ameLí
, 
¢r
 );

1437 
skùIndiˇti⁄
 = 
åue
;

1442 if–
fCål
.
Bôs
.
FO±sLí
 > 0 )

1445 
	`Pro˚ssMacComm™ds
–
∑ylﬂd
, 8, 
≠pPaylﬂdSèπIndex
 - 1, 
¢r
 );

1448 
	`LoRaMacPaylﬂdDe¸y±
–
∑ylﬂd
 + 
≠pPaylﬂdSèπIndex
,

1449 
‰ameLí
,

1450 
≠pSKey
,

1451 
addªss
,

1452 
DOWN_LINK
,

1453 
downLökCou¡î
,

1454 
LoRaMacRxPaylﬂd
 );

1456 if–
skùIndiˇti⁄
 =
Ál£
 )

1458 
M˝sIndiˇti⁄
.
Buf„r
 = 
LoRaMacRxPaylﬂd
;

1459 
M˝sIndiˇti⁄
.
Buf„rSize
 = 
‰ameLí
;

1460 
M˝sIndiˇti⁄
.
RxD©a
 = 
åue
;

1466 if–
fCål
.
Bôs
.
FO±sLí
 > 0 )

1469 
	`Pro˚ssMacComm™ds
–
∑ylﬂd
, 8, 
≠pPaylﬂdSèπIndex
, 
¢r
 );

1473 if–
skùIndiˇti⁄
 =
Ál£
 )

1476 if–
fCål
.
Bôs
.
Ack
 == 1 )

1478 
M˝sC⁄fúm
.
AckRe˚ived
 = 
åue
;

1479 
M˝sIndiˇti⁄
.
AckRe˚ived
 = 
åue
;

1483 
	`TimîSt›
–&
AckTimeoutTimî
 );

1487 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

1489 if–
AckTimeoutRërõsCou¡î
 > 
AckTimeoutRërõs
 )

1493 
	`TimîSt›
–&
AckTimeoutTimî
 );

1499 
LoRaMacFœgs
.
Bôs
.
M˝sInd
 = 1;

1500 
LoRaMacFœgs
.
Bôs
.
M˝sIndSkù
 = 
skùIndiˇti⁄
;

1504 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_MIC_FAIL
;

1506 
	`Pª∑ªRxD⁄eAb‹t
( );

1511 
FRAME_TYPE_PROPRIETARY
:

1513 
	`mem˝y1
–
LoRaMacRxPaylﬂd
, &
∑ylﬂd
[
pktHódîLí
], 
size
 );

1515 
M˝sIndiˇti⁄
.M˝sIndiˇti⁄ = 
MCPS_PROPRIETARY
;

1516 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

1517 
M˝sIndiˇti⁄
.
Buf„r
 = 
LoRaMacRxPaylﬂd
;

1518 
M˝sIndiˇti⁄
.
Buf„rSize
 = 
size
 - 
pktHódîLí
;

1520 
LoRaMacFœgs
.
Bôs
.
M˝sInd
 = 1;

1524 
M˝sIndiˇti⁄
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

1525 
	`Pª∑ªRxD⁄eAb‹t
( );

1528 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1531 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 1 );

1532 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

1533 
	}
}

1535 
	$OnRadioTxTimeout
( )

1537 if–
LoRaMacDevi˚Cœss
 !
CLASS_C
 )

1539 
Radio
.
	`SÀï
( );

1543 
	`OnRxWödow2TimîEvít
( );

1546 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT
;

1547 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT
;

1548 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1549 
	}
}

1551 
	$OnRadioRxEº‹
( )

1553 if–
LoRaMacDevi˚Cœss
 !
CLASS_C
 )

1555 
Radio
.
	`SÀï
( );

1559 
	`OnRxWödow2TimîEvít
( );

1562 if–
RxSlŸ
 == 0 )

1564 if–
NodeAckReque°ed
 =
åue
 )

1566 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX1_ERROR
;

1568 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX1_ERROR
;

1570 if–
	`TimîGëEœp£dTime
–
Aggªg©edLa°TxD⁄eTime
 ) >
RxWödow2Dñay
 )

1572 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1577 if–
NodeAckReque°ed
 =
åue
 )

1579 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX2_ERROR
;

1581 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX2_ERROR
;

1582 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1584 
	}
}

1586 
	$OnRadioRxTimeout
( )

1588 if–
LoRaMacDevi˚Cœss
 !
CLASS_C
 )

1590 
Radio
.
	`SÀï
( );

1594 
	`OnRxWödow2TimîEvít
( );

1597 if–
RxSlŸ
 == 1 )

1599 if–
NodeAckReque°ed
 =
åue
 )

1601 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT
;

1603 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT
;

1604 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1606 
	}
}

1608 
	$OnMacSèãCheckTimîEvít
( )

1610 
	`TimîSt›
–&
MacSèãCheckTimî
 );

1611 
boﬁ
 
txTimeout
 = 
Ál£
;

1613 if–
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 == 1 )

1615 if––
LoRaMacSèã
 & 
LORAMAC_RX_ABORT
 ) == LORAMAC_RX_ABORT )

1617 
LoRaMacSèã
 &~
LORAMAC_RX_ABORT
;

1618 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1621 if––
LoRaMacFœgs
.
Bôs
.
MlmeReq
 =1 ) || ( ( LoRaMacFœgs.Bôs.
M˝sReq
 == 1 ) ) )

1623 if––
M˝sC⁄fúm
.
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT
 ) ||

1624 –
MlmeC⁄fúm
.
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT
 ) )

1627 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1628 
MacComm™dsBuf„rIndex
 = 0;

1629 
M˝sC⁄fúm
.
NbRërõs
 = 
AckTimeoutRërõsCou¡î
;

1630 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

1631 
M˝sC⁄fúm
.
TxTimeOnAú
 = 0;

1632 
txTimeout
 = 
åue
;

1636 if––
NodeAckReque°ed
 =
Ál£
 ) && ( 
txTimeout
 == false ) )

1638 if––
LoRaMacFœgs
.
Bôs
.
MlmeReq
 =1 ) || ( ( LoRaMacFœgs.Bôs.
M˝sReq
 == 1 ) ) )

1640 if––
LoRaMacFœgs
.
Bôs
.
MlmeReq
 =1 ) && ( 
MlmeC⁄fúm
.
MlmeReque°
 =
MLME_JOIN
 ) )

1642 
MlmeC⁄fúm
.
NbRërõs
 = 
JoöReque°Trüls
;

1644 if–
MlmeC⁄fúm
.
Sètus
 =
LORAMAC_EVENT_INFO_STATUS_OK
 )

1646 
UpLökCou¡î
 = 0;

1647 
Ch™√lsNbRïCou¡î
 = 0;

1648 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1652 if–
JoöReque°Trüls
 >
MaxJoöReque°Trüls
 )

1654 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1658 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 0;

1660 
	`OnTxDñayedTimîEvít
( );

1666 if––
Ch™√lsNbRïCou¡î
 >
LoRaMacP¨ams
.
Ch™√lsNbRï
 ) || ( 
LoRaMacFœgs
.
Bôs
.
M˝sInd
 == 1 ) )

1668 if–
LoRaMacFœgs
.
Bôs
.
M˝sInd
 == 0 )

1671 
MacComm™dsBuf„rIndex
 = 0;

1672 
AdrAckCou¡î
++;

1675 
Ch™√lsNbRïCou¡î
 = 0;

1677 if–
IsUpLökCou¡îFixed
 =
Ál£
 )

1679 
UpLökCou¡î
++;

1682 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1686 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 0;

1688 
	`OnTxDñayedTimîEvít
( );

1694 if–
LoRaMacFœgs
.
Bôs
.
M˝sInd
 == 1 )

1696 if––
M˝sC⁄fúm
.
AckRe˚ived
 =
åue
 ) || ( 
AckTimeoutRërõsCou¡î
 > 
AckTimeoutRërõs
 ) )

1698 
AckTimeoutRëry
 = 
Ál£
;

1699 
NodeAckReque°ed
 = 
Ál£
;

1700 if–
IsUpLökCou¡îFixed
 =
Ál£
 )

1702 
UpLökCou¡î
++;

1704 
M˝sC⁄fúm
.
NbRërõs
 = 
AckTimeoutRërõsCou¡î
;

1706 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1710 if––
AckTimeoutRëry
 =
åue
 ) && ( ( 
LoRaMacSèã
 & 
LORAMAC_TX_DELAYED
 ) == 0 ) )

1712 
AckTimeoutRëry
 = 
Ál£
;

1713 if––
AckTimeoutRërõsCou¡î
 < 
AckTimeoutRërõs
 ) && ( AckTimeoutRërõsCou¡î <
MAX_ACK_RETRIES
 ) )

1715 
AckTimeoutRërõsCou¡î
++;

1717 if––
AckTimeoutRërõsCou¡î
 % 2 ) == 1 )

1719 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
	`MAX
–LoRaMacP¨ams.Ch™√lsD©¨©ê- 1, 
LORAMAC_TX_MIN_DATARATE
 );

1722 if–
	`ScheduÀTx
–Ë=
LORAMAC_STATUS_OK
 )

1724 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 0;

1729 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR
;

1731 
MacComm™dsBuf„rIndex
 = 0;

1732 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1733 
NodeAckReque°ed
 = 
Ál£
;

1734 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

1735 
M˝sC⁄fúm
.
NbRërõs
 = 
AckTimeoutRërõsCou¡î
;

1736 
M˝sC⁄fúm
.
D©¨©e
 = 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
;

1737 if–
IsUpLökCou¡îFixed
 =
Ál£
 )

1739 
UpLökCou¡î
++;

1745 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

1747 
LoRaMacP¨ams
.
Ch™√lsMask
[0] = LoRaMacP¨ams.Ch™√lsMask[0] | ( 
	`LC
( 1 ) + LC( 2 ) + LC( 3 ) );

1748 #ñi‡
	`deföed
–
USE_BAND_470
 )

1750 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

1751 #ñi‡
	`deföed
–
USE_BAND_915
 )

1753 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

1754 #ñi‡
	`deföed
–
USE_BAND_915_HYBRID
 )

1756 
	`Rì«bÀCh™√ls
–
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4], 
LoRaMacP¨ams
.ChannelsMask );

1760 
LoRaMacSèã
 &~
LORAMAC_TX_RUNNING
;

1762 
MacComm™dsBuf„rIndex
 = 0;

1763 
NodeAckReque°ed
 = 
Ál£
;

1764 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

1765 
M˝sC⁄fúm
.
NbRërõs
 = 
AckTimeoutRërõsCou¡î
;

1766 if–
IsUpLökCou¡îFixed
 =
Ál£
 )

1768 
UpLökCou¡î
++;

1774 if––
LoRaMacSèã
 & 
LORAMAC_RX
 ) == LORAMAC_RX )

1776 
LoRaMacSèã
 &~
LORAMAC_RX
;

1778 if–
LoRaMacSèã
 =
LORAMAC_IDLE
 )

1780 if–
LoRaMacFœgs
.
Bôs
.
M˝sReq
 == 1 )

1782 
LoRaMacPrimôives
->
	`MacM˝sC⁄fúm
–&
M˝sC⁄fúm
 );

1783 
LoRaMacFœgs
.
Bôs
.
M˝sReq
 = 0;

1786 if–
LoRaMacFœgs
.
Bôs
.
MlmeReq
 == 1 )

1788 
LoRaMacPrimôives
->
	`MacMlmeC⁄fúm
–&
MlmeC⁄fúm
 );

1789 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 0;

1793 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 0;

1798 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 
MAC_STATE_CHECK_TIMEOUT
 );

1799 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

1802 if–
LoRaMacFœgs
.
Bôs
.
M˝sInd
 == 1 )

1804 if–
LoRaMacDevi˚Cœss
 =
CLASS_C
 )

1806 
	`OnRxWödow2TimîEvít
( );

1808 if–
LoRaMacFœgs
.
Bôs
.
M˝sIndSkù
 == 0 )

1810 
LoRaMacPrimôives
->
	`MacM˝sIndiˇti⁄
–&
M˝sIndiˇti⁄
 );

1812 
LoRaMacFœgs
.
Bôs
.
M˝sIndSkù
 = 0;

1813 
LoRaMacFœgs
.
Bôs
.
M˝sInd
 = 0;

1815 
	}
}

1817 
	$OnTxDñayedTimîEvít
( )

1819 
LoRaMacHódî_t
 
macHdr
;

1820 
LoRaMacFømeCål_t
 
fCål
;

1822 
	`TimîSt›
–&
TxDñayedTimî
 );

1823 
LoRaMacSèã
 &~
LORAMAC_TX_DELAYED
;

1825 if––
LoRaMacFœgs
.
Bôs
.
MlmeReq
 =1 ) && ( 
MlmeC⁄fúm
.
MlmeReque°
 =
MLME_JOIN
 ) )

1827 
	`Re£tMacP¨amëîs
( );

1829 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
	`A…î«ãD©¨©e
–
JoöReque°Trüls
 + 1 );

1831 
macHdr
.
VÆue
 = 0;

1832 
macHdr
.
Bôs
.
MTy≥
 = 
FRAME_TYPE_JOIN_REQ
;

1834 
fCål
.
VÆue
 = 0;

1835 
fCål
.
Bôs
.
Adr
 = 
AdrCålOn
;

1840 
	`Pª∑ªFøme
–&
macHdr
, &
fCål
, 0, 
NULL
, 0 );

1843 
	`ScheduÀTx
( );

1844 
	}
}

1846 
	$OnRxWödow1TimîEvít
( )

1848 
	`TimîSt›
–&
RxWödowTimî1
 );

1849 
RxSlŸ
 = 0;

1851 if–
LoRaMacDevi˚Cœss
 =
CLASS_C
 )

1853 
Radio
.
	`Sèndby
( );

1856 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

1857 
	`RxWödowSëup
–
Ch™√ls
[
Ch™√l
].
Fªquícy
, 
RxWödowsP¨ams
[0].
D©¨©e
, RxWödowsP¨ams[0].
B™dwidth
, RxWödowsP¨ams[0].
RxWödowTimeout
, 
Ál£
 );

1858 #ñi‡
	`deföed
–
USE_BAND_470
 )

1859 
	`RxWödowSëup
–
LORAMAC_FIRST_RX1_CHANNEL
 + ( 
Ch™√l
 % 48 ) * 
LORAMAC_STEPWIDTH_RX1_CHANNEL
, 
RxWödowsP¨ams
[0].
D©¨©e
, RxWödowsP¨ams[0].
B™dwidth
, RxWödowsP¨ams[0].
RxWödowTimeout
, 
Ál£
 );

1860 #ñi‡–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) )

1861 
	`RxWödowSëup
–
LORAMAC_FIRST_RX1_CHANNEL
 + ( 
Ch™√l
 % 8 ) * 
LORAMAC_STEPWIDTH_RX1_CHANNEL
, 
RxWödowsP¨ams
[0].
D©¨©e
, RxWödowsP¨ams[0].
B™dwidth
, RxWödowsP¨ams[0].
RxWödowTimeout
, 
Ál£
 );

1865 
	}
}

1867 
	$OnRxWödow2TimîEvít
( )

1869 
boﬁ
 
rxC⁄töuousMode
 = 
Ál£
;

1871 
	`TimîSt›
–&
RxWödowTimî2
 );

1873 if–
LoRaMacDevi˚Cœss
 =
CLASS_C
 )

1875 
rxC⁄töuousMode
 = 
åue
;

1877 if–
	`RxWödowSëup
–
LoRaMacP¨ams
.
Rx2Ch™√l
.
Fªquícy
, 
RxWödowsP¨ams
[1].
D©¨©e
, RxWödowsP¨ams[1].
B™dwidth
, RxWödowsP¨ams[1].
RxWödowTimeout
, 
rxC⁄töuousMode
 ) =
åue
 )

1879 
RxSlŸ
 = 1;

1881 
	}
}

1883 
	$OnAckTimeoutTimîEvít
( )

1885 
	`TimîSt›
–&
AckTimeoutTimî
 );

1887 if–
NodeAckReque°ed
 =
åue
 )

1889 
AckTimeoutRëry
 = 
åue
;

1890 
LoRaMacSèã
 &~
LORAMAC_ACK_REQ
;

1892 if–
LoRaMacDevi˚Cœss
 =
CLASS_C
 )

1894 
LoRaMacFœgs
.
Bôs
.
MacD⁄e
 = 1;

1896 
	}
}

1898 
boﬁ
 
	$SëNextCh™√l
–
TimîTime_t
* 
time
 )

1900 
uöt8_t
 
nbE«bÀdCh™√ls
 = 0;

1901 
uöt8_t
 
dñayTx
 = 0;

1902 
uöt8_t
 
íabÀdCh™√ls
[
LORA_MAX_NB_CHANNELS
];

1903 
TimîTime_t
 
√xtTxDñay
 = ( TimerTime_t )( -1 );

1905 
	`mem£t1
–
íabÀdCh™√ls
, 0, 
LORA_MAX_NB_CHANNELS
 );

1907 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

1908 if–
	`Cou¡NbE«bÀd125kHzCh™√ls
–
Ch™√lsMaskRemaöög
 ) == 0 )

1910 
	`mem˝y1
––
uöt8_t
* ) 
Ch™√lsMaskRemaöög
, ( uöt8_t* ) 
LoRaMacP¨ams
.
Ch™√lsMask
, 8 );

1912 if––
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 >
DR_4
 ) && ( ( 
Ch™√lsMaskRemaöög
[4] & 0x00FF ) == 0 ) )

1914 
Ch™√lsMaskRemaöög
[4] = 
LoRaMacP¨ams
.
Ch™√lsMask
[4];

1916 #ñi‡
	`deföed
–
USE_BAND_470
 )

1917 if––
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[0], 16 ) == 0 ) &&

1918 –
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[1], 16 ) == 0 ) &&

1919 –
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[2], 16 ) == 0 ) &&

1920 –
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[3], 16 ) == 0 ) &&

1921 –
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[4], 16 ) == 0 ) &&

1922 –
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[5], 16 ) == 0 ) )

1924 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

1927 if–
	`Cou¡Bôs
–
LoRaMacP¨ams
.
Ch™√lsMask
[0], 16 ) == 0 )

1930 
LoRaMacP¨ams
.
Ch™√lsMask
[0] = LoRaMacP¨ams.Ch™√lsMask[0] | ( 
	`LC
( 1 ) + LC( 2 ) + LC( 3 ) );

1935 if–
Aggªg©edTimeOff
 <
	`TimîGëEœp£dTime
–
Aggªg©edLa°TxD⁄eTime
 ) )

1937 
Aggªg©edTimeOff
 = 0;

1940  
uöt8_t
 
i
 = 0; i < 
LORA_MAX_NB_BANDS
; i++ )

1942 if––
IsLoRaMacNëw‹kJoöed
 =
Ál£
 ) || ( 
DutyCy˛eOn
 =
åue
 ) )

1944 if–
B™ds
[
i
].
TimeOff
 <
	`TimîGëEœp£dTime
–B™ds[i].
La°TxD⁄eTime
 ) )

1946 
B™ds
[
i
].
TimeOff
 = 0;

1948 if–
B™ds
[
i
].
TimeOff
 != 0 )

1950 
√xtTxDñay
 = 
	`MIN
–
B™ds
[
i
].
TimeOff
 - 
	`TimîGëEœp£dTime
–B™ds[i].
La°TxD⁄eTime
 ),ÇextTxDelay );

1955 if–
DutyCy˛eOn
 =
Ál£
 )

1957 
B™ds
[
i
].
TimeOff
 = 0;

1963  
uöt8_t
 
i
 = 0, 
k
 = 0; i < 
LORA_MAX_NB_CHANNELS
; i += 16, k++ )

1965  
uöt8_t
 
j
 = 0; j < 16; j++ )

1967 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

1968 if––
Ch™√lsMaskRemaöög
[
k
] & ( 1 << 
j
 ) ) != 0 )

1970 if––
LoRaMacP¨ams
.
Ch™√lsMask
[
k
] & ( 1 << 
j
 ) ) != 0 )

1973 if–
Ch™√ls
[
i
 + 
j
].
Fªquícy
 == 0 )

1977 #i‡
	`deföed
–
USE_BAND_868
 ) || deföed–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 )

1978 if–
IsLoRaMacNëw‹kJoöed
 =
Ál£
 )

1980 if––
JOIN_CHANNELS
 & ( 1 << 
j
 ) ) == 0 )

1986 if–––
Ch™√ls
[
i
 + 
j
].
DrR™ge
.
Fõlds
.
Mö
 <
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 ) &&

1987 –
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 <
Ch™√ls
[
i
 + 
j
].
DrR™ge
.
Fõlds
.
Max
 ) ) =
Ál£
 )

1991 if–
B™ds
[
Ch™√ls
[
i
 + 
j
].
B™d
].
TimeOff
 > 0 )

1993 
dñayTx
++;

1996 
íabÀdCh™√ls
[
nbE«bÀdCh™√ls
++] = 
i
 + 
j
;

2003 
dñayTx
++;

2004 
√xtTxDñay
 = 
Aggªg©edTimeOff
 - 
	`TimîGëEœp£dTime
–
Aggªg©edLa°TxD⁄eTime
 );

2007 if–
nbE«bÀdCh™√ls
 > 0 )

2009 
Ch™√l
 = 
íabÀdCh™√ls
[
	`øndr
–0, 
nbE«bÀdCh™√ls
 - 1 )];

2010 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2011 if–
Ch™√l
 < ( 
LORA_MAX_NB_CHANNELS
 - 8 ) )

2013 
	`DißbÀCh™√lInMask
–
Ch™√l
, 
Ch™√lsMaskRemaöög
 );

2016 *
time
 = 0;

2017  
åue
;

2021 if–
dñayTx
 > 0 )

2024 *
time
 = 
√xtTxDñay
;

2025  
åue
;

2028 *
time
 = 0;

2029  
Ál£
;

2031 
	}
}

2033 
boﬁ
 
	$RxWödowSëup
–
uöt32_t
 
‰eq
, 
öt8_t
 
d©¨©e
, uöt32_à
b™dwidth
, 
uöt16_t
 
timeout
, 
boﬁ
 
rxC⁄töuous
 )

2035 
uöt8_t
 
dow∆ökD©¨©e
 = 
D©¨©es
[
d©¨©e
];

2036 
RadioModems_t
 
modem
;

2038 if–
Radio
.
	`GëSètus
–Ë=
RF_IDLE
 )

2040 
Radio
.
	`SëCh™√l
–
‰eq
 );

2043 
M˝sIndiˇti⁄
.
RxD©¨©e
 = ( 
uöt8_t
 ) 
d©¨©e
;

2045 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

2046 if–
d©¨©e
 =
DR_7
 )

2048 
modem
 = 
MODEM_FSK
;

2049 
Radio
.
	`SëRxC⁄fig
–
modem
, 50e3, 
dow∆ökD©¨©e
 * 1e3, 0, 83.333e3, 5, 
timeout
, 
Ál£
, 0, 
åue
, 0, 0, fÆ£, 
rxC⁄töuous
 );

2053 
modem
 = 
MODEM_LORA
;

2054 
Radio
.
	`SëRxC⁄fig
–
modem
, 
b™dwidth
, 
dow∆ökD©¨©e
, 1, 0, 8, 
timeout
, 
Ál£
, 0, fÆ£, 0, 0, 
åue
, 
rxC⁄töuous
 );

2056 #ñi‡
	`deföed
–
USE_BAND_470
 ) || deföed–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2057 
modem
 = 
MODEM_LORA
;

2058 
Radio
.
	`SëRxC⁄fig
–
modem
, 
b™dwidth
, 
dow∆ökD©¨©e
, 1, 0, 8, 
timeout
, 
Ál£
, 0, fÆ£, 0, 0, 
åue
, 
rxC⁄töuous
 );

2061 if–
RïóãrSuµ‹t
 =
åue
 )

2063 
Radio
.
	`SëMaxPaylﬂdLígth
–
modem
, 
MaxPaylﬂdOfD©¨©eRïóãr
[
d©¨©e
] + 
LORA_MAC_FRMPAYLOAD_OVERHEAD
 );

2067 
Radio
.
	`SëMaxPaylﬂdLígth
–
modem
, 
MaxPaylﬂdOfD©¨©e
[
d©¨©e
] + 
LORA_MAC_FRMPAYLOAD_OVERHEAD
 );

2070 if–
rxC⁄töuous
 =
Ál£
 )

2072 
Radio
.
	`Rx
–
LoRaMacP¨ams
.
MaxRxWödow
 );

2076 
Radio
.
	`Rx
( 0 );

2078  
åue
;

2080  
Ál£
;

2081 
	}
}

2083 
boﬁ
 
	$Rx2FªqInR™ge
–
uöt32_t
 
‰eq
 )

2085 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

2086 if–
Radio
.
	`CheckRfFªquícy
–
‰eq
 ) =
åue
 )

2087 #ñi‡
	`deföed
–
USE_BAND_470
 ) || deföed–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2088 if––
Radio
.
	`CheckRfFªquícy
–
‰eq
 ) =
åue
 ) &&

2089 –
‰eq
 >
LORAMAC_FIRST_RX1_CHANNEL
 ) &&

2090 –
‰eq
 <
LORAMAC_LAST_RX1_CHANNEL
 ) &&

2091 –––
‰eq
 - ( 
uöt32_t
 ) 
LORAMAC_FIRST_RX1_CHANNEL
 ) % ( uöt32_àË
LORAMAC_STEPWIDTH_RX1_CHANNEL
 ) == 0 ) )

2094  
åue
;

2096  
Ál£
;

2097 
	}
}

2099 
boﬁ
 
	$VÆid©ePaylﬂdLígth
–
uöt8_t
 
ÀnN
, 
öt8_t
 
d©¨©e
, uöt8_à
fO±sLí
 )

2101 
uöt16_t
 
maxN
 = 0;

2102 
uöt16_t
 
∑ylﬂdSize
 = 0;

2105 if–
RïóãrSuµ‹t
 =
åue
 )

2107 
maxN
 = 
MaxPaylﬂdOfD©¨©eRïóãr
[
d©¨©e
];

2111 
maxN
 = 
MaxPaylﬂdOfD©¨©e
[
d©¨©e
];

2115 
∑ylﬂdSize
 = ( 
ÀnN
 + 
fO±sLí
 );

2118 if––
∑ylﬂdSize
 <
maxN
 ) && (ÖaylﬂdSizê<
LORAMAC_PHY_MAXPAYLOAD
 ) )

2120  
åue
;

2122  
Ál£
;

2123 
	}
}

2125 
uöt8_t
 
	$Cou¡Bôs
–
uöt16_t
 
mask
, 
uöt8_t
 
nbBôs
 )

2127 
uöt8_t
 
nbA˘iveBôs
 = 0;

2129  
uöt8_t
 
j
 = 0; j < 
nbBôs
; j++ )

2131 if––
mask
 & ( 1 << 
j
 ) ) == ( 1 << j ) )

2133 
nbA˘iveBôs
++;

2136  
nbA˘iveBôs
;

2137 
	}
}

2139 #i‡
deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2140 
uöt8_t
 
	$Cou¡NbE«bÀd125kHzCh™√ls
–
uöt16_t
 *
ch™√lsMask
 )

2142 
uöt8_t
 
nb125kHzCh™√ls
 = 0;

2144  
uöt8_t
 
i
 = 0, 
k
 = 0; i < 
LORA_MAX_NB_CHANNELS
 - 8; i += 16, k++ )

2146 
nb125kHzCh™√ls
 +
	`Cou¡Bôs
–
ch™√lsMask
[
k
], 16 );

2149  
nb125kHzCh™√ls
;

2150 
	}
}

2152 #i‡
deföed
–
USE_BAND_915_HYBRID
 )

2153 
	$Rì«bÀCh™√ls
–
uöt16_t
 
mask
, uöt16_t* 
ch™√lsMask
 )

2155 
uöt16_t
 
blockMask
 = 
mask
;

2157  
uöt8_t
 
i
 = 0, 
j
 = 0; i < 4; i++, j += 2 )

2159 
ch™√lsMask
[
i
] = 0;

2160 if––
blockMask
 & ( 1 << 
j
 ) ) != 0 )

2162 
ch™√lsMask
[
i
] |= 0x00FF;

2164 if––
blockMask
 & ( 1 << ( 
j
 + 1 ) ) ) != 0 )

2166 
ch™√lsMask
[
i
] |= 0xFF00;

2169 
ch™√lsMask
[4] = 
blockMask
;

2170 
ch™√lsMask
[5] = 0x0000;

2171 
	}
}

2173 
boﬁ
 
	$VÆid©eCh™√lMask
–
uöt16_t
* 
ch™√lsMask
 )

2175 
boﬁ
 
ch™MaskSèã
 = 
Ál£
;

2176 
uöt16_t
 
block1
 = 0;

2177 
uöt16_t
 
block2
 = 0;

2178 
uöt8_t
 
ödex
 = 0;

2180  
uöt8_t
 
i
 = 0; i < 4; i++ )

2182 
block1
 = 
ch™√lsMask
[
i
] & 0x00FF;

2183 
block2
 = 
ch™√lsMask
[
i
] & 0xFF00;

2185 if––
	`Cou¡Bôs
–
block1
, 16 ) > 5 ) && ( 
ch™MaskSèã
 =
Ál£
 ) )

2187 
ch™√lsMask
[
i
] &
block1
;

2188 
ch™√lsMask
[4] = 1 << ( 
i
 * 2 );

2189 
ch™MaskSèã
 = 
åue
;

2190 
ödex
 = 
i
;

2192 if––
	`Cou¡Bôs
–
block2
, 16 ) > 5 ) && ( 
ch™MaskSèã
 =
Ál£
 ) )

2194 
ch™√lsMask
[
i
] &
block2
;

2195 
ch™√lsMask
[4] = 1 << ( 
i
 * 2 + 1 );

2196 
ch™MaskSèã
 = 
åue
;

2197 
ödex
 = 
i
;

2202 if–
ch™MaskSèã
 =
åue
 )

2204  
uöt8_t
 
i
 = 0; i < 4; i++ )

2206 if–
i
 !
ödex
 )

2208 
ch™√lsMask
[
i
] = 0;

2212  
ch™MaskSèã
;

2213 
	}
}

2217 
boﬁ
 
	$VÆid©eD©¨©e
–
öt8_t
 
d©¨©e
, 
uöt16_t
* 
ch™√lsMask
 )

2219 if–
	`VÆueInR™ge
–
d©¨©e
, 
LORAMAC_TX_MIN_DATARATE
, 
LORAMAC_TX_MAX_DATARATE
 ) =
Ál£
 )

2221  
Ál£
;

2223  
uöt8_t
 
i
 = 0, 
k
 = 0; i < 
LORA_MAX_NB_CHANNELS
; i += 16, k++ )

2225  
uöt8_t
 
j
 = 0; j < 16; j++ )

2227 if–––
ch™√lsMask
[
k
] & ( 1 << 
j
 ) ) != 0 ) )

2229 if–
	`VÆueInR™ge
–
d©¨©e
, 
Ch™√ls
[
i
 + 
j
].
DrR™ge
.
Fõlds
.
Mö
, Ch™√ls[ò+ j].DrR™ge.Fõlds.
Max
 ) =
åue
 )

2232  
åue
;

2237  
Ál£
;

2238 
	}
}

2240 
öt8_t
 
	$LimôTxPowî
–
öt8_t
 
txPowî
, i¡8_à
maxB™dTxPowî
 )

2242 
öt8_t
 
ªsu…TxPowî
 = 
txPowî
;

2245 
ªsu…TxPowî
 = 
	`MAX
–
txPowî
, 
maxB™dTxPowî
 );

2247 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2248 if––
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 =
DR_4
 ) ||

2249 ––
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 >
DR_8
 ) && ( LoRaMacP¨ams.Ch™√lsD©¨©ê<
DR_13
 ) ) )

2251 
ªsu…TxPowî
 = 
	`MAX
–
txPowî
, 
TX_POWER_26_DBM
 );

2255 if–
	`Cou¡NbE«bÀd125kHzCh™√ls
–
LoRaMacP¨ams
.
Ch™√lsMask
 ) < 50 )

2257 
ªsu…TxPowî
 = 
	`MAX
–
txPowî
, 
TX_POWER_20_DBM
 );

2261  
ªsu…TxPowî
;

2262 
	}
}

2264 
boﬁ
 
	$VÆueInR™ge
–
öt8_t
 
vÆue
, i¡8_à
mö
, i¡8_à
max
 )

2266 if––
vÆue
 >
mö
 ) && ( vÆuê<
max
 ) )

2268  
åue
;

2270  
Ál£
;

2271 
	}
}

2273 
boﬁ
 
	$DißbÀCh™√lInMask
–
uöt8_t
 
id
, 
uöt16_t
* 
mask
 )

2275 
uöt8_t
 
ödex
 = 0;

2276 
ödex
 = 
id
 / 16;

2278 if––
ödex
 > 4 ) || ( 
id
 >
LORA_MAX_NB_CHANNELS
 ) )

2280  
Ál£
;

2284 
mask
[
ödex
] &~–1 << ( 
id
 % 16 ) );

2286  
åue
;

2287 
	}
}

2289 
boﬁ
 
	$AdrNextDr
–
boﬁ
 
adrE«bÀd
, boﬁ 
upd©eCh™√lMask
, 
öt8_t
* 
d©¨©eOut
 )

2291 
boﬁ
 
adrAckReq
 = 
Ál£
;

2292 
öt8_t
 
d©¨©e
 = 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
;

2294 if–
adrE«bÀd
 =
åue
 )

2296 if–
d©¨©e
 =
LORAMAC_TX_MIN_DATARATE
 )

2298 
AdrAckCou¡î
 = 0;

2299 
adrAckReq
 = 
Ál£
;

2303 if–
AdrAckCou¡î
 >
ADR_ACK_LIMIT
 )

2305 
adrAckReq
 = 
åue
;

2306 
LoRaMacP¨ams
.
Ch™√lsTxPowî
 = 
LORAMAC_MAX_TX_POWER
;

2310 
adrAckReq
 = 
Ál£
;

2312 if–
AdrAckCou¡î
 >–
ADR_ACK_LIMIT
 + 
ADR_ACK_DELAY
 ) )

2314 if––
AdrAckCou¡î
 % 
ADR_ACK_DELAY
 ) == 1 )

2316 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

2317 if–
d©¨©e
 > 
LORAMAC_TX_MIN_DATARATE
 )

2319 
d©¨©e
--;

2321 if–
d©¨©e
 =
LORAMAC_TX_MIN_DATARATE
 )

2323 if–
upd©eCh™√lMask
 =
åue
 )

2326 
LoRaMacP¨ams
.
Ch™√lsMask
[0] = LoRaMacP¨ams.Ch™√lsMask[0] | ( 
	`LC
( 1 ) + LC( 2 ) + LC( 3 ) );

2329 #ñi‡
	`deföed
–
USE_BAND_470
 )

2330 if–
d©¨©e
 > 
LORAMAC_TX_MIN_DATARATE
 )

2332 
d©¨©e
--;

2334 if–
d©¨©e
 =
LORAMAC_TX_MIN_DATARATE
 )

2336 if–
upd©eCh™√lMask
 =
åue
 )

2339 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

2342 #ñi‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2343 if––
d©¨©e
 > 
LORAMAC_TX_MIN_DATARATE
 ) && ( d©¨©ê=
DR_8
 ) )

2345 
d©¨©e
 = 
DR_4
;

2347 if–
d©¨©e
 > 
LORAMAC_TX_MIN_DATARATE
 )

2349 
d©¨©e
--;

2351 if–
d©¨©e
 =
LORAMAC_TX_MIN_DATARATE
 )

2353 if–
upd©eCh™√lMask
 =
åue
 )

2355 #i‡
	`deföed
–
USE_BAND_915
 )

2357 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

2360 
	`Rì«bÀCh™√ls
–
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4], 
LoRaMacP¨ams
.ChannelsMask );

2372 *
d©¨©eOut
 = 
d©¨©e
;

2374  
adrAckReq
;

2375 
	}
}

2377 
LoRaMacSètus_t
 
	$AddMacComm™d
–
uöt8_t
 
cmd
, uöt8_à
p1
, uöt8_à
p2
 )

2379 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_BUSY
;

2381 
uöt8_t
 
bufLí
 = 
LORA_MAC_COMMAND_MAX_LENGTH
 - 
MacComm™dsBuf„rToRïótIndex
;

2383  
cmd
 )

2385 
MOTE_MAC_LINK_CHECK_REQ
:

2386 if–
MacComm™dsBuf„rIndex
 < 
bufLí
 )

2388 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2390 
°©us
 = 
LORAMAC_STATUS_OK
;

2393 
MOTE_MAC_LINK_ADR_ANS
:

2394 if–
MacComm™dsBuf„rIndex
 < ( 
bufLí
 - 1 ) )

2396 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2398 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
p1
;

2399 
°©us
 = 
LORAMAC_STATUS_OK
;

2402 
MOTE_MAC_DUTY_CYCLE_ANS
:

2403 if–
MacComm™dsBuf„rIndex
 < 
bufLí
 )

2405 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2407 
°©us
 = 
LORAMAC_STATUS_OK
;

2410 
MOTE_MAC_RX_PARAM_SETUP_ANS
:

2411 if–
MacComm™dsBuf„rIndex
 < ( 
bufLí
 - 1 ) )

2413 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2415 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
p1
;

2416 
°©us
 = 
LORAMAC_STATUS_OK
;

2419 
MOTE_MAC_DEV_STATUS_ANS
:

2420 if–
MacComm™dsBuf„rIndex
 < ( 
bufLí
 - 2 ) )

2422 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2425 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
p1
;

2426 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
p2
;

2427 
°©us
 = 
LORAMAC_STATUS_OK
;

2430 
MOTE_MAC_NEW_CHANNEL_ANS
:

2431 if–
MacComm™dsBuf„rIndex
 < ( 
bufLí
 - 1 ) )

2433 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2435 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
p1
;

2436 
°©us
 = 
LORAMAC_STATUS_OK
;

2439 
MOTE_MAC_RX_TIMING_SETUP_ANS
:

2440 if–
MacComm™dsBuf„rIndex
 < 
bufLí
 )

2442 
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
++] = 
cmd
;

2444 
°©us
 = 
LORAMAC_STATUS_OK
;

2448  
LORAMAC_STATUS_SERVICE_UNKNOWN
;

2450 if–
°©us
 =
LORAMAC_STATUS_OK
 )

2452 
MacComm™dsInNextTx
 = 
åue
;

2454  
°©us
;

2455 
	}
}

2457 
uöt8_t
 
	$P¨£MacComm™dsToRïót
–
uöt8_t
* 
cmdBufIn
, uöt8_à
Àngth
, uöt8_t* 
cmdBufOut
 )

2459 
uöt8_t
 
i
 = 0;

2460 
uöt8_t
 
cmdCou¡
 = 0;

2462 if––
cmdBufIn
 =
NULL
 ) || ( 
cmdBufOut
 == NULL ) )

2467  
i
 = 0; i < 
Àngth
; i++ )

2469  
cmdBufIn
[
i
] )

2472 
MOTE_MAC_RX_PARAM_SETUP_ANS
:

2474 
cmdBufOut
[
cmdCou¡
++] = 
cmdBufIn
[
i
++];

2475 
cmdBufOut
[
cmdCou¡
++] = 
cmdBufIn
[
i
];

2478 
MOTE_MAC_RX_TIMING_SETUP_ANS
:

2480 
cmdBufOut
[
cmdCou¡
++] = 
cmdBufIn
[
i
];

2484 
MOTE_MAC_DEV_STATUS_ANS
:

2486 
i
 += 2;

2489 
MOTE_MAC_LINK_ADR_ANS
:

2490 
MOTE_MAC_NEW_CHANNEL_ANS
:

2492 
i
++;

2495 
MOTE_MAC_DUTY_CYCLE_ANS
:

2496 
MOTE_MAC_LINK_CHECK_REQ
:

2505  
cmdCou¡
;

2506 
	}
}

2508 
	$Pro˚ssMacComm™ds
–
uöt8_t
 *
∑ylﬂd
, uöt8_à
macIndex
, uöt8_à
comm™dsSize
, uöt8_à
¢r
 )

2510  
macIndex
 < 
comm™dsSize
 )

2513  
∑ylﬂd
[
macIndex
++] )

2515 
SRV_MAC_LINK_CHECK_ANS
:

2516 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_OK
;

2517 
MlmeC⁄fúm
.
DemodM¨gö
 = 
∑ylﬂd
[
macIndex
++];

2518 
MlmeC⁄fúm
.
NbG©eways
 = 
∑ylﬂd
[
macIndex
++];

2520 
SRV_MAC_LINK_ADR_REQ
:

2522 
uöt8_t
 
i
;

2523 
uöt8_t
 
°©us
 = 0x07;

2524 
uöt16_t
 
chMask
;

2525 
öt8_t
 
txPowî
 = 0;

2526 
öt8_t
 
d©¨©e
 = 0;

2527 
uöt8_t
 
nbRï
 = 0;

2528 
uöt8_t
 
chMaskC¡l
 = 0;

2529 
uöt16_t
 
ch™√lsMask
[6] = { 0, 0, 0, 0, 0, 0 };

2532  
i
 = 0; i < 6; i++ )

2534 
ch™√lsMask
[
i
] = 
LoRaMacP¨ams
.
Ch™√lsMask
[i];

2536 
d©¨©e
 = 
∑ylﬂd
[
macIndex
++];

2537 
txPowî
 = 
d©¨©e
 & 0x0F;

2538 
d©¨©e
 = ( datarate >> 4 ) & 0x0F;

2540 if––
AdrCålOn
 =
Ál£
 ) &&

2541 ––
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 !
d©¨©e
 ) || ( LoRaMacP¨ams.
Ch™√lsTxPowî
 !
txPowî
 ) ) )

2547 
	`AddMacComm™d
–
MOTE_MAC_LINK_ADR_ANS
, 0, 0 );

2548 
macIndex
 += 3;

2551 
chMask
 = ( 
uöt16_t
 )
∑ylﬂd
[
macIndex
++];

2552 
chMask
 |–
uöt16_t
 )
∑ylﬂd
[
macIndex
++] << 8;

2554 
nbRï
 = 
∑ylﬂd
[
macIndex
++];

2555 
chMaskC¡l
 = ( 
nbRï
 >> 4 ) & 0x07;

2556 
nbRï
 &= 0x0F;

2557 if–
nbRï
 == 0 )

2559 
nbRï
 = 1;

2561 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

2562 if––
chMaskC¡l
 =0 ) && ( 
chMask
 == 0 ) )

2564 
°©us
 &= 0xFE;

2566 if–––
chMaskC¡l
 >= 1 ) && ( chMaskCntl <= 5 )) ||

2567 –
chMaskC¡l
 >= 7 ) )

2570 
°©us
 &= 0xFE;

2574  
i
 = 0; i < 
LORA_MAX_NB_CHANNELS
; i++ )

2576 if–
chMaskC¡l
 == 6 )

2578 if–
Ch™√ls
[
i
].
Fªquícy
 != 0 )

2580 
chMask
 |1 << 
i
;

2585 if–––
chMask
 & ( 1 << 
i
 ) ) != 0 ) &&

2586 –
Ch™√ls
[
i
].
Fªquícy
 == 0 ) )

2588 
°©us
 &= 0xFE;

2592 
ch™√lsMask
[0] = 
chMask
;

2594 #ñi‡
	`deföed
–
USE_BAND_470
 )

2595 if–
chMaskC¡l
 == 6 )

2598  
uöt8_t
 
i
 = 0, 
k
 = 0; i < 
LORA_MAX_NB_CHANNELS
; i += 16, k++ )

2600  
uöt8_t
 
j
 = 0; j < 16; j++ )

2602 if–
Ch™√ls
[
i
 + 
j
].
Fªquícy
 != 0 )

2604 
ch™√lsMask
[
k
] |1 << 
j
;

2609 if–
chMaskC¡l
 == 7 )

2611 
°©us
 &= 0xFE;

2615  
uöt8_t
 
i
 = 0; i < 16; i++ )

2617 if–––
chMask
 & ( 1 << 
i
 ) ) != 0 ) &&

2618 –
Ch™√ls
[
chMaskC¡l
 * 16 + 
i
].
Fªquícy
 == 0 ) )

2620 
°©us
 &= 0xFE;

2623 
ch™√lsMask
[
chMaskC¡l
] = 
chMask
;

2625 #ñi‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2626 if–
chMaskC¡l
 == 6 )

2629 
ch™√lsMask
[0] = 0xFFFF;

2630 
ch™√lsMask
[1] = 0xFFFF;

2631 
ch™√lsMask
[2] = 0xFFFF;

2632 
ch™√lsMask
[3] = 0xFFFF;

2634 
ch™√lsMask
[4] = 
chMask
;

2636 if–
chMaskC¡l
 == 7 )

2639 
ch™√lsMask
[0] = 0x0000;

2640 
ch™√lsMask
[1] = 0x0000;

2641 
ch™√lsMask
[2] = 0x0000;

2642 
ch™√lsMask
[3] = 0x0000;

2644 
ch™√lsMask
[4] = 
chMask
;

2646 if–
chMaskC¡l
 == 5 )

2649 
°©us
 &= 0xFE;

2653 
ch™√lsMask
[
chMaskC¡l
] = 
chMask
;

2656 if––
d©¨©e
 < 
DR_4
 ) && ( 
	`Cou¡NbE«bÀd125kHzCh™√ls
–
ch™√lsMask
 ) < 2 ) )

2658 
°©us
 &= 0xFE;

2661 #i‡
	`deföed
–
USE_BAND_915_HYBRID
 )

2662 if–
	`VÆid©eCh™√lMask
–
ch™√lsMask
 ) =
Ál£
 )

2664 
°©us
 &= 0xFE;

2671 if–
	`VÆid©eD©¨©e
–
d©¨©e
, 
ch™√lsMask
 ) =
Ál£
 )

2673 
°©us
 &= 0xFD;

2679 if–
	`VÆueInR™ge
–
txPowî
, 
LORAMAC_MAX_TX_POWER
, 
LORAMAC_MIN_TX_POWER
 ) =
Ál£
 )

2681 
°©us
 &= 0xFB;

2683 if––
°©us
 & 0x07 ) == 0x07 )

2685 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
d©¨©e
;

2686 
LoRaMacP¨ams
.
Ch™√lsTxPowî
 = 
txPowî
;

2688 
	`mem˝y1
––
uöt8_t
* )
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* )
ch™√lsMask
, ( LoRaMacParams.ChannelsMask ) );

2690 
LoRaMacP¨ams
.
Ch™√lsNbRï
 = 
nbRï
;

2691 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2693 
Ch™√lsMaskRemaöög
[0] &
ch™√lsMask
[0];

2694 
Ch™√lsMaskRemaöög
[1] &
ch™√lsMask
[1];

2695 
Ch™√lsMaskRemaöög
[2] &
ch™√lsMask
[2];

2696 
Ch™√lsMaskRemaöög
[3] &
ch™√lsMask
[3];

2697 
Ch™√lsMaskRemaöög
[4] = 
ch™√lsMask
[4];

2698 
Ch™√lsMaskRemaöög
[5] = 
ch™√lsMask
[5];

2701 
	`AddMacComm™d
–
MOTE_MAC_LINK_ADR_ANS
, 
°©us
, 0 );

2704 
SRV_MAC_DUTY_CYCLE_REQ
:

2705 
MaxDCy˛e
 = 
∑ylﬂd
[
macIndex
++];

2706 
Aggªg©edDCy˛e
 = 1 << 
MaxDCy˛e
;

2707 
	`AddMacComm™d
–
MOTE_MAC_DUTY_CYCLE_ANS
, 0, 0 );

2709 
SRV_MAC_RX_PARAM_SETUP_REQ
:

2711 
uöt8_t
 
°©us
 = 0x07;

2712 
öt8_t
 
d©¨©e
 = 0;

2713 
öt8_t
 
drOff£t
 = 0;

2714 
uöt32_t
 
‰eq
 = 0;

2716 
drOff£t
 = ( 
∑ylﬂd
[
macIndex
] >> 4 ) & 0x07;

2717 
d©¨©e
 = 
∑ylﬂd
[
macIndex
] & 0x0F;

2718 
macIndex
++;

2720 
‰eq
 = ( 
uöt32_t
 )
∑ylﬂd
[
macIndex
++];

2721 
‰eq
 |–
uöt32_t
 )
∑ylﬂd
[
macIndex
++] << 8;

2722 
‰eq
 |–
uöt32_t
 )
∑ylﬂd
[
macIndex
++] << 16;

2723 
‰eq
 *= 100;

2725 if–
	`Rx2FªqInR™ge
–
‰eq
 ) =
Ál£
 )

2727 
°©us
 &= 0xFE;

2730 if–
	`VÆueInR™ge
–
d©¨©e
, 
LORAMAC_RX_MIN_DATARATE
, 
LORAMAC_RX_MAX_DATARATE
 ) =
Ál£
 )

2732 
°©us
 &= 0xFD;

2734 #i‡–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) )

2735 if––
	`VÆueInR™ge
–
d©¨©e
, 
DR_5
, 
DR_7
 ) =
åue
 ) ||

2736 –
d©¨©e
 > 
DR_13
 ) )

2738 
°©us
 &= 0xFD;

2741 if–
	`VÆueInR™ge
–
drOff£t
, 
LORAMAC_MIN_RX1_DR_OFFSET
, 
LORAMAC_MAX_RX1_DR_OFFSET
 ) =
Ál£
 )

2743 
°©us
 &= 0xFB;

2746 if––
°©us
 & 0x07 ) == 0x07 )

2748 
LoRaMacP¨ams
.
Rx2Ch™√l
.
D©¨©e
 = 
d©¨©e
;

2749 
LoRaMacP¨ams
.
Rx2Ch™√l
.
Fªquícy
 = 
‰eq
;

2750 
LoRaMacP¨ams
.
Rx1DrOff£t
 = 
drOff£t
;

2752 
	`AddMacComm™d
–
MOTE_MAC_RX_PARAM_SETUP_ANS
, 
°©us
, 0 );

2755 
SRV_MAC_DEV_STATUS_REQ
:

2757 
uöt8_t
 
b©ãryLevñ
 = 
BAT_LEVEL_NO_MEASURE
;

2758 if––
LoRaMacCÆlbacks
 !
NULL
 ) && ( LoRaMacCÆlbacks->
GëB©ãryLevñ
 != NULL ) )

2760 
b©ãryLevñ
 = 
LoRaMacCÆlbacks
->
	`GëB©ãryLevñ
( );

2762 
	`AddMacComm™d
–
MOTE_MAC_DEV_STATUS_ANS
, 
b©ãryLevñ
, 
¢r
 );

2765 
SRV_MAC_NEW_CHANNEL_REQ
:

2767 
uöt8_t
 
°©us
 = 0x03;

2769 #i‡
	`deföed
–
USE_BAND_470
 ) || deföed–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

2770 
°©us
 &= 0xFC;

2771 
macIndex
 += 5;

2773 
öt8_t
 
ch™√lIndex
 = 0;

2774 
Ch™√lP¨ams_t
 
chP¨am
;

2776 
ch™√lIndex
 = 
∑ylﬂd
[
macIndex
++];

2777 
chP¨am
.
Fªquícy
 = ( 
uöt32_t
 )
∑ylﬂd
[
macIndex
++];

2778 
chP¨am
.
Fªquícy
 |–
uöt32_t
 )
∑ylﬂd
[
macIndex
++] << 8;

2779 
chP¨am
.
Fªquícy
 |–
uöt32_t
 )
∑ylﬂd
[
macIndex
++] << 16;

2780 
chP¨am
.
Fªquícy
 *= 100;

2781 
chP¨am
.
DrR™ge
.
VÆue
 = 
∑ylﬂd
[
macIndex
++];

2783 
LoRaMacSèã
 |
LORAMAC_TX_CONFIG
;

2784 if–
chP¨am
.
Fªquícy
 == 0 )

2786 if–
ch™√lIndex
 < 3 )

2788 
°©us
 &= 0xFC;

2792 if–
	`LoRaMacCh™√lRemove
–
ch™√lIndex
 ) !
LORAMAC_STATUS_OK
 )

2794 
°©us
 &= 0xFC;

2800  
	`LoRaMacCh™√lAdd
–
ch™√lIndex
, 
chP¨am
 ) )

2802 
LORAMAC_STATUS_OK
:

2806 
LORAMAC_STATUS_FREQUENCY_INVALID
:

2808 
°©us
 &= 0xFE;

2811 
LORAMAC_STATUS_DATARATE_INVALID
:

2813 
°©us
 &= 0xFD;

2816 
LORAMAC_STATUS_FREQ_AND_DR_INVALID
:

2818 
°©us
 &= 0xFC;

2823 
°©us
 &= 0xFC;

2828 
LoRaMacSèã
 &~
LORAMAC_TX_CONFIG
;

2830 
	`AddMacComm™d
–
MOTE_MAC_NEW_CHANNEL_ANS
, 
°©us
, 0 );

2833 
SRV_MAC_RX_TIMING_SETUP_REQ
:

2835 
uöt8_t
 
dñay
 = 
∑ylﬂd
[
macIndex
++] & 0x0F;

2837 if–
dñay
 == 0 )

2839 
dñay
++;

2841 
LoRaMacP¨ams
.
Re˚iveDñay1
 = 
dñay
 * 1e3;

2842 
LoRaMacP¨ams
.
Re˚iveDñay2
 = LoRaMacP¨ams.
Re˚iveDñay1
 + 1e3;

2843 
	`AddMacComm™d
–
MOTE_MAC_RX_TIMING_SETUP_ANS
, 0, 0 );

2851 
	}
}

2853 
LoRaMacSètus_t
 
	$Síd
–
LoRaMacHódî_t
 *
macHdr
, 
uöt8_t
 
fP‹t
, *
fBuf„r
, 
uöt16_t
 
fBuf„rSize
 )

2855 
LoRaMacFømeCål_t
 
fCål
;

2856 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

2858 
fCål
.
VÆue
 = 0;

2859 
fCål
.
Bôs
.
FO±sLí
 = 0;

2860 
fCål
.
Bôs
.
FPídög
 = 0;

2861 
fCål
.
Bôs
.
Ack
 = 
Ál£
;

2862 
fCål
.
Bôs
.
AdrAckReq
 = 
Ál£
;

2863 
fCål
.
Bôs
.
Adr
 = 
AdrCålOn
;

2866 
°©us
 = 
	`Pª∑ªFøme
–
macHdr
, &
fCål
, 
fP‹t
, 
fBuf„r
, 
fBuf„rSize
 );

2869 if–
°©us
 !
LORAMAC_STATUS_OK
 )

2871  
°©us
;

2875 
M˝sC⁄fúm
.
NbRërõs
 = 0;

2876 
M˝sC⁄fúm
.
AckRe˚ived
 = 
Ál£
;

2877 
M˝sC⁄fúm
.
UpLökCou¡î
 = UpLinkCounter;

2879 
°©us
 = 
	`ScheduÀTx
( );

2881  
°©us
;

2882 
	}
}

2884 
LoRaMacSètus_t
 
	$ScheduÀTx
( )

2886 
TimîTime_t
 
dutyCy˛eTimeOff
 = 0;

2889 if–
MaxDCy˛e
 == 255 )

2891  
LORAMAC_STATUS_DEVICE_OFF
;

2893 if–
MaxDCy˛e
 == 0 )

2895 
Aggªg©edTimeOff
 = 0;

2899  
	`SëNextCh™√l
–&
dutyCy˛eTimeOff
 ) =
Ál£
 )

2902 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
LoRaMacP¨amsDeÁu…s
.ChannelsDatarate;

2904 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

2906 
LoRaMacP¨ams
.
Ch™√lsMask
[0] = LoRaMacP¨ams.Ch™√lsMask[0] | ( 
	`LC
( 1 ) + LC( 2 ) + LC( 3 ) );

2911 #i‡–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) )

2912 
RxWödowsP¨ams
[0] = 
	`CompuãRxWödowP¨amëîs
–
D©¨©eOff£ts
[
LoRaMacP¨ams
.
Ch™√lsD©¨©e
][LoRaMacP¨ams.
Rx1DrOff£t
], LoRaMacP¨ams.
Sy°emMaxRxEº‹
 );

2914 
RxWödowsP¨ams
[0] = 
	`CompuãRxWödowP¨amëîs
–
	`MAX
–
DR_0
, 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 - LoRaMacP¨ams.
Rx1DrOff£t
 ), LoRaMacP¨ams.
Sy°emMaxRxEº‹
 );

2917 
RxWödowsP¨ams
[1] = 
	`CompuãRxWödowP¨amëîs
–
LoRaMacP¨ams
.
Rx2Ch™√l
.
D©¨©e
, LoRaMacP¨ams.
Sy°emMaxRxEº‹
 );

2919 if–
IsLoRaMacNëw‹kJoöed
 =
Ál£
 )

2921 
RxWödow1Dñay
 = 
LoRaMacP¨ams
.
JoöAc˚±Dñay1
 + 
RxWödowsP¨ams
[0].
RxOff£t
;

2922 
RxWödow2Dñay
 = 
LoRaMacP¨ams
.
JoöAc˚±Dñay2
 + 
RxWödowsP¨ams
[1].
RxOff£t
;

2926 if–
	`VÆid©ePaylﬂdLígth
–
LoRaMacTxPaylﬂdLí
, 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
, 
MacComm™dsBuf„rIndex
 ) =
Ál£
 )

2928  
LORAMAC_STATUS_LENGTH_ERROR
;

2930 
RxWödow1Dñay
 = 
LoRaMacP¨ams
.
Re˚iveDñay1
 + 
RxWödowsP¨ams
[0].
RxOff£t
;

2931 
RxWödow2Dñay
 = 
LoRaMacP¨ams
.
Re˚iveDñay2
 + 
RxWödowsP¨ams
[1].
RxOff£t
;

2935 if–
dutyCy˛eTimeOff
 == 0 )

2938  
	`SídFømeOnCh™√l
–
Ch™√ls
[
Ch™√l
] );

2943 
LoRaMacSèã
 |
LORAMAC_TX_DELAYED
;

2944 
	`TimîSëVÆue
–&
TxDñayedTimî
, 
dutyCy˛eTimeOff
 );

2945 
	`TimîSèπ
–&
TxDñayedTimî
 );

2947  
LORAMAC_STATUS_OK
;

2949 
	}
}

2951 
uöt16_t
 
	$JoöDutyCy˛e
( )

2953 
uöt16_t
 
dutyCy˛e
 = 0;

2954 
TimîTime_t
 
timeEœp£d
 = 
	`TimîGëEœp£dTime
–
LoRaMacInôüliz©i⁄Time
 );

2956 if–
timeEœp£d
 < 3600e3 )

2958 
dutyCy˛e
 = 
BACKOFF_DC_1_HOUR
;

2960 if–
timeEœp£d
 < ( 3600e3 + 36000e3 ) )

2962 
dutyCy˛e
 = 
BACKOFF_DC_10_HOURS
;

2966 
dutyCy˛e
 = 
BACKOFF_DC_24_HOURS
;

2968  
dutyCy˛e
;

2969 
	}
}

2971 
	$CÆcuœãBackOff
–
uöt8_t
 
ch™√l
 )

2973 
uöt16_t
 
dutyCy˛e
 = 
B™ds
[
Ch™√ls
[
ch™√l
].
B™d
].
DCy˛e
;

2974 
uöt16_t
 
joöDutyCy˛e
 = 0;

2977 
B™ds
[
Ch™√ls
[
ch™√l
].
B™d
].
TimeOff
 = 0;

2979 if–
IsLoRaMacNëw‹kJoöed
 =
Ál£
 )

2982 
joöDutyCy˛e
 = 
	`JoöDutyCy˛e
( );

2983 
dutyCy˛e
 = 
	`MAX
–dutyCy˛e, 
joöDutyCy˛e
 );

2986 
B™ds
[
Ch™√ls
[
ch™√l
].
B™d
].
TimeOff
 = 
TxTimeOnAú
 * 
dutyCy˛e
 - TxTimeOnAir;

2990 if–
DutyCy˛eOn
 =
åue
 )

2992 
B™ds
[
Ch™√ls
[
ch™√l
].
B™d
].
TimeOff
 = 
TxTimeOnAú
 * 
dutyCy˛e
 - TxTimeOnAir;

2997 
Aggªg©edTimeOff
 = Aggªg©edTimeOf‡+ ( 
TxTimeOnAú
 * 
Aggªg©edDCy˛e
 - TxTimeOnAir );

2998 
	}
}

3000 
öt8_t
 
	$A…î«ãD©¨©e
–
uöt16_t
 
nbTrüls
 )

3002 
öt8_t
 
d©¨©e
 = 
LORAMAC_TX_MIN_DATARATE
;

3003 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3004 #i‡
	`deföed
–
USE_BAND_915
 )

3006 
LoRaMacP¨ams
.
Ch™√lsMask
[4] = 0x00FF;

3009 
	`Rì«bÀCh™√ls
–
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4], 
LoRaMacP¨ams
.ChannelsMask );

3012 if––
nbTrüls
 & 0x01 ) == 0x01 )

3014 
d©¨©e
 = 
DR_4
;

3018 
d©¨©e
 = 
DR_0
;

3021 if––
nbTrüls
 % 48 ) == 0 )

3023 
d©¨©e
 = 
DR_0
;

3025 if––
nbTrüls
 % 32 ) == 0 )

3027 
d©¨©e
 = 
DR_1
;

3029 if––
nbTrüls
 % 24 ) == 0 )

3031 
d©¨©e
 = 
DR_2
;

3033 if––
nbTrüls
 % 16 ) == 0 )

3035 
d©¨©e
 = 
DR_3
;

3037 if––
nbTrüls
 % 8 ) == 0 )

3039 
d©¨©e
 = 
DR_4
;

3043 
d©¨©e
 = 
DR_5
;

3046  
d©¨©e
;

3047 
	}
}

3049 
	$Re£tMacP¨amëîs
( )

3051 
IsLoRaMacNëw‹kJoöed
 = 
Ál£
;

3054 
UpLökCou¡î
 = 0;

3055 
DownLökCou¡î
 = 0;

3056 
AdrAckCou¡î
 = 0;

3058 
Ch™√lsNbRïCou¡î
 = 0;

3060 
AckTimeoutRërõs
 = 1;

3061 
AckTimeoutRërõsCou¡î
 = 1;

3062 
AckTimeoutRëry
 = 
Ál£
;

3064 
MaxDCy˛e
 = 0;

3065 
Aggªg©edDCy˛e
 = 1;

3067 
MacComm™dsBuf„rIndex
 = 0;

3068 
MacComm™dsBuf„rToRïótIndex
 = 0;

3070 
IsRxWödowsE«bÀd
 = 
åue
;

3072 
LoRaMacP¨ams
.
Ch™√lsTxPowî
 = 
LoRaMacP¨amsDeÁu…s
.ChannelsTxPower;

3073 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
LoRaMacP¨amsDeÁu…s
.ChannelsDatarate;

3075 
LoRaMacP¨ams
.
Rx1DrOff£t
 = 
LoRaMacP¨amsDeÁu…s
.Rx1DrOffset;

3076 
LoRaMacP¨ams
.
Rx2Ch™√l
 = 
LoRaMacP¨amsDeÁu…s
.Rx2Channel;

3078 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨ams
.
Ch™√lsMask
, ( uöt8_t* ) 
LoRaMacP¨amsDeÁu…s
.ChannelsMask, ( LoRaMacParams.ChannelsMask ) );

3080 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3081 
	`mem˝y1
––
uöt8_t
* ) 
Ch™√lsMaskRemaöög
, ( uöt8_t* ) 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
, –
LoRaMacP¨ams
.ChannelsMask ) );

3085 
NodeAckReque°ed
 = 
Ál£
;

3086 
SrvAckReque°ed
 = 
Ál£
;

3087 
MacComm™dsInNextTx
 = 
Ál£
;

3090 
Mu…iˇ°P¨ams_t
 *
cur
 = 
Mu…iˇ°Ch™√ls
;

3091  
cur
 !
NULL
 )

3093 
cur
->
DownLökCou¡î
 = 0;

3094 
cur
 = cur->
Next
;

3098 
Ch™√l
 = 
LORA_MAX_NB_CHANNELS
;

3099 
	}
}

3101 
LoRaMacSètus_t
 
	$Pª∑ªFøme
–
LoRaMacHódî_t
 *
macHdr
, 
LoRaMacFømeCål_t
 *
fCål
, 
uöt8_t
 
fP‹t
, *
fBuf„r
, 
uöt16_t
 
fBuf„rSize
 )

3103 
uöt16_t
 
i
;

3104 
uöt8_t
 
pktHódîLí
 = 0;

3105 
uöt32_t
 
mic
 = 0;

3106 c⁄° * 
∑ylﬂd
 = 
fBuf„r
;

3107 
uöt8_t
 
‰ameP‹t
 = 
fP‹t
;

3109 
LoRaMacBuf„rPktLí
 = 0;

3111 
NodeAckReque°ed
 = 
Ál£
;

3113 if–
fBuf„r
 =
NULL
 )

3115 
fBuf„rSize
 = 0;

3118 
LoRaMacTxPaylﬂdLí
 = 
fBuf„rSize
;

3120 
LoRaMacBuf„r
[
pktHódîLí
++] = 
macHdr
->
VÆue
;

3122  
macHdr
->
Bôs
.
MTy≥
 )

3124 
FRAME_TYPE_JOIN_REQ
:

3125 
LoRaMacBuf„rPktLí
 = 
pktHódîLí
;

3127 
	`mem˝yr
–
LoRaMacBuf„r
 + 
LoRaMacBuf„rPktLí
, 
LoRaMacAµEui
, 8 );

3128 
LoRaMacBuf„rPktLí
 += 8;

3129 
	`mem˝yr
–
LoRaMacBuf„r
 + 
LoRaMacBuf„rPktLí
, 
LoRaMacDevEui
, 8 );

3130 
LoRaMacBuf„rPktLí
 += 8;

3132 
LoRaMacDevN⁄˚
 = 
Radio
.
	`R™dom
( );

3134 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = 
LoRaMacDevN⁄˚
 & 0xFF;

3135 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = ( 
LoRaMacDevN⁄˚
 >> 8 ) & 0xFF;

3137 
	`LoRaMacJoöCompuãMic
–
LoRaMacBuf„r
, 
LoRaMacBuf„rPktLí
 & 0xFF, 
LoRaMacAµKey
, &
mic
 );

3139 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = 
mic
 & 0xFF;

3140 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = ( 
mic
 >> 8 ) & 0xFF;

3141 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = ( 
mic
 >> 16 ) & 0xFF;

3142 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
++] = ( 
mic
 >> 24 ) & 0xFF;

3145 
FRAME_TYPE_DATA_CONFIRMED_UP
:

3146 
NodeAckReque°ed
 = 
åue
;

3148 
FRAME_TYPE_DATA_UNCONFIRMED_UP
:

3149 if–
IsLoRaMacNëw‹kJoöed
 =
Ál£
 )

3151  
LORAMAC_STATUS_NO_NETWORK_JOINED
;

3154 
fCål
->
Bôs
.
AdrAckReq
 = 
	`AdrNextDr
–fCål->Bôs.
Adr
, 
åue
, &
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 );

3156 if–
SrvAckReque°ed
 =
åue
 )

3158 
SrvAckReque°ed
 = 
Ál£
;

3159 
fCål
->
Bôs
.
Ack
 = 1;

3162 
LoRaMacBuf„r
[
pktHódîLí
++] = ( 
LoRaMacDevAddr
 ) & 0xFF;

3163 
LoRaMacBuf„r
[
pktHódîLí
++] = ( 
LoRaMacDevAddr
 >> 8 ) & 0xFF;

3164 
LoRaMacBuf„r
[
pktHódîLí
++] = ( 
LoRaMacDevAddr
 >> 16 ) & 0xFF;

3165 
LoRaMacBuf„r
[
pktHódîLí
++] = ( 
LoRaMacDevAddr
 >> 24 ) & 0xFF;

3167 
LoRaMacBuf„r
[
pktHódîLí
++] = 
fCål
->
VÆue
;

3169 
LoRaMacBuf„r
[
pktHódîLí
++] = 
UpLökCou¡î
 & 0xFF;

3170 
LoRaMacBuf„r
[
pktHódîLí
++] = ( 
UpLökCou¡î
 >> 8 ) & 0xFF;

3173 
	`mem˝y1
–&
MacComm™dsBuf„r
[
MacComm™dsBuf„rIndex
], 
MacComm™dsBuf„rToRïót
, 
MacComm™dsBuf„rToRïótIndex
 );

3174 
MacComm™dsBuf„rIndex
 +
MacComm™dsBuf„rToRïótIndex
;

3176 if––
∑ylﬂd
 !
NULL
 ) && ( 
LoRaMacTxPaylﬂdLí
 > 0 ) )

3178 if––
MacComm™dsBuf„rIndex
 <
LORA_MAC_COMMAND_MAX_LENGTH
 ) && ( 
MacComm™dsInNextTx
 =
åue
 ) )

3180 
fCål
->
Bôs
.
FO±sLí
 +
MacComm™dsBuf„rIndex
;

3183 
LoRaMacBuf„r
[0x05] = 
fCål
->
VÆue
;

3184  
i
 = 0; i < 
MacComm™dsBuf„rIndex
; i++ )

3186 
LoRaMacBuf„r
[
pktHódîLí
++] = 
MacComm™dsBuf„r
[
i
];

3192 if––
MacComm™dsBuf„rIndex
 > 0 ) && ( 
MacComm™dsInNextTx
 ) )

3194 
LoRaMacTxPaylﬂdLí
 = 
MacComm™dsBuf„rIndex
;

3195 
∑ylﬂd
 = 
MacComm™dsBuf„r
;

3196 
‰ameP‹t
 = 0;

3199 
MacComm™dsInNextTx
 = 
Ál£
;

3201 
MacComm™dsBuf„rToRïótIndex
 = 
	`P¨£MacComm™dsToRïót
–
MacComm™dsBuf„r
, 
MacComm™dsBuf„rIndex
, 
MacComm™dsBuf„rToRïót
 );

3202 if–
MacComm™dsBuf„rToRïótIndex
 > 0 )

3204 
MacComm™dsInNextTx
 = 
åue
;

3207 if––
∑ylﬂd
 !
NULL
 ) && ( 
LoRaMacTxPaylﬂdLí
 > 0 ) )

3209 
LoRaMacBuf„r
[
pktHódîLí
++] = 
‰ameP‹t
;

3211 if–
‰ameP‹t
 == 0 )

3213 
	`LoRaMacPaylﬂdEn¸y±
–(
uöt8_t
* ) 
∑ylﬂd
, 
LoRaMacTxPaylﬂdLí
, 
LoRaMacNwkSKey
, 
LoRaMacDevAddr
, 
UP_LINK
, 
UpLökCou¡î
, &
LoRaMacBuf„r
[
pktHódîLí
] );

3217 
	`LoRaMacPaylﬂdEn¸y±
–(
uöt8_t
* ) 
∑ylﬂd
, 
LoRaMacTxPaylﬂdLí
, 
LoRaMacAµSKey
, 
LoRaMacDevAddr
, 
UP_LINK
, 
UpLökCou¡î
, &
LoRaMacBuf„r
[
pktHódîLí
] );

3220 
LoRaMacBuf„rPktLí
 = 
pktHódîLí
 + 
LoRaMacTxPaylﬂdLí
;

3222 
	`LoRaMacCompuãMic
–
LoRaMacBuf„r
, 
LoRaMacBuf„rPktLí
, 
LoRaMacNwkSKey
, 
LoRaMacDevAddr
, 
UP_LINK
, 
UpLökCou¡î
, &
mic
 );

3224 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
 + 0] = 
mic
 & 0xFF;

3225 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
 + 1] = ( 
mic
 >> 8 ) & 0xFF;

3226 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
 + 2] = ( 
mic
 >> 16 ) & 0xFF;

3227 
LoRaMacBuf„r
[
LoRaMacBuf„rPktLí
 + 3] = ( 
mic
 >> 24 ) & 0xFF;

3229 
LoRaMacBuf„rPktLí
 +
LORAMAC_MFR_LEN
;

3232 
FRAME_TYPE_PROPRIETARY
:

3233 if––
fBuf„r
 !
NULL
 ) && ( 
LoRaMacTxPaylﬂdLí
 > 0 ) )

3235 
	`mem˝y1
–
LoRaMacBuf„r
 + 
pktHódîLí
, ( 
uöt8_t
* ) 
fBuf„r
, 
LoRaMacTxPaylﬂdLí
 );

3236 
LoRaMacBuf„rPktLí
 = 
pktHódîLí
 + 
LoRaMacTxPaylﬂdLí
;

3240  
LORAMAC_STATUS_SERVICE_UNKNOWN
;

3243  
LORAMAC_STATUS_OK
;

3244 
	}
}

3246 
LoRaMacSètus_t
 
	$SídFømeOnCh™√l
–
Ch™√lP¨ams_t
 
ch™√l
 )

3248 
öt8_t
 
d©¨©e
 = 
D©¨©es
[
LoRaMacP¨ams
.
Ch™√lsD©¨©e
];

3249 
öt8_t
 
txPowîIndex
 = 0;

3250 
öt8_t
 
txPowî
 = 0;

3252 
txPowîIndex
 = 
	`LimôTxPowî
–
LoRaMacP¨ams
.
Ch™√lsTxPowî
, 
B™ds
[
ch™√l
.
B™d
].
TxMaxPowî
 );

3253 
txPowî
 = 
TxPowîs
[
txPowîIndex
];

3255 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

3256 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

3257 
M˝sC⁄fúm
.
D©¨©e
 = 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
;

3258 
M˝sC⁄fúm
.
TxPowî
 = 
txPowîIndex
;

3259 
M˝sC⁄fúm
.
UpLökFªquícy
 = 
ch™√l
.
Fªquícy
;

3261 
Radio
.
	`SëCh™√l
–
ch™√l
.
Fªquícy
 );

3263 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

3264 if–
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 =
DR_7
 )

3266 
Radio
.
	`SëMaxPaylﬂdLígth
–
MODEM_FSK
, 
LoRaMacBuf„rPktLí
 );

3267 
Radio
.
	`SëTxC⁄fig
–
MODEM_FSK
, 
txPowî
, 25e3, 0, 
d©¨©e
 * 1e3, 0, 5, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3268 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_FSK
, 
LoRaMacBuf„rPktLí
 );

3271 if–
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 =
DR_6
 )

3273 
Radio
.
	`SëMaxPaylﬂdLígth
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3274 
Radio
.
	`SëTxC⁄fig
–
MODEM_LORA
, 
txPowî
, 0, 1, 
d©¨©e
, 1, 8, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3275 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3279 
Radio
.
	`SëMaxPaylﬂdLígth
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3280 
Radio
.
	`SëTxC⁄fig
–
MODEM_LORA
, 
txPowî
, 0, 0, 
d©¨©e
, 1, 8, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3281 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3283 #ñi‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3284 
Radio
.
	`SëMaxPaylﬂdLígth
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3285 if–
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 >
DR_4
 )

3287 
Radio
.
	`SëTxC⁄fig
–
MODEM_LORA
, 
txPowî
, 0, 2, 
d©¨©e
, 1, 8, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3288 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3292 
Radio
.
	`SëTxC⁄fig
–
MODEM_LORA
, 
txPowî
, 0, 0, 
d©¨©e
, 1, 8, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3293 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3295 #ñi‡
	`deföed
–
USE_BAND_470
 )

3296 
Radio
.
	`SëMaxPaylﬂdLígth
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3297 
Radio
.
	`SëTxC⁄fig
–
MODEM_LORA
, 
txPowî
, 0, 0, 
d©¨©e
, 1, 8, 
Ál£
, 
åue
, 0, 0, false, 3e3 );

3298 
TxTimeOnAú
 = 
Radio
.
	`TimeOnAú
–
MODEM_LORA
, 
LoRaMacBuf„rPktLí
 );

3304 
M˝sC⁄fúm
.
TxTimeOnAú
 = TxTimeOnAir;

3305 
MlmeC⁄fúm
.
TxTimeOnAú
 = TxTimeOnAir;

3308 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 
MAC_STATE_CHECK_TIMEOUT
 );

3309 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

3311 if–
IsLoRaMacNëw‹kJoöed
 =
Ál£
 )

3313 
JoöReque°Trüls
++;

3317 
Radio
.
	`Síd
–
LoRaMacBuf„r
, 
LoRaMacBuf„rPktLí
 );

3319 
LoRaMacSèã
 |
LORAMAC_TX_RUNNING
;

3321  
LORAMAC_STATUS_OK
;

3322 
	}
}

3324 
LoRaMacSètus_t
 
	$SëTxC⁄töuousWave
–
uöt16_t
 
timeout
 )

3326 
öt8_t
 
txPowîIndex
 = 0;

3327 
öt8_t
 
txPowî
 = 0;

3329 
txPowîIndex
 = 
	`LimôTxPowî
–
LoRaMacP¨ams
.
Ch™√lsTxPowî
, 
B™ds
[
Ch™√ls
[
Ch™√l
].
B™d
].
TxMaxPowî
 );

3330 
txPowî
 = 
TxPowîs
[
txPowîIndex
];

3333 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 
MAC_STATE_CHECK_TIMEOUT
 );

3334 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

3336 
Radio
.
	`SëTxC⁄töuousWave
–
Ch™√ls
[
Ch™√l
].
Fªquícy
, 
txPowî
, 
timeout
 );

3338 
LoRaMacSèã
 |
LORAMAC_TX_RUNNING
;

3340  
LORAMAC_STATUS_OK
;

3341 
	}
}

3343 
LoRaMacSètus_t
 
	$SëTxC⁄töuousWave1
–
uöt16_t
 
timeout
, 
uöt32_t
 
‰equícy
, 
uöt8_t
 
powî
 )

3345 
Radio
.
	`SëTxC⁄töuousWave
–
‰equícy
, 
powî
, 
timeout
 );

3348 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 
MAC_STATE_CHECK_TIMEOUT
 );

3349 
	`TimîSèπ
–&
MacSèãCheckTimî
 );

3351 
LoRaMacSèã
 |
LORAMAC_TX_RUNNING
;

3353  
LORAMAC_STATUS_OK
;

3354 
	}
}

3356 
LoRaMacSètus_t
 
	$LoRaMacInôüliz©i⁄
–
LoRaMacPrimôives_t
 *
¥imôives
, 
LoRaMacCÆlback_t
 *
ˇŒbacks
 )

3358 if–
¥imôives
 =
NULL
 )

3360  
LORAMAC_STATUS_PARAMETER_INVALID
;

3363 if––
¥imôives
->
MacM˝sC⁄fúm
 =
NULL
 ) ||

3364 –
¥imôives
->
MacM˝sIndiˇti⁄
 =
NULL
 ) ||

3365 –
¥imôives
->
MacMlmeC⁄fúm
 =
NULL
 ) )

3367  
LORAMAC_STATUS_PARAMETER_INVALID
;

3370 
LoRaMacPrimôives
 = 
¥imôives
;

3371 
LoRaMacCÆlbacks
 = 
ˇŒbacks
;

3373 
LoRaMacFœgs
.
VÆue
 = 0;

3375 
LoRaMacDevi˚Cœss
 = 
CLASS_A
;

3376 
LoRaMacSèã
 = 
LORAMAC_IDLE
;

3378 
JoöReque°Trüls
 = 0;

3379 
MaxJoöReque°Trüls
 = 1;

3380 
RïóãrSuµ‹t
 = 
Ál£
;

3383 
Aggªg©edLa°TxD⁄eTime
 = 0;

3384 
Aggªg©edTimeOff
 = 0;

3387 #i‡
	`deföed
–
USE_BAND_433
 )

3388 
DutyCy˛eOn
 = 
åue
;

3389 #ñi‡
	`deföed
–
USE_BAND_470
 )

3390 
DutyCy˛eOn
 = 
Ál£
;

3391 #ñi‡
	`deföed
–
USE_BAND_780
 )

3392 
DutyCy˛eOn
 = 
åue
;

3393 #ñi‡
	`deföed
–
USE_BAND_868
 )

3394 
DutyCy˛eOn
 = 
åue
;

3395 #ñi‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3396 
DutyCy˛eOn
 = 
Ál£
;

3402 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsTxPowî
 = 
LORAMAC_DEFAULT_TX_POWER
;

3403 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsD©¨©e
 = 
LORAMAC_DEFAULT_DATARATE
;

3405 
LoRaMacP¨amsDeÁu…s
.
Sy°emMaxRxEº‹
 = 10;

3406 
LoRaMacP¨amsDeÁu…s
.
MöRxSymbﬁs
 = 6;

3407 
LoRaMacP¨amsDeÁu…s
.
MaxRxWödow
 = 
MAX_RX_WINDOW
;

3408 
LoRaMacP¨amsDeÁu…s
.
Re˚iveDñay1
 = 
RECEIVE_DELAY1
;

3409 
LoRaMacP¨amsDeÁu…s
.
Re˚iveDñay2
 = 
RECEIVE_DELAY2
;

3410 
LoRaMacP¨amsDeÁu…s
.
JoöAc˚±Dñay1
 = 
JOIN_ACCEPT_DELAY1
;

3411 
LoRaMacP¨amsDeÁu…s
.
JoöAc˚±Dñay2
 = 
JOIN_ACCEPT_DELAY2
;

3413 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsNbRï
 = 1;

3414 
LoRaMacP¨amsDeÁu…s
.
Rx1DrOff£t
 = 0;

3416 
LoRaMacP¨amsDeÁu…s
.
Rx2Ch™√l
 = ( 
Rx2Ch™√lP¨ams_t
 )
RX_WND_2_CHANNEL
;

3419 #i‡
	`deföed
–
USE_BAND_433
 )

3420 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 
	`LC
( 1 ) + LC( 2 ) + LC( 3 );

3421 #ñi‡
	`deföed
 ( 
USE_BAND_470
 )

3422 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 0xFFFF;

3423 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[1] = 0xFFFF;

3424 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[2] = 0xFFFF;

3425 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[3] = 0xFFFF;

3426 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4] = 0xFFFF;

3427 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[5] = 0xFFFF;

3428 #ñi‡
	`deföed
–
USE_BAND_780
 )

3429 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 
	`LC
( 1 ) + LC( 2 ) + LC( 3 );

3430 #ñi‡
	`deföed
–
USE_BAND_868
 )

3431 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 
	`LC
( 1 ) + LC( 2 ) + LC( 3 );

3432 #ñi‡
	`deföed
–
USE_BAND_915
 )

3433 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 0xFFFF;

3434 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[1] = 0xFFFF;

3435 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[2] = 0xFFFF;

3436 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[3] = 0xFFFF;

3437 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4] = 0x00FF;

3438 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[5] = 0x0000;

3439 #ñi‡
	`deföed
–
USE_BAND_915_HYBRID
 )

3440 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[0] = 0x00FF;

3441 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[1] = 0x0000;

3442 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[2] = 0x0000;

3443 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[3] = 0x0000;

3444 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[4] = 0x0001;

3445 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[5] = 0x0000;

3450 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3452  
uöt8_t
 
i
 = 0; i < 
LORA_MAX_NB_CHANNELS
 - 8; i++ )

3454 
Ch™√ls
[
i
].
Fªquícy
 = 902.3e6 + i * 200e3;

3455 
Ch™√ls
[
i
].
DrR™ge
.
VÆue
 = ( 
DR_3
 << 4 ) | 
DR_0
;

3456 
Ch™√ls
[
i
].
B™d
 = 0;

3459  
uöt8_t
 
i
 = 
LORA_MAX_NB_CHANNELS
 - 8; i < LORA_MAX_NB_CHANNELS; i++ )

3461 
Ch™√ls
[
i
].
Fªquícy
 = 903.0e6 + ( i - ( 
LORA_MAX_NB_CHANNELS
 - 8 ) ) * 1.6e6;

3462 
Ch™√ls
[
i
].
DrR™ge
.
VÆue
 = ( 
DR_4
 << 4 ) | DR_4;

3463 
Ch™√ls
[
i
].
B™d
 = 0;

3465 #ñi‡
	`deföed
–
USE_BAND_470
 )

3467  
uöt8_t
 
i
 = 0; i < 
LORA_MAX_NB_CHANNELS
; i++ )

3469 
Ch™√ls
[
i
].
Fªquícy
 = 470.3e6 + i * 200e3;

3470 
Ch™√ls
[
i
].
DrR™ge
.
VÆue
 = ( 
DR_5
 << 4 ) | 
DR_0
;

3471 
Ch™√ls
[
i
].
B™d
 = 0;

3476 
LoRaMacP¨ams
.
Sy°emMaxRxEº‹
 = 
LoRaMacP¨amsDeÁu…s
.SystemMaxRxError;

3477 
LoRaMacP¨ams
.
MöRxSymbﬁs
 = 
LoRaMacP¨amsDeÁu…s
.MinRxSymbols;

3478 
LoRaMacP¨ams
.
MaxRxWödow
 = 
LoRaMacP¨amsDeÁu…s
.MaxRxWindow;

3479 
LoRaMacP¨ams
.
Re˚iveDñay1
 = 
LoRaMacP¨amsDeÁu…s
.ReceiveDelay1;

3480 
LoRaMacP¨ams
.
Re˚iveDñay2
 = 
LoRaMacP¨amsDeÁu…s
.ReceiveDelay2;

3481 
LoRaMacP¨ams
.
JoöAc˚±Dñay1
 = 
LoRaMacP¨amsDeÁu…s
.JoinAcceptDelay1;

3482 
LoRaMacP¨ams
.
JoöAc˚±Dñay2
 = 
LoRaMacP¨amsDeÁu…s
.JoinAcceptDelay2;

3483 
LoRaMacP¨ams
.
Ch™√lsNbRï
 = 
LoRaMacP¨amsDeÁu…s
.ChannelsNbRep;

3485 
	`Re£tMacP¨amëîs
( );

3488 
	`TimîInô
–&
MacSèãCheckTimî
, 
OnMacSèãCheckTimîEvít
 );

3489 
	`TimîSëVÆue
–&
MacSèãCheckTimî
, 
MAC_STATE_CHECK_TIMEOUT
 );

3491 
	`TimîInô
–&
TxDñayedTimî
, 
OnTxDñayedTimîEvít
 );

3492 
	`TimîInô
–&
RxWödowTimî1
, 
OnRxWödow1TimîEvít
 );

3493 
	`TimîInô
–&
RxWödowTimî2
, 
OnRxWödow2TimîEvít
 );

3494 
	`TimîInô
–&
AckTimeoutTimî
, 
OnAckTimeoutTimîEvít
 );

3497 
LoRaMacInôüliz©i⁄Time
 = 
	`TimîGëCuºítTime
( );

3500 
RadioEvíts
.
TxD⁄e
 = 
OnRadioTxD⁄e
;

3501 
RadioEvíts
.
RxD⁄e
 = 
OnRadioRxD⁄e
;

3502 
RadioEvíts
.
RxEº‹
 = 
OnRadioRxEº‹
;

3503 
RadioEvíts
.
TxTimeout
 = 
OnRadioTxTimeout
;

3504 
RadioEvíts
.
RxTimeout
 = 
OnRadioRxTimeout
;

3505 
Radio
.
	`Inô
–&
RadioEvíts
 );

3508 
	`§™d1
–
Radio
.
	`R™dom
( ) );

3510 
PublicNëw‹k
 = 
åue
;

3511 
Radio
.
	`SëPublicNëw‹k
–
PublicNëw‹k
 );

3512 
Radio
.
	`SÀï
( );

3514  
LORAMAC_STATUS_OK
;

3515 
	}
}

3517 
LoRaMacSètus_t
 
	$LoRaMacQuîyTxPossibÀ
–
uöt8_t
 
size
, 
LoRaMacTxInfo_t
* 
txInfo
 )

3519 
öt8_t
 
d©¨©e
 = 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsD©¨©e
;

3520 
uöt8_t
 
fO±Lí
 = 
MacComm™dsBuf„rIndex
 + 
MacComm™dsBuf„rToRïótIndex
;

3522 if–
txInfo
 =
NULL
 )

3524  
LORAMAC_STATUS_PARAMETER_INVALID
;

3527 
	`AdrNextDr
–
AdrCålOn
, 
Ál£
, &
d©¨©e
 );

3529 if–
RïóãrSuµ‹t
 =
åue
 )

3531 
txInfo
->
CuºítPaylﬂdSize
 = 
MaxPaylﬂdOfD©¨©eRïóãr
[
d©¨©e
];

3535 
txInfo
->
CuºítPaylﬂdSize
 = 
MaxPaylﬂdOfD©¨©e
[
d©¨©e
];

3538 if–
txInfo
->
CuºítPaylﬂdSize
 >
fO±Lí
 )

3540 
txInfo
->
MaxPossibÀPaylﬂd
 =ÅxInfo->
CuºítPaylﬂdSize
 - 
fO±Lí
;

3544  
LORAMAC_STATUS_MAC_CMD_LENGTH_ERROR
;

3547 if–
	`VÆid©ePaylﬂdLígth
–
size
, 
d©¨©e
, 0 ) =
Ál£
 )

3549  
LORAMAC_STATUS_LENGTH_ERROR
;

3552 if–
	`VÆid©ePaylﬂdLígth
–
size
, 
d©¨©e
, 
fO±Lí
 ) =
Ál£
 )

3554  
LORAMAC_STATUS_MAC_CMD_LENGTH_ERROR
;

3557  
LORAMAC_STATUS_OK
;

3558 
	}
}

3560 
LoRaMacSètus_t
 
	$LoRaMacMibGëReque°C⁄fúm
–
MibReque°C⁄fúm_t
 *
mibGë
 )

3562 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_OK
;

3564 if–
mibGë
 =
NULL
 )

3566  
LORAMAC_STATUS_PARAMETER_INVALID
;

3569  
mibGë
->
Ty≥
 )

3571 
MIB_DEVICE_CLASS
:

3573 
mibGë
->
P¨am
.
Cœss
 = 
LoRaMacDevi˚Cœss
;

3576 
MIB_NETWORK_JOINED
:

3578 
mibGë
->
P¨am
.
IsNëw‹kJoöed
 = 
IsLoRaMacNëw‹kJoöed
;

3581 
MIB_ADR
:

3583 
mibGë
->
P¨am
.
AdrE«bÀ
 = 
AdrCålOn
;

3586 
MIB_NET_ID
:

3588 
mibGë
->
P¨am
.
NëID
 = 
LoRaMacNëID
;

3591 
MIB_DEV_ADDR
:

3593 
mibGë
->
P¨am
.
DevAddr
 = 
LoRaMacDevAddr
;

3596 
MIB_NWK_SKEY
:

3598 
mibGë
->
P¨am
.
NwkSKey
 = 
LoRaMacNwkSKey
;

3601 
MIB_APP_SKEY
:

3603 
mibGë
->
P¨am
.
AµSKey
 = 
LoRaMacAµSKey
;

3606 
MIB_PUBLIC_NETWORK
:

3608 
mibGë
->
P¨am
.
E«bÀPublicNëw‹k
 = 
PublicNëw‹k
;

3611 
MIB_REPEATER_SUPPORT
:

3613 
mibGë
->
P¨am
.
E«bÀRïóãrSuµ‹t
 = 
RïóãrSuµ‹t
;

3616 
MIB_CHANNELS
:

3618 
mibGë
->
P¨am
.
Ch™√lLi°
 = 
Ch™√ls
;

3621 
MIB_RX2_CHANNEL
:

3623 
mibGë
->
P¨am
.
Rx2Ch™√l
 = 
LoRaMacP¨ams
.Rx2Channel;

3626 
MIB_RX2_DEFAULT_CHANNEL
:

3628 
mibGë
->
P¨am
.
Rx2Ch™√l
 = 
LoRaMacP¨amsDeÁu…s
.Rx2Channel;

3631 
MIB_CHANNELS_DEFAULT_MASK
:

3633 
mibGë
->
P¨am
.
Ch™√lsDeÁu…Mask
 = 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
;

3636 
MIB_CHANNELS_MASK
:

3638 
mibGë
->
P¨am
.
Ch™√lsMask
 = 
LoRaMacP¨ams
.ChannelsMask;

3641 
MIB_CHANNELS_NB_REP
:

3643 
mibGë
->
P¨am
.
Ch™√lNbRï
 = 
LoRaMacP¨ams
.
Ch™√lsNbRï
;

3646 
MIB_MAX_RX_WINDOW_DURATION
:

3648 
mibGë
->
P¨am
.
MaxRxWödow
 = 
LoRaMacP¨ams
.MaxRxWindow;

3651 
MIB_RECEIVE_DELAY_1
:

3653 
mibGë
->
P¨am
.
Re˚iveDñay1
 = 
LoRaMacP¨ams
.ReceiveDelay1;

3656 
MIB_RECEIVE_DELAY_2
:

3658 
mibGë
->
P¨am
.
Re˚iveDñay2
 = 
LoRaMacP¨ams
.ReceiveDelay2;

3661 
MIB_JOIN_ACCEPT_DELAY_1
:

3663 
mibGë
->
P¨am
.
JoöAc˚±Dñay1
 = 
LoRaMacP¨ams
.JoinAcceptDelay1;

3666 
MIB_JOIN_ACCEPT_DELAY_2
:

3668 
mibGë
->
P¨am
.
JoöAc˚±Dñay2
 = 
LoRaMacP¨ams
.JoinAcceptDelay2;

3671 
MIB_CHANNELS_DEFAULT_DATARATE
:

3673 
mibGë
->
P¨am
.
Ch™√lsDeÁu…D©¨©e
 = 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsD©¨©e
;

3676 
MIB_CHANNELS_DATARATE
:

3678 
mibGë
->
P¨am
.
Ch™√lsD©¨©e
 = 
LoRaMacP¨ams
.ChannelsDatarate;

3681 
MIB_CHANNELS_DEFAULT_TX_POWER
:

3683 
mibGë
->
P¨am
.
Ch™√lsDeÁu…TxPowî
 = 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsTxPowî
;

3686 
MIB_CHANNELS_TX_POWER
:

3688 
mibGë
->
P¨am
.
Ch™√lsTxPowî
 = 
LoRaMacP¨ams
.ChannelsTxPower;

3691 
MIB_UPLINK_COUNTER
:

3693 
mibGë
->
P¨am
.
UpLökCou¡î
 = UpLinkCounter;

3696 
MIB_DOWNLINK_COUNTER
:

3698 
mibGë
->
P¨am
.
DownLökCou¡î
 = DownLinkCounter;

3701 
MIB_MULTICAST_CHANNEL
:

3703 
mibGë
->
P¨am
.
Mu…iˇ°Li°
 = 
Mu…iˇ°Ch™√ls
;

3706 
MIB_SYSTEM_MAX_RX_ERROR
:

3708 
mibGë
->
P¨am
.
Sy°emMaxRxEº‹
 = 
LoRaMacP¨ams
.SystemMaxRxError;

3711 
MIB_MIN_RX_SYMBOLS
:

3713 
mibGë
->
P¨am
.
MöRxSymbﬁs
 = 
LoRaMacP¨ams
.MinRxSymbols;

3717 
°©us
 = 
LORAMAC_STATUS_SERVICE_UNKNOWN
;

3721  
°©us
;

3722 
	}
}

3724 
LoRaMacSètus_t
 
	$LoRaMacMibSëReque°C⁄fúm
–
MibReque°C⁄fúm_t
 *
mibSë
 )

3726 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_OK
;

3728 if–
mibSë
 =
NULL
 )

3730  
LORAMAC_STATUS_PARAMETER_INVALID
;

3732 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

3734  
LORAMAC_STATUS_BUSY
;

3737  
mibSë
->
Ty≥
 )

3739 
MIB_DEVICE_CLASS
:

3741 
LoRaMacDevi˚Cœss
 = 
mibSë
->
P¨am
.
Cœss
;

3742  
LoRaMacDevi˚Cœss
 )

3744 
CLASS_A
:

3747 
Radio
.
	`SÀï
( );

3750 
CLASS_B
:

3754 
CLASS_C
:

3757 
NodeAckReque°ed
 = 
Ál£
;

3758 
	`OnRxWödow2TimîEvít
( );

3764 
MIB_NETWORK_JOINED
:

3766 
IsLoRaMacNëw‹kJoöed
 = 
mibSë
->
P¨am
.
IsNëw‹kJoöed
;

3769 
MIB_ADR
:

3771 
AdrCålOn
 = 
mibSë
->
P¨am
.
AdrE«bÀ
;

3774 
MIB_NET_ID
:

3776 
LoRaMacNëID
 = 
mibSë
->
P¨am
.
NëID
;

3779 
MIB_DEV_ADDR
:

3781 
LoRaMacDevAddr
 = 
mibSë
->
P¨am
.
DevAddr
;

3784 
MIB_NWK_SKEY
:

3786 if–
mibSë
->
P¨am
.
NwkSKey
 !
NULL
 )

3788 
	`mem˝y1
–
LoRaMacNwkSKey
, 
mibSë
->
P¨am
.
NwkSKey
,

3789 –
LoRaMacNwkSKey
 ) );

3793 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3797 
MIB_APP_SKEY
:

3799 if–
mibSë
->
P¨am
.
AµSKey
 !
NULL
 )

3801 
	`mem˝y1
–
LoRaMacAµSKey
, 
mibSë
->
P¨am
.
AµSKey
,

3802 –
LoRaMacAµSKey
 ) );

3806 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3810 
MIB_PUBLIC_NETWORK
:

3812 
PublicNëw‹k
 = 
mibSë
->
P¨am
.
E«bÀPublicNëw‹k
;

3813 
Radio
.
	`SëPublicNëw‹k
–
PublicNëw‹k
 );

3816 
MIB_REPEATER_SUPPORT
:

3818 
RïóãrSuµ‹t
 = 
mibSë
->
P¨am
.
E«bÀRïóãrSuµ‹t
;

3821 
MIB_RX2_CHANNEL
:

3823 
LoRaMacP¨ams
.
Rx2Ch™√l
 = 
mibSë
->
P¨am
.Rx2Channel;

3826 
MIB_RX2_DEFAULT_CHANNEL
:

3828 
LoRaMacP¨amsDeÁu…s
.
Rx2Ch™√l
 = 
mibSë
->
P¨am
.
Rx2DeÁu…Ch™√l
;

3831 
MIB_CHANNELS_DEFAULT_MASK
:

3833 if–
mibSë
->
P¨am
.
Ch™√lsDeÁu…Mask
 )

3835 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3836 
boﬁ
 
ch™MaskSèã
 = 
åue
;

3838 #i‡
	`deföed
–
USE_BAND_915_HYBRID
 )

3839 
ch™MaskSèã
 = 
	`VÆid©eCh™√lMask
–
mibSë
->
P¨am
.
Ch™√lsDeÁu…Mask
 );

3841 if–
ch™MaskSèã
 =
åue
 )

3843 if––
	`Cou¡NbE«bÀd125kHzCh™√ls
–
mibSë
->
P¨am
.
Ch™√lsMask
 ) < 2 ) &&

3844 –
	`Cou¡NbE«bÀd125kHzCh™√ls
–
mibSë
->
P¨am
.
Ch™√lsMask
 ) > 0 ) )

3846 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3850 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
,

3851 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsDeÁu…Mask
, –
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
 ) );

3852  
uöt8_t
 
i
 = 0; i < –
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
 ) / 2; i++ )

3855 
Ch™√lsMaskRemaöög
[
i
] &
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
[i];

3861 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3863 #ñi‡
	`deföed
–
USE_BAND_470
 )

3864 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
,

3865 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsDeÁu…Mask
, –
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
 ) );

3867 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsMask
,

3868 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsDeÁu…Mask
, 2 );

3873 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3877 
MIB_CHANNELS_MASK
:

3879 if–
mibSë
->
P¨am
.
Ch™√lsMask
 )

3881 #i‡
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

3882 
boﬁ
 
ch™MaskSèã
 = 
åue
;

3884 #i‡
	`deföed
–
USE_BAND_915_HYBRID
 )

3885 
ch™MaskSèã
 = 
	`VÆid©eCh™√lMask
–
mibSë
->
P¨am
.
Ch™√lsMask
 );

3887 if–
ch™MaskSèã
 =
åue
 )

3889 if––
	`Cou¡NbE«bÀd125kHzCh™√ls
–
mibSë
->
P¨am
.
Ch™√lsMask
 ) < 2 ) &&

3890 –
	`Cou¡NbE«bÀd125kHzCh™√ls
–
mibSë
->
P¨am
.
Ch™√lsMask
 ) > 0 ) )

3892 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3896 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨ams
.
Ch™√lsMask
,

3897 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsMask
, –
LoRaMacP¨ams
.ChannelsMask ) );

3898  
uöt8_t
 
i
 = 0; i < –
LoRaMacP¨ams
.
Ch™√lsMask
 ) / 2; i++ )

3901 
Ch™√lsMaskRemaöög
[
i
] &
LoRaMacP¨ams
.
Ch™√lsMask
[i];

3907 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3909 #ñi‡
	`deföed
–
USE_BAND_470
 )

3910 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨ams
.
Ch™√lsMask
,

3911 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsMask
, –
LoRaMacP¨ams
.ChannelsMask ) );

3913 
	`mem˝y1
––
uöt8_t
* ) 
LoRaMacP¨ams
.
Ch™√lsMask
,

3914 –
uöt8_t
* ) 
mibSë
->
P¨am
.
Ch™√lsMask
, 2 );

3919 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3923 
MIB_CHANNELS_NB_REP
:

3925 if––
mibSë
->
P¨am
.
Ch™√lNbRï
 >= 1 ) &&

3926 –
mibSë
->
P¨am
.
Ch™√lNbRï
 <= 15 ) )

3928 
LoRaMacP¨ams
.
Ch™√lsNbRï
 = 
mibSë
->
P¨am
.
Ch™√lNbRï
;

3932 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3936 
MIB_MAX_RX_WINDOW_DURATION
:

3938 
LoRaMacP¨ams
.
MaxRxWödow
 = 
mibSë
->
P¨am
.MaxRxWindow;

3941 
MIB_RECEIVE_DELAY_1
:

3943 
LoRaMacP¨ams
.
Re˚iveDñay1
 = 
mibSë
->
P¨am
.ReceiveDelay1;

3946 
MIB_RECEIVE_DELAY_2
:

3948 
LoRaMacP¨ams
.
Re˚iveDñay2
 = 
mibSë
->
P¨am
.ReceiveDelay2;

3951 
MIB_JOIN_ACCEPT_DELAY_1
:

3953 
LoRaMacP¨ams
.
JoöAc˚±Dñay1
 = 
mibSë
->
P¨am
.JoinAcceptDelay1;

3956 
MIB_JOIN_ACCEPT_DELAY_2
:

3958 
LoRaMacP¨ams
.
JoöAc˚±Dñay2
 = 
mibSë
->
P¨am
.JoinAcceptDelay2;

3961 
MIB_CHANNELS_DEFAULT_DATARATE
:

3963 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

3964 if–
	`VÆueInR™ge
–
mibSë
->
P¨am
.
Ch™√lsDeÁu…D©¨©e
,

3965 
DR_0
, 
DR_5
 ) )

3967 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsD©¨©e
 = 
mibSë
->
P¨am
.
Ch™√lsDeÁu…D©¨©e
;

3970 if–
	`VÆueInR™ge
–
mibSë
->
P¨am
.
Ch™√lsDeÁu…D©¨©e
,

3971 
LORAMAC_TX_MIN_DATARATE
, 
LORAMAC_TX_MAX_DATARATE
 ) )

3973 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsD©¨©e
 = 
mibSë
->
P¨am
.
Ch™√lsDeÁu…D©¨©e
;

3978 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3982 
MIB_CHANNELS_DATARATE
:

3984 if–
	`VÆueInR™ge
–
mibSë
->
P¨am
.
Ch™√lsD©¨©e
,

3985 
LORAMAC_TX_MIN_DATARATE
, 
LORAMAC_TX_MAX_DATARATE
 ) )

3987 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
mibSë
->
P¨am
.ChannelsDatarate;

3991 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

3995 
MIB_CHANNELS_DEFAULT_TX_POWER
:

3997 if–
	`VÆueInR™ge
–
mibSë
->
P¨am
.
Ch™√lsDeÁu…TxPowî
,

3998 
LORAMAC_MAX_TX_POWER
, 
LORAMAC_MIN_TX_POWER
 ) )

4000 
LoRaMacP¨amsDeÁu…s
.
Ch™√lsTxPowî
 = 
mibSë
->
P¨am
.
Ch™√lsDeÁu…TxPowî
;

4004 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

4008 
MIB_CHANNELS_TX_POWER
:

4010 if–
	`VÆueInR™ge
–
mibSë
->
P¨am
.
Ch™√lsTxPowî
,

4011 
LORAMAC_MAX_TX_POWER
, 
LORAMAC_MIN_TX_POWER
 ) )

4013 
LoRaMacP¨ams
.
Ch™√lsTxPowî
 = 
mibSë
->
P¨am
.ChannelsTxPower;

4017 
°©us
 = 
LORAMAC_STATUS_PARAMETER_INVALID
;

4021 
MIB_UPLINK_COUNTER
:

4023 
UpLökCou¡î
 = 
mibSë
->
P¨am
.UpLinkCounter;

4026 
MIB_DOWNLINK_COUNTER
:

4028 
DownLökCou¡î
 = 
mibSë
->
P¨am
.DownLinkCounter;

4031 
MIB_SYSTEM_MAX_RX_ERROR
:

4033 
LoRaMacP¨ams
.
Sy°emMaxRxEº‹
 = 
LoRaMacP¨amsDeÁu…s
.Sy°emMaxRxEº‹ = 
mibSë
->
P¨am
.SystemMaxRxError;

4036 
MIB_MIN_RX_SYMBOLS
:

4038 
LoRaMacP¨ams
.
MöRxSymbﬁs
 = 
LoRaMacP¨amsDeÁu…s
.MöRxSymbﬁ†
mibSë
->
P¨am
.MinRxSymbols;

4042 
°©us
 = 
LORAMAC_STATUS_SERVICE_UNKNOWN
;

4046  
°©us
;

4047 
	}
}

4049 
LoRaMacSètus_t
 
	$LoRaMacCh™√lAdd
–
uöt8_t
 
id
, 
Ch™√lP¨ams_t
 
∑øms
 )

4051 #i‡
	`deföed
–
USE_BAND_470
 ) || deföed–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 )

4052  
LORAMAC_STATUS_PARAMETER_INVALID
;

4054 
boﬁ
 
d©¨©eInvÆid
 = 
Ál£
;

4055 
boﬁ
 
‰equícyInvÆid
 = 
Ál£
;

4056 
uöt8_t
 
b™d
 = 0;

4059 if–
id
 >
LORA_MAX_NB_CHANNELS
 )

4061  
LORAMAC_STATUS_PARAMETER_INVALID
;

4064 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

4066 if––
LoRaMacSèã
 & 
LORAMAC_TX_CONFIG
 ) != LORAMAC_TX_CONFIG )

4068  
LORAMAC_STATUS_BUSY
;

4072 if––
∑øms
.
DrR™ge
.
Fõlds
.
Mö
 >Ö¨ams.DrR™ge.Fõlds.
Max
 ) ||

4073 –
	`VÆueInR™ge
–
∑øms
.
DrR™ge
.
Fõlds
.
Mö
, 
LORAMAC_TX_MIN_DATARATE
,

4074 
LORAMAC_TX_MAX_DATARATE
 ) =
Ál£
 ) ||

4075 –
	`VÆueInR™ge
–
∑øms
.
DrR™ge
.
Fõlds
.
Max
, 
LORAMAC_TX_MIN_DATARATE
,

4076 
LORAMAC_TX_MAX_DATARATE
 ) =
Ál£
 ) )

4078 
d©¨©eInvÆid
 = 
åue
;

4081 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

4082 if–
id
 < 3 )

4084 if–
∑øms
.
Fªquícy
 !
Ch™√ls
[
id
].Frequency )

4086 
‰equícyInvÆid
 = 
åue
;

4089 if–
∑øms
.
DrR™ge
.
Fõlds
.
Mö
 > 
DR_0
 )

4091 
d©¨©eInvÆid
 = 
åue
;

4093 if–
	`VÆueInR™ge
–
∑øms
.
DrR™ge
.
Fõlds
.
Max
, 
DR_5
, 
LORAMAC_TX_MAX_DATARATE
 ) =
Ál£
 )

4095 
d©¨©eInvÆid
 = 
åue
;

4101 if––
Radio
.
	`CheckRfFªquícy
–
∑øms
.
Fªquícy
 ) =
åue
 ) && (Ö¨ams.Fªquícy > 0 ) && ( 
‰equícyInvÆid
 =
Ál£
 ) )

4103 #i‡
	`deföed
–
USE_BAND_868
 )

4104 if––
∑øms
.
Fªquícy
 >= 863000000 ) && (Öarams.Frequency < 865000000 ) )

4106 
b™d
 = 
BAND_G1_2
;

4108 if––
∑øms
.
Fªquícy
 >= 865000000 ) && (Öarams.Frequency <= 868000000 ) )

4110 
b™d
 = 
BAND_G1_0
;

4112 if––
∑øms
.
Fªquícy
 > 868000000 ) && (Öarams.Frequency <= 868600000 ) )

4114 
b™d
 = 
BAND_G1_1
;

4116 if––
∑øms
.
Fªquícy
 >= 868700000 ) && (Öarams.Frequency <= 869200000 ) )

4118 
b™d
 = 
BAND_G1_2
;

4120 if––
∑øms
.
Fªquícy
 >= 869400000 ) && (Öarams.Frequency <= 869650000 ) )

4122 
b™d
 = 
BAND_G1_3
;

4124 if––
∑øms
.
Fªquícy
 >= 869700000 ) && (Öarams.Frequency <= 870000000 ) )

4126 
b™d
 = 
BAND_G1_4
;

4130 
‰equícyInvÆid
 = 
åue
;

4136 
‰equícyInvÆid
 = 
åue
;

4139 if––
d©¨©eInvÆid
 =
åue
 ) && ( 
‰equícyInvÆid
 ==Årue ) )

4141  
LORAMAC_STATUS_FREQ_AND_DR_INVALID
;

4143 if–
d©¨©eInvÆid
 =
åue
 )

4145  
LORAMAC_STATUS_DATARATE_INVALID
;

4147 if–
‰equícyInvÆid
 =
åue
 )

4149  
LORAMAC_STATUS_FREQUENCY_INVALID
;

4153 
Ch™√ls
[
id
] = 
∑øms
;

4154 
Ch™√ls
[
id
].
B™d
 = 
b™d
;

4155 
LoRaMacP¨ams
.
Ch™√lsMask
[0] |–1 << 
id
 );

4157  
LORAMAC_STATUS_OK
;

4159 
	}
}

4161 
LoRaMacSètus_t
 
	$LoRaMacCh™√lRemove
–
uöt8_t
 
id
 )

4163 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

4164 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

4166 if––
LoRaMacSèã
 & 
LORAMAC_TX_CONFIG
 ) != LORAMAC_TX_CONFIG )

4168  
LORAMAC_STATUS_BUSY
;

4172 if––
id
 < 3 ) || ( id >
LORA_MAX_NB_CHANNELS
 ) )

4174  
LORAMAC_STATUS_PARAMETER_INVALID
;

4179 
Ch™√ls
[
id
] = ( 
Ch™√lP¨ams_t
 ){ 0, { 0 }, 0 };

4182 if–
	`DißbÀCh™√lInMask
–
id
, 
LoRaMacP¨ams
.
Ch™√lsMask
 ) =
Ál£
 )

4184  
LORAMAC_STATUS_PARAMETER_INVALID
;

4187  
LORAMAC_STATUS_OK
;

4188 #ñi‡–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) || deföed–
USE_BAND_470
 ) )

4189  
LORAMAC_STATUS_PARAMETER_INVALID
;

4191 
	}
}

4193 
LoRaMacSètus_t
 
	$LoRaMacMu…iˇ°Ch™√lLök
–
Mu…iˇ°P¨ams_t
 *
ch™√lP¨am
 )

4195 if–
ch™√lP¨am
 =
NULL
 )

4197  
LORAMAC_STATUS_PARAMETER_INVALID
;

4199 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

4201  
LORAMAC_STATUS_BUSY
;

4205 
ch™√lP¨am
->
DownLökCou¡î
 = 0;

4207 if–
Mu…iˇ°Ch™√ls
 =
NULL
 )

4210 
Mu…iˇ°Ch™√ls
 = 
ch™√lP¨am
;

4214 
Mu…iˇ°P¨ams_t
 *
cur
 = 
Mu…iˇ°Ch™√ls
;

4217  
cur
->
Next
 !
NULL
 )

4219 
cur
 = cur->
Next
;

4222 
cur
->
Next
 = 
ch™√lP¨am
;

4225  
LORAMAC_STATUS_OK
;

4226 
	}
}

4228 
LoRaMacSètus_t
 
	$LoRaMacMu…iˇ°Ch™√lU∆ök
–
Mu…iˇ°P¨ams_t
 *
ch™√lP¨am
 )

4230 if–
ch™√lP¨am
 =
NULL
 )

4232  
LORAMAC_STATUS_PARAMETER_INVALID
;

4234 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

4236  
LORAMAC_STATUS_BUSY
;

4239 if–
Mu…iˇ°Ch™√ls
 !
NULL
 )

4241 if–
Mu…iˇ°Ch™√ls
 =
ch™√lP¨am
 )

4244 
Mu…iˇ°Ch™√ls
 = 
ch™√lP¨am
->
Next
;

4248 
Mu…iˇ°P¨ams_t
 *
cur
 = 
Mu…iˇ°Ch™√ls
;

4251  
cur
->
Next
 && cur->Nexà!
ch™√lP¨am
 )

4253 
cur
 = cur->
Next
;

4256 if–
cur
->
Next
 )

4258 
cur
->
Next
 = 
ch™√lP¨am
->Next;

4261 
ch™√lP¨am
->
Next
 = 
NULL
;

4264  
LORAMAC_STATUS_OK
;

4265 
	}
}

4267 
LoRaMacSètus_t
 
	$LoRaMacMlmeReque°
–
MlmeReq_t
 *
mlmeReque°
 )

4269 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_SERVICE_UNKNOWN
;

4270 
LoRaMacHódî_t
 
macHdr
;

4272 if–
mlmeReque°
 =
NULL
 )

4274  
LORAMAC_STATUS_PARAMETER_INVALID
;

4276 if––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING )

4278  
LORAMAC_STATUS_BUSY
;

4281 
	`mem£t1
––
uöt8_t
* ) &
MlmeC⁄fúm
, 0, ( MlmeConfirm ) );

4283 
MlmeC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

4285  
mlmeReque°
->
Ty≥
 )

4287 
MLME_JOIN
:

4289 if––
LoRaMacSèã
 & 
LORAMAC_TX_DELAYED
 ) == LORAMAC_TX_DELAYED )

4291  
LORAMAC_STATUS_BUSY
;

4294 if––
mlmeReque°
->
Req
.
Joö
.
DevEui
 =
NULL
 ) ||

4295 –
mlmeReque°
->
Req
.
Joö
.
AµEui
 =
NULL
 ) ||

4296 –
mlmeReque°
->
Req
.
Joö
.
AµKey
 =
NULL
 ) ||

4297 –
mlmeReque°
->
Req
.
Joö
.
NbTrüls
 == 0 ) )

4299  
LORAMAC_STATUS_PARAMETER_INVALID
;

4302 #i‡–
	`deföed
–
USE_BAND_915
 ) || deföed–
USE_BAND_915_HYBRID
 ) )

4304 if–
mlmeReque°
->
Req
.
Joö
.
NbTrüls
 < 2 )

4306 
mlmeReque°
->
Req
.
Joö
.
NbTrüls
 = 2;

4310 if–
mlmeReque°
->
Req
.
Joö
.
NbTrüls
 < 48 )

4312 
mlmeReque°
->
Req
.
Joö
.
NbTrüls
 = 48;

4316 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 1;

4317 
MlmeC⁄fúm
.
MlmeReque°
 = 
mlmeReque°
->
Ty≥
;

4319 
LoRaMacDevEui
 = 
mlmeReque°
->
Req
.
Joö
.
DevEui
;

4320 
LoRaMacAµEui
 = 
mlmeReque°
->
Req
.
Joö
.
AµEui
;

4321 
LoRaMacAµKey
 = 
mlmeReque°
->
Req
.
Joö
.
AµKey
;

4322 
MaxJoöReque°Trüls
 = 
mlmeReque°
->
Req
.
Joö
.
NbTrüls
;

4325 
JoöReque°Trüls
 = 0;

4328 
macHdr
.
VÆue
 = 0;

4329 
macHdr
.
Bôs
.
MTy≥
 = 
FRAME_TYPE_JOIN_REQ
;

4331 
	`Re£tMacP¨amëîs
( );

4334 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
	`A…î«ãD©¨©e
–
JoöReque°Trüls
 + 1 );

4336 
°©us
 = 
	`Síd
–&
macHdr
, 0, 
NULL
, 0 );

4339 
MLME_LINK_CHECK
:

4341 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 1;

4343 
MlmeC⁄fúm
.
MlmeReque°
 = 
mlmeReque°
->
Ty≥
;

4345 
°©us
 = 
	`AddMacComm™d
–
MOTE_MAC_LINK_CHECK_REQ
, 0, 0 );

4348 
MLME_TXCW
:

4350 
MlmeC⁄fúm
.
MlmeReque°
 = 
mlmeReque°
->
Ty≥
;

4351 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 1;

4352 
°©us
 = 
	`SëTxC⁄töuousWave
–
mlmeReque°
->
Req
.
TxCw
.
Timeout
 );

4355 
MLME_TXCW_1
:

4357 
MlmeC⁄fúm
.
MlmeReque°
 = 
mlmeReque°
->
Ty≥
;

4358 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 1;

4359 
°©us
 = 
	`SëTxC⁄töuousWave1
–
mlmeReque°
->
Req
.
TxCw
.
Timeout
, mlmeReque°->Req.TxCw.
Fªquícy
, mlmeReque°->Req.TxCw.
Powî
 );

4366 if–
°©us
 !
LORAMAC_STATUS_OK
 )

4368 
NodeAckReque°ed
 = 
Ál£
;

4369 
LoRaMacFœgs
.
Bôs
.
MlmeReq
 = 0;

4372  
°©us
;

4373 
	}
}

4375 
LoRaMacSètus_t
 
	$LoRaMacM˝sReque°
–
M˝sReq_t
 *
m˝sReque°
 )

4377 
LoRaMacSètus_t
 
°©us
 = 
LORAMAC_STATUS_SERVICE_UNKNOWN
;

4378 
LoRaMacHódî_t
 
macHdr
;

4379 
uöt8_t
 
fP‹t
 = 0;

4380 *
fBuf„r
;

4381 
uöt16_t
 
fBuf„rSize
;

4382 
öt8_t
 
d©¨©e
;

4383 
boﬁ
 
ªadyToSíd
 = 
Ál£
;

4385 if–
m˝sReque°
 =
NULL
 )

4387  
LORAMAC_STATUS_PARAMETER_INVALID
;

4389 if–––
LoRaMacSèã
 & 
LORAMAC_TX_RUNNING
 ) == LORAMAC_TX_RUNNING ) ||

4390 ––
LoRaMacSèã
 & 
LORAMAC_TX_DELAYED
 ) == LORAMAC_TX_DELAYED ) )

4392  
LORAMAC_STATUS_BUSY
;

4395 
macHdr
.
VÆue
 = 0;

4396 
	`mem£t1
 ( ( 
uöt8_t
* ) &
M˝sC⁄fúm
, 0, ( McpsConfirm ) );

4397 
M˝sC⁄fúm
.
Sètus
 = 
LORAMAC_EVENT_INFO_STATUS_ERROR
;

4399  
m˝sReque°
->
Ty≥
 )

4401 
MCPS_UNCONFIRMED
:

4403 
ªadyToSíd
 = 
åue
;

4404 
AckTimeoutRërõs
 = 1;

4406 
macHdr
.
Bôs
.
MTy≥
 = 
FRAME_TYPE_DATA_UNCONFIRMED_UP
;

4407 
fP‹t
 = 
m˝sReque°
->
Req
.
Unc⁄fúmed
.fPort;

4408 
fBuf„r
 = 
m˝sReque°
->
Req
.
Unc⁄fúmed
.fBuffer;

4409 
fBuf„rSize
 = 
m˝sReque°
->
Req
.
Unc⁄fúmed
.fBufferSize;

4410 
d©¨©e
 = 
m˝sReque°
->
Req
.
Unc⁄fúmed
.
D©¨©e
;

4413 
MCPS_CONFIRMED
:

4415 
ªadyToSíd
 = 
åue
;

4416 
AckTimeoutRërõsCou¡î
 = 1;

4417 
AckTimeoutRërõs
 = 
m˝sReque°
->
Req
.
C⁄fúmed
.
NbTrüls
;

4419 
macHdr
.
Bôs
.
MTy≥
 = 
FRAME_TYPE_DATA_CONFIRMED_UP
;

4420 
fP‹t
 = 
m˝sReque°
->
Req
.
C⁄fúmed
.fPort;

4421 
fBuf„r
 = 
m˝sReque°
->
Req
.
C⁄fúmed
.fBuffer;

4422 
fBuf„rSize
 = 
m˝sReque°
->
Req
.
C⁄fúmed
.fBufferSize;

4423 
d©¨©e
 = 
m˝sReque°
->
Req
.
C⁄fúmed
.
D©¨©e
;

4426 
MCPS_PROPRIETARY
:

4428 
ªadyToSíd
 = 
åue
;

4429 
AckTimeoutRërõs
 = 1;

4431 
macHdr
.
Bôs
.
MTy≥
 = 
FRAME_TYPE_PROPRIETARY
;

4432 
fBuf„r
 = 
m˝sReque°
->
Req
.
Pr›rõèry
.fBuffer;

4433 
fBuf„rSize
 = 
m˝sReque°
->
Req
.
Pr›rõèry
.fBufferSize;

4434 
d©¨©e
 = 
m˝sReque°
->
Req
.
Pr›rõèry
.
D©¨©e
;

4441 if–
ªadyToSíd
 =
åue
 )

4443 if–
AdrCålOn
 =
Ál£
 )

4445 if–
	`VÆueInR™ge
–
d©¨©e
, 
LORAMAC_TX_MIN_DATARATE
, 
LORAMAC_TX_MAX_DATARATE
 ) =
åue
 )

4447 
LoRaMacP¨ams
.
Ch™√lsD©¨©e
 = 
d©¨©e
;

4451  
LORAMAC_STATUS_PARAMETER_INVALID
;

4455 
°©us
 = 
	`Síd
–&
macHdr
, 
fP‹t
, 
fBuf„r
, 
fBuf„rSize
 );

4456 if–
°©us
 =
LORAMAC_STATUS_OK
 )

4458 
M˝sC⁄fúm
.
M˝sReque°
 = 
m˝sReque°
->
Ty≥
;

4459 
LoRaMacFœgs
.
Bôs
.
M˝sReq
 = 1;

4463 
NodeAckReque°ed
 = 
Ál£
;

4467  
°©us
;

4468 
	}
}

4470 
	$LoRaMacTe°RxWödowsOn
–
boﬁ
 
íabÀ
 )

4472 
IsRxWödowsE«bÀd
 = 
íabÀ
;

4473 
	}
}

4475 
	$LoRaMacTe°SëMic
–
uöt16_t
 
txPackëCou¡î
 )

4477 
UpLökCou¡î
 = 
txPackëCou¡î
;

4478 
IsUpLökCou¡îFixed
 = 
åue
;

4479 
	}
}

4481 
	$LoRaMacTe°SëDutyCy˛eOn
–
boﬁ
 
íabÀ
 )

4483 #i‡–
	`deföed
–
USE_BAND_868
 ) || deföed–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) )

4484 
DutyCy˛eOn
 = 
íabÀ
;

4486 
DutyCy˛eOn
 = 
Ál£
;

4488 
	}
}

4490 
	$LoRaMacTe°SëCh™√l
–
uöt8_t
 
ch™√l
 )

4492 
Ch™√l
 = 
ch™√l
;

4493 
	}
}

4495 
RxC⁄figP¨ams_t
 
	$CompuãRxWödowP¨amëîs
–
öt8_t
 
d©¨©e
, 
uöt32_t
 
rxEº‹
 )

4497 
RxC⁄figP¨ams_t
 
rxC⁄figP¨ams
 = { 0, 0, 0, 0 };

4498 
tSymbﬁ
 = 0.0;

4500 
rxC⁄figP¨ams
.
D©¨©e
 = 
d©¨©e
;

4501  
B™dwidths
[
d©¨©e
] )

4505 
rxC⁄figP¨ams
.
B™dwidth
 = 0;

4508 
rxC⁄figP¨ams
.
B™dwidth
 = 1;

4511 
rxC⁄figP¨ams
.
B™dwidth
 = 2;

4515 #i‡
	`deföed
–
USE_BAND_433
 ) || deföed–
USE_BAND_780
 ) || deföed–
USE_BAND_868
 )

4516 if–
d©¨©e
 =
DR_7
 )

4518 
tSymbﬁ
 = ( 1.0 / ( )
D©¨©es
[
d©¨©e
] ) * 8.0;

4523 
tSymbﬁ
 = ( ( )–1 << 
D©¨©es
[
d©¨©e
] ) / ( )
B™dwidths
[datarate] ) * 1e3;

4526 
rxC⁄figP¨ams
.
RxWödowTimeout
 = 
	`MAX
––
uöt32_t
 )
	`˚û
–––2 * 
LoRaMacP¨ams
.
MöRxSymbﬁs
 - 8 ) * 
tSymbﬁ
 + 2 * 
rxEº‹
 ) /ÅSymbol ), LoRaMacParams.MinRxSymbols );

4528 
rxC⁄figP¨ams
.
RxOff£t
 = ( 
öt32_t
 )
	`˚û
––4.0 * 
tSymbﬁ
 ) - ( (ÑxC⁄figP¨ams.
RxWödowTimeout
 *ÅSymbﬁ ) / 2.0 ) - 
RADIO_WAKEUP_TIME
 );

4530  
rxC⁄figP¨ams
;

4531 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\mac\LoRaMacCrypto.c

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

22 
	~"utûôõs.h
"

24 
	~"´s.h
"

25 
	~"cmac.h
"

27 
	~"LoRaMacCry±o.h
"

32 
	#LORAMAC_MIC_BLOCK_B0_SIZE
 16

	)

37 
uöt8_t
 
	gMicBlockB0
[] = { 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

46 
uöt8_t
 
	gMic
[16];

51 
uöt8_t
 
	gaBlock
[] = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

54 
uöt8_t
 
	gsBlock
[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

61 
´s_c⁄ãxt
 
	gAesC⁄ãxt
;

66 
AES_CMAC_CTX
 
	gAesCmacCtx
[1];

79 
	$LoRaMacCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt32_à*
mic
 )

81 
MicBlockB0
[5] = 
dú
;

83 
MicBlockB0
[6] = ( 
addªss
 ) & 0xFF;

84 
MicBlockB0
[7] = ( 
addªss
 >> 8 ) & 0xFF;

85 
MicBlockB0
[8] = ( 
addªss
 >> 16 ) & 0xFF;

86 
MicBlockB0
[9] = ( 
addªss
 >> 24 ) & 0xFF;

88 
MicBlockB0
[10] = ( 
£quí˚Cou¡î
 ) & 0xFF;

89 
MicBlockB0
[11] = ( 
£quí˚Cou¡î
 >> 8 ) & 0xFF;

90 
MicBlockB0
[12] = ( 
£quí˚Cou¡î
 >> 16 ) & 0xFF;

91 
MicBlockB0
[13] = ( 
£quí˚Cou¡î
 >> 24 ) & 0xFF;

93 
MicBlockB0
[15] = 
size
 & 0xFF;

95 
	`AES_CMAC_Inô
–
AesCmacCtx
 );

97 
	`AES_CMAC_SëKey
–
AesCmacCtx
, 
key
 );

99 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
MicBlockB0
, 
LORAMAC_MIC_BLOCK_B0_SIZE
 );

101 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
buf„r
, 
size
 & 0xFF );

103 
	`AES_CMAC_FöÆ
–
Mic
, 
AesCmacCtx
 );

105 *
mic
 = ( 
uöt32_t
 )––uöt32_à)
Mic
[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );

106 
	}
}

108 
	$LoRaMacPaylﬂdEn¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
ícBuf„r
 )

110 
uöt16_t
 
i
;

111 
uöt8_t
 
buf„rIndex
 = 0;

112 
uöt16_t
 
˘r
 = 1;

114 
	`mem£t1
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

115 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

117 
aBlock
[5] = 
dú
;

119 
aBlock
[6] = ( 
addªss
 ) & 0xFF;

120 
aBlock
[7] = ( 
addªss
 >> 8 ) & 0xFF;

121 
aBlock
[8] = ( 
addªss
 >> 16 ) & 0xFF;

122 
aBlock
[9] = ( 
addªss
 >> 24 ) & 0xFF;

124 
aBlock
[10] = ( 
£quí˚Cou¡î
 ) & 0xFF;

125 
aBlock
[11] = ( 
£quí˚Cou¡î
 >> 8 ) & 0xFF;

126 
aBlock
[12] = ( 
£quí˚Cou¡î
 >> 16 ) & 0xFF;

127 
aBlock
[13] = ( 
£quí˚Cou¡î
 >> 24 ) & 0xFF;

129  
size
 >= 16 )

131 
aBlock
[15] = ( ( 
˘r
 ) & 0xFF );

132 
˘r
++;

133 
	`´s_í¸y±
–
aBlock
, 
sBlock
, &
AesC⁄ãxt
 );

134  
i
 = 0; i < 16; i++ )

136 
ícBuf„r
[
buf„rIndex
 + 
i
] = 
buf„r
[buf„rIndex + i] ^ 
sBlock
[i];

138 
size
 -= 16;

139 
buf„rIndex
 += 16;

142 if–
size
 > 0 )

144 
aBlock
[15] = ( ( 
˘r
 ) & 0xFF );

145 
	`´s_í¸y±
–
aBlock
, 
sBlock
, &
AesC⁄ãxt
 );

146  
i
 = 0; i < 
size
; i++ )

148 
ícBuf„r
[
buf„rIndex
 + 
i
] = 
buf„r
[buf„rIndex + i] ^ 
sBlock
[i];

151 
	}
}

153 
	$LoRaMacPaylﬂdDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 
addªss
, uöt8_à
dú
, uöt32_à
£quí˚Cou¡î
, uöt8_à*
decBuf„r
 )

155 
	`LoRaMacPaylﬂdEn¸y±
–
buf„r
, 
size
, 
key
, 
addªss
, 
dú
, 
£quí˚Cou¡î
, 
decBuf„r
 );

156 
	}
}

158 
	$LoRaMacJoöCompuãMic
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, 
uöt32_t
 *
mic
 )

160 
	`AES_CMAC_Inô
–
AesCmacCtx
 );

162 
	`AES_CMAC_SëKey
–
AesCmacCtx
, 
key
 );

164 
	`AES_CMAC_Upd©e
–
AesCmacCtx
, 
buf„r
, 
size
 & 0xFF );

166 
	`AES_CMAC_FöÆ
–
Mic
, 
AesCmacCtx
 );

168 *
mic
 = ( 
uöt32_t
 )––uöt32_à)
Mic
[3] << 24 | ( uint32_t )Mic[2] << 16 | ( uint32_t )Mic[1] << 8 | ( uint32_t )Mic[0] );

169 
	}
}

171 
	$LoRaMacJoöDe¸y±
–c⁄° 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, c⁄° uöt8_à*
key
, uöt8_à*
decBuf„r
 )

173 
	`mem£t1
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

174 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

175 
	`´s_í¸y±
–
buf„r
, 
decBuf„r
, &
AesC⁄ãxt
 );

177 if–
size
 >= 16 )

179 
	`´s_í¸y±
–
buf„r
 + 16, 
decBuf„r
 + 16, &
AesC⁄ãxt
 );

181 
	}
}

183 
	$LoRaMacJoöCompuãSKeys
–c⁄° 
uöt8_t
 *
key
, c⁄° uöt8_à*
≠pN⁄˚
, 
uöt16_t
 
devN⁄˚
, uöt8_à*
nwkSKey
, uöt8_à*
≠pSKey
 )

185 
uöt8_t
 
n⁄˚
[16];

186 
uöt8_t
 *
pDevN⁄˚
 = ( uöt8_à* )&
devN⁄˚
;

188 
	`mem£t1
–
AesC⁄ãxt
.
ksch
, '\0', 240 );

189 
	`´s_£t_key
–
key
, 16, &
AesC⁄ãxt
 );

191 
	`mem£t1
–
n⁄˚
, 0, (Çonce ) );

192 
n⁄˚
[0] = 0x01;

193 
	`mem˝y1
–
n⁄˚
 + 1, 
≠pN⁄˚
, 6 );

194 
	`mem˝y1
–
n⁄˚
 + 7, 
pDevN⁄˚
, 2 );

195 
	`´s_í¸y±
–
n⁄˚
, 
nwkSKey
, &
AesC⁄ãxt
 );

197 
	`mem£t1
–
n⁄˚
, 0, (Çonce ) );

198 
n⁄˚
[0] = 0x02;

199 
	`mem˝y1
–
n⁄˚
 + 1, 
≠pN⁄˚
, 6 );

200 
	`mem˝y1
–
n⁄˚
 + 7, 
pDevN⁄˚
, 2 );

201 
	`´s_í¸y±
–
n⁄˚
, 
≠pSKey
, &
AesC⁄ãxt
 );

202 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\radio\sx1272\sx1272.c

15 
	~<m©h.h
>

16 
	~<°rög.h
>

17 
	~"bﬂrd.h
"

18 
	~"ødio.h
"

19 
	~"sx1272.h
"

20 
	~"sx1272-bﬂrd.h
"

31 
RadioModems_t
 
	mModem
;

32 
uöt8_t
 
	mAddr
;

33 
uöt8_t
 
	mVÆue
;

34 }
	tRadioRegi°îs_t
;

41 
uöt32_t
 
	mb™dwidth
;

42 
uöt8_t
 
	mRegVÆue
;

43 }
	tFskB™dwidth_t
;

54 
SX1272Re£t
( );

60 
SX1272SëTx
–
uöt32_t
 
timeout
 );

68 
SX1272WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

76 
SX1272RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 );

83 
SX1272SëOpMode
–
uöt8_t
 
›Mode
 );

92 
SX1272OnDio0Irq
( );

97 
SX1272OnDio1Irq
( );

102 
SX1272OnDio2Irq
( );

107 
SX1272OnDio3Irq
( );

112 
SX1272OnDio4Irq
( );

117 
SX1272OnDio5Irq
( );

122 
SX1272OnTimeoutIrq
( );

133 c⁄° 
RadioRegi°îs_t
 
	gRadioRegsInô
[] = 
RADIO_INIT_REGISTERS_VALUE
;

138 
	#RSSI_OFFSET
 -139

	)

143 c⁄° 
FskB™dwidth_t
 
	gFskB™dwidths
[] =

176 
RadioEvíts_t
 *
	gRadioEvíts
;

181 
uöt8_t
 
	gRxTxBuf„r
[
RX_BUFFER_SIZE
];

190 
SX1272_t
 
	gSX1272
;

195 
DioIrqH™dÀr
 *
	gDioIrq
[] = { 
SX1272OnDio0Irq
, 
SX1272OnDio1Irq
,

196 
SX1272OnDio2Irq
, 
SX1272OnDio3Irq
,

197 
SX1272OnDio4Irq
, 
NULL
 };

202 
TimîEvít_t
 
	gTxTimeoutTimî
;

203 
TimîEvít_t
 
	gRxTimeoutTimî
;

204 
TimîEvít_t
 
	gRxTimeoutSyncW‹d
;

210 
	$SX1272Inô
–
RadioEvíts_t
 *
evíts
 )

212 
uöt8_t
 
i
;

214 
RadioEvíts
 = 
evíts
;

217 
	`TimîInô
–&
TxTimeoutTimî
, 
SX1272OnTimeoutIrq
 );

218 
	`TimîInô
–&
RxTimeoutTimî
, 
SX1272OnTimeoutIrq
 );

219 
	`TimîInô
–&
RxTimeoutSyncW‹d
, 
SX1272OnTimeoutIrq
 );

221 
	`SX1272Re£t
( );

223 
	`SX1272SëOpMode
–
RF_OPMODE_SLEEP
 );

225 
	`SX1272IoIrqInô
–
DioIrq
 );

227  
i
 = 0; i < –
RadioRegsInô
 ) / –
RadioRegi°îs_t
 ); i++ )

229 
	`SX1272SëModem
–
RadioRegsInô
[
i
].
Modem
 );

230 
	`SX1272Wrôe
–
RadioRegsInô
[
i
].
Addr
, RadioRegsInô[i].
VÆue
 );

233 
	`SX1272SëModem
–
MODEM_FSK
 );

235 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

236 
	}
}

238 
RadioSèã_t
 
	$SX1272GëSètus
( )

240  
SX1272
.
Sëtögs
.
Sèã
;

241 
	}
}

243 
	$SX1272SëCh™√l
–
uöt32_t
 
‰eq
 )

245 
SX1272
.
Sëtögs
.
Ch™√l
 = 
‰eq
;

246 
‰eq
 = ( 
uöt32_t
 )––)‰eq / ( )
FREQ_STEP
 );

247 
	`SX1272Wrôe
–
REG_FRFMSB
, ( 
uöt8_t
 )––
‰eq
 >> 16 ) & 0xFF ) );

248 
	`SX1272Wrôe
–
REG_FRFMID
, ( 
uöt8_t
 )––
‰eq
 >> 8 ) & 0xFF ) );

249 
	`SX1272Wrôe
–
REG_FRFLSB
, ( 
uöt8_t
 )–
‰eq
 & 0xFF ) );

250 
	}
}

252 
boﬁ
 
	$SX1272IsCh™√lFªe
–
RadioModems_t
 
modem
, 
uöt32_t
 
‰eq
, 
öt16_t
 
rssiThªsh
 )

254 
öt16_t
 
rssi
 = 0;

256 
	`SX1272SëModem
–
modem
 );

258 
	`SX1272SëCh™√l
–
‰eq
 );

260 
	`SX1272SëOpMode
–
RF_OPMODE_RECEIVER
 );

262 
	`DñayMs
( 1 );

264 
rssi
 = 
	`SX1272RódRssi
–
modem
 );

266 
	`SX1272SëSÀï
( );

268 if–
rssi
 > 
rssiThªsh
 )

270  
Ál£
;

272  
åue
;

273 
	}
}

275 
uöt32_t
 
	$SX1272R™dom
( )

277 
uöt8_t
 
i
;

278 
uöt32_t
 
∫d
 = 0;

284 
	`SX1272SëModem
–
MODEM_LORA
 );

287 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
RFLR_IRQFLAGS_RXTIMEOUT
 |

288 
RFLR_IRQFLAGS_RXDONE
 |

289 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

290 
RFLR_IRQFLAGS_VALIDHEADER
 |

291 
RFLR_IRQFLAGS_TXDONE
 |

292 
RFLR_IRQFLAGS_CADDONE
 |

293 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 |

294 
RFLR_IRQFLAGS_CADDETECTED
 );

297 
	`SX1272SëOpMode
–
RF_OPMODE_RECEIVER
 );

299  
i
 = 0; i < 32; i++ )

301 
	`DñayMs
( 1 );

303 
∫d
 |––
uöt32_t
 )
	`SX1272Ród
–
REG_LR_RSSIWIDEBAND
 ) & 0x01 ) << 
i
;

306 
	`SX1272SëSÀï
( );

308  
∫d
;

309 
	}
}

317 
uöt8_t
 
	$GëFskB™dwidthRegVÆue
–
uöt32_t
 
b™dwidth
 )

319 
uöt8_t
 
i
;

321  
i
 = 0; i < ( –
FskB™dwidths
 ) / –
FskB™dwidth_t
 ) ) - 1; i++ )

323 if––
b™dwidth
 >
FskB™dwidths
[
i
].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )

325  
FskB™dwidths
[
i
].
RegVÆue
;

330 
	}
}

332 
	$SX1272SëRxC⁄fig
–
RadioModems_t
 
modem
, 
uöt32_t
 
b™dwidth
,

333 
uöt32_t
 
d©¨©e
, 
uöt8_t
 
codî©e
,

334 
uöt32_t
 
b™dwidthAfc
, 
uöt16_t
 
¥ómbÀLí
,

335 
uöt16_t
 
symbTimeout
, 
boﬁ
 
fixLí
,

336 
uöt8_t
 
∑ylﬂdLí
,

337 
boﬁ
 
¸cOn
, boﬁ 
‰eqH›On
, 
uöt8_t
 
h›Pîiod
,

338 
boﬁ
 
iqInvîãd
, boﬁ 
rxC⁄töuous
 )

340 
	`SX1272SëModem
–
modem
 );

342  
modem
 )

344 
MODEM_FSK
:

346 
SX1272
.
Sëtögs
.
Fsk
.
B™dwidth
 = 
b™dwidth
;

347 
SX1272
.
Sëtögs
.
Fsk
.
D©¨©e
 = 
d©¨©e
;

348 
SX1272
.
Sëtögs
.
Fsk
.
B™dwidthAfc
 = 
b™dwidthAfc
;

349 
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 = 
fixLí
;

350 
SX1272
.
Sëtögs
.
Fsk
.
PaylﬂdLí
 = 
∑ylﬂdLí
;

351 
SX1272
.
Sëtögs
.
Fsk
.
CrcOn
 = 
¸cOn
;

352 
SX1272
.
Sëtögs
.
Fsk
.
IqInvîãd
 = 
iqInvîãd
;

353 
SX1272
.
Sëtögs
.
Fsk
.
RxC⁄töuous
 = 
rxC⁄töuous
;

354 
SX1272
.
Sëtögs
.
Fsk
.
PªambÀLí
 = 
¥ómbÀLí
;

356 
d©¨©e
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )datarate );

357 
	`SX1272Wrôe
–
REG_BITRATEMSB
, ( 
uöt8_t
 )–
d©¨©e
 >> 8 ) );

358 
	`SX1272Wrôe
–
REG_BITRATELSB
, ( 
uöt8_t
 )–
d©¨©e
 & 0xFF ) );

360 
	`SX1272Wrôe
–
REG_RXBW
, 
	`GëFskB™dwidthRegVÆue
–
b™dwidth
 ) );

361 
	`SX1272Wrôe
–
REG_AFCBW
, 
	`GëFskB™dwidthRegVÆue
–
b™dwidthAfc
 ) );

363 
	`SX1272Wrôe
–
REG_PREAMBLEMSB
, ( 
uöt8_t
 )––
¥ómbÀLí
 >> 8 ) & 0xFF ) );

364 
	`SX1272Wrôe
–
REG_PREAMBLELSB
, ( 
uöt8_t
 )–
¥ómbÀLí
 & 0xFF ) );

366 if–
fixLí
 == 1 )

368 
	`SX1272Wrôe
–
REG_PAYLOADLENGTH
, 
∑ylﬂdLí
 );

372 
	`SX1272Wrôe
–
REG_PAYLOADLENGTH
, 0xFF );

375 
	`SX1272Wrôe
–
REG_PACKETCONFIG1
,

376 –
	`SX1272Ród
–
REG_PACKETCONFIG1
 ) &

377 
RF_PACKETCONFIG1_CRC_MASK
 &

378 
RF_PACKETCONFIG1_PACKETFORMAT_MASK
 ) |

379 ––
fixLí
 =1 ) ? 
RF_PACKETCONFIG1_PACKETFORMAT_FIXED
 : 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) |

380 –
¸cOn
 << 4 ) );

381 
	`SX1272Wrôe
–
REG_PACKETCONFIG2
, ( 
	`SX1272Ród
–REG_PACKETCONFIG2 ) | 
RF_PACKETCONFIG2_DATAMODE_PACKET
 ) );

384 
MODEM_LORA
:

386 
SX1272
.
Sëtögs
.
LoRa
.
B™dwidth
 = 
b™dwidth
;

387 
SX1272
.
Sëtögs
.
LoRa
.
D©¨©e
 = 
d©¨©e
;

388 
SX1272
.
Sëtögs
.
LoRa
.
Codî©e
 = 
codî©e
;

389 
SX1272
.
Sëtögs
.
LoRa
.
PªambÀLí
 = 
¥ómbÀLí
;

390 
SX1272
.
Sëtögs
.
LoRa
.
FixLí
 = 
fixLí
;

391 
SX1272
.
Sëtögs
.
LoRa
.
PaylﬂdLí
 = 
∑ylﬂdLí
;

392 
SX1272
.
Sëtögs
.
LoRa
.
CrcOn
 = 
¸cOn
;

393 
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 = 
‰eqH›On
;

394 
SX1272
.
Sëtögs
.
LoRa
.
H›Pîiod
 = 
h›Pîiod
;

395 
SX1272
.
Sëtögs
.
LoRa
.
IqInvîãd
 = 
iqInvîãd
;

396 
SX1272
.
Sëtögs
.
LoRa
.
RxC⁄töuous
 = 
rxC⁄töuous
;

398 if–
d©¨©e
 > 12 )

400 
d©¨©e
 = 12;

402 if–
d©¨©e
 < 6 )

404 
d©¨©e
 = 6;

407 if–––
b™dwidth
 =0 ) && ( ( 
d©¨©e
 == 11 ) || ( datarate == 12 ) ) ) ||

408 ––
b™dwidth
 =1 ) && ( 
d©¨©e
 == 12 ) ) )

410 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 = 0x01;

414 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 = 0x00;

417 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
,

418 –
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
 ) &

419 
RFLR_MODEMCONFIG1_BW_MASK
 &

420 
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 &

421 
RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 &

422 
RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK
 &

423 
RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK
 ) |

424 –
b™dwidth
 << 6 ) | ( 
codî©e
 << 3 ) |

425 –
fixLí
 << 2 ) | ( 
¸cOn
 << 1 ) |

426 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 );

428 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG2
,

429 –
	`SX1272Ród
–
REG_LR_MODEMCONFIG2
 ) &

430 
RFLR_MODEMCONFIG2_SF_MASK
 &

431 
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) |

432 –
d©¨©e
 << 4 ) |

433 ––
symbTimeout
 >> 8 ) & ~
RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK
 ) );

435 
	`SX1272Wrôe
–
REG_LR_SYMBTIMEOUTLSB
, ( 
uöt8_t
 )–
symbTimeout
 & 0xFF ) );

437 
	`SX1272Wrôe
–
REG_LR_PREAMBLEMSB
, ( 
uöt8_t
 )––
¥ómbÀLí
 >> 8 ) & 0xFF ) );

438 
	`SX1272Wrôe
–
REG_LR_PREAMBLELSB
, ( 
uöt8_t
 )–
¥ómbÀLí
 & 0xFF ) );

440 if–
fixLí
 == 1 )

442 
	`SX1272Wrôe
–
REG_LR_PAYLOADLENGTH
, 
∑ylﬂdLí
 );

445 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

447 
	`SX1272Wrôe
–
REG_LR_PLLHOP
, ( 
	`SX1272Ród
–REG_LR_PLLHOP ) & 
RFLR_PLLHOP_FASTHOP_MASK
 ) | 
RFLR_PLLHOP_FASTHOP_ON
 );

448 
	`SX1272Wrôe
–
REG_LR_HOPPERIOD
, 
SX1272
.
Sëtögs
.
LoRa
.
H›Pîiod
 );

451 if–
d©¨©e
 == 6 )

453 
	`SX1272Wrôe
–
REG_LR_DETECTOPTIMIZE
,

454 –
	`SX1272Ród
–
REG_LR_DETECTOPTIMIZE
 ) &

455 
RFLR_DETECTIONOPTIMIZE_MASK
 ) |

456 
RFLR_DETECTIONOPTIMIZE_SF6
 );

457 
	`SX1272Wrôe
–
REG_LR_DETECTIONTHRESHOLD
,

458 
RFLR_DETECTIONTHRESH_SF6
 );

462 
	`SX1272Wrôe
–
REG_LR_DETECTOPTIMIZE
,

463 –
	`SX1272Ród
–
REG_LR_DETECTOPTIMIZE
 ) &

464 
RFLR_DETECTIONOPTIMIZE_MASK
 ) |

465 
RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
 );

466 
	`SX1272Wrôe
–
REG_LR_DETECTIONTHRESHOLD
,

467 
RFLR_DETECTIONTHRESH_SF7_TO_SF12
 );

472 
	}
}

474 
	$SX1272SëTxC⁄fig
–
RadioModems_t
 
modem
, 
öt8_t
 
powî
, 
uöt32_t
 
fdev
,

475 
uöt32_t
 
b™dwidth
, uöt32_à
d©¨©e
,

476 
uöt8_t
 
codî©e
, 
uöt16_t
 
¥ómbÀLí
,

477 
boﬁ
 
fixLí
, boﬁ 
¸cOn
, boﬁ 
‰eqH›On
,

478 
uöt8_t
 
h›Pîiod
, 
boﬁ
 
iqInvîãd
, 
uöt32_t
 
timeout
 )

480 
	`SX1272SëModem
–
modem
 );

482 
	`SX1272SëRfTxPowî
–
powî
 );

484  
modem
 )

486 
MODEM_FSK
:

488 
SX1272
.
Sëtögs
.
Fsk
.
Powî
 = 
powî
;

489 
SX1272
.
Sëtögs
.
Fsk
.
Fdev
 = 
fdev
;

490 
SX1272
.
Sëtögs
.
Fsk
.
B™dwidth
 = 
b™dwidth
;

491 
SX1272
.
Sëtögs
.
Fsk
.
D©¨©e
 = 
d©¨©e
;

492 
SX1272
.
Sëtögs
.
Fsk
.
PªambÀLí
 = 
¥ómbÀLí
;

493 
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 = 
fixLí
;

494 
SX1272
.
Sëtögs
.
Fsk
.
CrcOn
 = 
¸cOn
;

495 
SX1272
.
Sëtögs
.
Fsk
.
IqInvîãd
 = 
iqInvîãd
;

496 
SX1272
.
Sëtögs
.
Fsk
.
TxTimeout
 = 
timeout
;

498 
fdev
 = ( 
uöt16_t
 )––)fdev / ( )
FREQ_STEP
 );

499 
	`SX1272Wrôe
–
REG_FDEVMSB
, ( 
uöt8_t
 )–
fdev
 >> 8 ) );

500 
	`SX1272Wrôe
–
REG_FDEVLSB
, ( 
uöt8_t
 )–
fdev
 & 0xFF ) );

502 
d©¨©e
 = ( 
uöt16_t
 )––)
XTAL_FREQ
 / ( )datarate );

503 
	`SX1272Wrôe
–
REG_BITRATEMSB
, ( 
uöt8_t
 )–
d©¨©e
 >> 8 ) );

504 
	`SX1272Wrôe
–
REG_BITRATELSB
, ( 
uöt8_t
 )–
d©¨©e
 & 0xFF ) );

506 
	`SX1272Wrôe
–
REG_PREAMBLEMSB
, ( 
¥ómbÀLí
 >> 8 ) & 0x00FF );

507 
	`SX1272Wrôe
–
REG_PREAMBLELSB
, 
¥ómbÀLí
 & 0xFF );

509 
	`SX1272Wrôe
–
REG_PACKETCONFIG1
,

510 –
	`SX1272Ród
–
REG_PACKETCONFIG1
 ) &

511 
RF_PACKETCONFIG1_CRC_MASK
 &

512 
RF_PACKETCONFIG1_PACKETFORMAT_MASK
 ) |

513 ––
fixLí
 =1 ) ? 
RF_PACKETCONFIG1_PACKETFORMAT_FIXED
 : 
RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE
 ) |

514 –
¸cOn
 << 4 ) );

515 
	`SX1272Wrôe
–
REG_PACKETCONFIG2
, ( 
	`SX1272Ród
–REG_PACKETCONFIG2 ) | 
RF_PACKETCONFIG2_DATAMODE_PACKET
 ) );

518 
MODEM_LORA
:

520 
SX1272
.
Sëtögs
.
LoRa
.
Powî
 = 
powî
;

521 
SX1272
.
Sëtögs
.
LoRa
.
B™dwidth
 = 
b™dwidth
;

522 
SX1272
.
Sëtögs
.
LoRa
.
D©¨©e
 = 
d©¨©e
;

523 
SX1272
.
Sëtögs
.
LoRa
.
Codî©e
 = 
codî©e
;

524 
SX1272
.
Sëtögs
.
LoRa
.
PªambÀLí
 = 
¥ómbÀLí
;

525 
SX1272
.
Sëtögs
.
LoRa
.
FixLí
 = 
fixLí
;

526 
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 = 
‰eqH›On
;

527 
SX1272
.
Sëtögs
.
LoRa
.
H›Pîiod
 = 
h›Pîiod
;

528 
SX1272
.
Sëtögs
.
LoRa
.
CrcOn
 = 
¸cOn
;

529 
SX1272
.
Sëtögs
.
LoRa
.
IqInvîãd
 = 
iqInvîãd
;

530 
SX1272
.
Sëtögs
.
LoRa
.
TxTimeout
 = 
timeout
;

532 if–
d©¨©e
 > 12 )

534 
d©¨©e
 = 12;

536 if–
d©¨©e
 < 6 )

538 
d©¨©e
 = 6;

540 if–––
b™dwidth
 =0 ) && ( ( 
d©¨©e
 == 11 ) || ( datarate == 12 ) ) ) ||

541 ––
b™dwidth
 =1 ) && ( 
d©¨©e
 == 12 ) ) )

543 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 = 0x01;

547 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 = 0x00;

550 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

552 
	`SX1272Wrôe
–
REG_LR_PLLHOP
, ( 
	`SX1272Ród
–REG_LR_PLLHOP ) & 
RFLR_PLLHOP_FASTHOP_MASK
 ) | 
RFLR_PLLHOP_FASTHOP_ON
 );

553 
	`SX1272Wrôe
–
REG_LR_HOPPERIOD
, 
SX1272
.
Sëtögs
.
LoRa
.
H›Pîiod
 );

556 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG1
,

557 –
	`SX1272Ród
–
REG_LR_MODEMCONFIG1
 ) &

558 
RFLR_MODEMCONFIG1_BW_MASK
 &

559 
RFLR_MODEMCONFIG1_CODINGRATE_MASK
 &

560 
RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK
 &

561 
RFLR_MODEMCONFIG1_RXPAYLOADCRC_MASK
 &

562 
RFLR_MODEMCONFIG1_LOWDATARATEOPTIMIZE_MASK
 ) |

563 –
b™dwidth
 << 6 ) | ( 
codî©e
 << 3 ) |

564 –
fixLí
 << 2 ) | ( 
¸cOn
 << 1 ) |

565 
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 );

567 
	`SX1272Wrôe
–
REG_LR_MODEMCONFIG2
,

568 –
	`SX1272Ród
–
REG_LR_MODEMCONFIG2
 ) &

569 
RFLR_MODEMCONFIG2_SF_MASK
 ) |

570 –
d©¨©e
 << 4 ) );

573 
	`SX1272Wrôe
–
REG_LR_PREAMBLEMSB
, ( 
¥ómbÀLí
 >> 8 ) & 0x00FF );

574 
	`SX1272Wrôe
–
REG_LR_PREAMBLELSB
, 
¥ómbÀLí
 & 0xFF );

576 if–
d©¨©e
 == 6 )

578 
	`SX1272Wrôe
–
REG_LR_DETECTOPTIMIZE
,

579 –
	`SX1272Ród
–
REG_LR_DETECTOPTIMIZE
 ) &

580 
RFLR_DETECTIONOPTIMIZE_MASK
 ) |

581 
RFLR_DETECTIONOPTIMIZE_SF6
 );

582 
	`SX1272Wrôe
–
REG_LR_DETECTIONTHRESHOLD
,

583 
RFLR_DETECTIONTHRESH_SF6
 );

587 
	`SX1272Wrôe
–
REG_LR_DETECTOPTIMIZE
,

588 –
	`SX1272Ród
–
REG_LR_DETECTOPTIMIZE
 ) &

589 
RFLR_DETECTIONOPTIMIZE_MASK
 ) |

590 
RFLR_DETECTIONOPTIMIZE_SF7_TO_SF12
 );

591 
	`SX1272Wrôe
–
REG_LR_DETECTIONTHRESHOLD
,

592 
RFLR_DETECTIONTHRESH_SF7_TO_SF12
 );

597 
	}
}

599 
uöt32_t
 
	$SX1272GëTimeOnAú
–
RadioModems_t
 
modem
, 
uöt8_t
 
pktLí
 )

601 
uöt32_t
 
aúTime
 = 0;

603  
modem
 )

605 
MODEM_FSK
:

607 
aúTime
 = 
	`round
––8 * ( 
SX1272
.
Sëtögs
.
Fsk
.
PªambÀLí
 +

608 ––
	`SX1272Ród
–
REG_SYNCCONFIG
 ) & ~
RF_SYNCCONFIG_SYNCSIZE_MASK
 ) + 1 ) +

609 ––
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 == 0x01 ) ? 0.0 : 1.0 ) +

610 –––
	`SX1272Ród
–
REG_PACKETCONFIG1
 ) & ~
RF_PACKETCONFIG1_ADDRSFILTERING_MASK
 ) != 0x00 ) ? 1.0 : 0 ) +

611 
pktLí
 +

612 ––
SX1272
.
Sëtögs
.
Fsk
.
CrcOn
 == 0x01 ) ? 2.0 : 0 ) ) /

613 
SX1272
.
Sëtögs
.
Fsk
.
D©¨©e
 ) * 1e3 );

616 
MODEM_LORA
:

618 
bw
 = 0.0;

619  
SX1272
.
Sëtögs
.
LoRa
.
B™dwidth
 )

622 
bw
 = 125e3;

625 
bw
 = 250e3;

628 
bw
 = 500e3;

633 
rs
 = 
bw
 / ( 1 << 
SX1272
.
Sëtögs
.
LoRa
.
D©¨©e
 );

634 
ts
 = 1 / 
rs
;

636 
tPªambÀ
 = ( 
SX1272
.
Sëtögs
.
LoRa
.
PªambÀLí
 + 4.25 ) * 
ts
;

638 
tmp
 = 
	`˚û
––8 * 
pktLí
 - 4 * 
SX1272
.
Sëtögs
.
LoRa
.
D©¨©e
 +

639 28 + 16 * 
SX1272
.
Sëtögs
.
LoRa
.
CrcOn
 -

640 –
SX1272
.
Sëtögs
.
LoRa
.
FixLí
 ? 20 : 0 ) ) /

641 –)–4 * ( 
SX1272
.
Sëtögs
.
LoRa
.
D©¨©e
 -

642 ––
SX1272
.
Sëtögs
.
LoRa
.
LowD©¨©eO±imize
 > 0 ) ? 2 : 0 ) ) ) ) *

643 –
SX1272
.
Sëtögs
.
LoRa
.
Codî©e
 + 4 );

644 
nPaylﬂd
 = 8 + ( ( 
tmp
 > 0 ) ?Åmp : 0 );

645 
tPaylﬂd
 = 
nPaylﬂd
 * 
ts
;

647 
tOnAú
 = 
tPªambÀ
 + 
tPaylﬂd
;

649 
aúTime
 = 
	`Êo‹
–
tOnAú
 * 1e3 + 0.999 );

653  
aúTime
;

654 
	}
}

656 
	$SX1272Síd
–
uöt8_t
 *
buf„r
, uöt8_à
size
 )

658 
uöt32_t
 
txTimeout
 = 0;

660  
SX1272
.
Sëtögs
.
Modem
 )

662 
MODEM_FSK
:

664 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 = 0;

665 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 
size
;

667 if–
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 =
Ál£
 )

669 
	`SX1272WrôeFifo
––
uöt8_t
* )&
size
, 1 );

673 
	`SX1272Wrôe
–
REG_PAYLOADLENGTH
, 
size
 );

676 if––
size
 > 0 ) && ( size <= 64 ) )

678 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
ChunkSize
 = 
size
;

682 
	`mem˝y1
–
RxTxBuf„r
, 
buf„r
, 
size
 );

683 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
ChunkSize
 = 32;

687 
	`SX1272WrôeFifo
–
buf„r
, 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
ChunkSize
 );

688 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +SX1272.Sëtögs.FskPackëH™dÀr.
ChunkSize
;

689 
txTimeout
 = 
SX1272
.
Sëtögs
.
Fsk
.
TxTimeout
;

692 
MODEM_LORA
:

694 if–
SX1272
.
Sëtögs
.
LoRa
.
IqInvîãd
 =
åue
 )

696 
	`SX1272Wrôe
–
REG_LR_INVERTIQ
, ( ( 
	`SX1272Ród
–REG_LR_INVERTIQ ) & 
RFLR_INVERTIQ_TX_MASK
 & 
RFLR_INVERTIQ_RX_MASK
 ) | 
RFLR_INVERTIQ_RX_OFF
 | 
RFLR_INVERTIQ_TX_ON
 ) );

697 
	`SX1272Wrôe
–
REG_LR_INVERTIQ2
, 
RFLR_INVERTIQ2_ON
 );

701 
	`SX1272Wrôe
–
REG_LR_INVERTIQ
, ( ( 
	`SX1272Ród
–REG_LR_INVERTIQ ) & 
RFLR_INVERTIQ_TX_MASK
 & 
RFLR_INVERTIQ_RX_MASK
 ) | 
RFLR_INVERTIQ_RX_OFF
 | 
RFLR_INVERTIQ_TX_OFF
 ) );

702 
	`SX1272Wrôe
–
REG_LR_INVERTIQ2
, 
RFLR_INVERTIQ2_OFF
 );

705 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
Size
 = 
size
;

708 
	`SX1272Wrôe
–
REG_LR_PAYLOADLENGTH
, 
size
 );

711 
	`SX1272Wrôe
–
REG_LR_FIFOTXBASEADDR
, 0 );

712 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 0 );

715 if––
	`SX1272Ród
–
REG_OPMODE
 ) & ~
RF_OPMODE_MASK
 ) =
RF_OPMODE_SLEEP
 )

717 
	`SX1272SëStby
( );

718 
	`DñayMs
( 1 );

721 
	`SX1272WrôeFifo
–
buf„r
, 
size
 );

722 
txTimeout
 = 
SX1272
.
Sëtögs
.
LoRa
.
TxTimeout
;

727 
	`SX1272SëTx
–
txTimeout
 );

728 
	}
}

730 
	$SX1272SëSÀï
( )

732 
	`TimîSt›
–&
RxTimeoutTimî
 );

733 
	`TimîSt›
–&
TxTimeoutTimî
 );

735 
	`SX1272SëOpMode
–
RF_OPMODE_SLEEP
 );

736 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

737 
	}
}

739 
	$SX1272SëStby
( )

741 
	`TimîSt›
–&
RxTimeoutTimî
 );

742 
	`TimîSt›
–&
TxTimeoutTimî
 );

744 
	`SX1272SëOpMode
–
RF_OPMODE_STANDBY
 );

745 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

746 
	}
}

748 
	$SX1272SëRx
–
uöt32_t
 
timeout
 )

750 
boﬁ
 
rxC⁄töuous
 = 
Ál£
;

752  
SX1272
.
Sëtögs
.
Modem
 )

754 
MODEM_FSK
:

756 
rxC⁄töuous
 = 
SX1272
.
Sëtögs
.
Fsk
.
RxC⁄töuous
;

764 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RF_DIOMAPPING1_DIO0_MASK
 &

765 
RF_DIOMAPPING1_DIO1_MASK
 &

766 
RF_DIOMAPPING1_DIO2_MASK
 ) |

767 
RF_DIOMAPPING1_DIO0_00
 |

768 
RF_DIOMAPPING1_DIO1_00
 |

769 
RF_DIOMAPPING1_DIO2_11
 );

771 
	`SX1272Wrôe
–
REG_DIOMAPPING2
, ( 
	`SX1272Ród
–REG_DIOMAPPING2 ) & 
RF_DIOMAPPING2_DIO4_MASK
 &

772 
RF_DIOMAPPING2_MAP_MASK
 ) |

773 
RF_DIOMAPPING2_DIO4_11
 |

774 
RF_DIOMAPPING2_MAP_PREAMBLEDETECT
 );

776 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
FifoThªsh
 = 
	`SX1272Ród
–
REG_FIFOTHRESH
 ) & 0x3F;

778 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
RF_RXCONFIG_AFCAUTO_ON
 | 
RF_RXCONFIG_AGCAUTO_ON
 | 
RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT
 );

780 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
Ál£
;

781 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
SyncW‹dDëe˘ed
 = 
Ál£
;

782 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 = 0;

783 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 0;

786 
MODEM_LORA
:

788 if–
SX1272
.
Sëtögs
.
LoRa
.
IqInvîãd
 =
åue
 )

790 
	`SX1272Wrôe
–
REG_LR_INVERTIQ
, ( ( 
	`SX1272Ród
–REG_LR_INVERTIQ ) & 
RFLR_INVERTIQ_TX_MASK
 & 
RFLR_INVERTIQ_RX_MASK
 ) | 
RFLR_INVERTIQ_RX_ON
 | 
RFLR_INVERTIQ_TX_OFF
 ) );

791 
	`SX1272Wrôe
–
REG_LR_INVERTIQ2
, 
RFLR_INVERTIQ2_ON
 );

795 
	`SX1272Wrôe
–
REG_LR_INVERTIQ
, ( ( 
	`SX1272Ród
–REG_LR_INVERTIQ ) & 
RFLR_INVERTIQ_TX_MASK
 & 
RFLR_INVERTIQ_RX_MASK
 ) | 
RFLR_INVERTIQ_RX_OFF
 | 
RFLR_INVERTIQ_TX_OFF
 ) );

796 
	`SX1272Wrôe
–
REG_LR_INVERTIQ2
, 
RFLR_INVERTIQ2_OFF
 );

799 
rxC⁄töuous
 = 
SX1272
.
Sëtögs
.
LoRa
.
RxC⁄töuous
;

801 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

803 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
,

806 
RFLR_IRQFLAGS_VALIDHEADER
 |

807 
RFLR_IRQFLAGS_TXDONE
 |

808 
RFLR_IRQFLAGS_CADDONE
 |

810 
RFLR_IRQFLAGS_CADDETECTED
 );

813 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RFLR_DIOMAPPING1_DIO0_MASK
 & 
RFLR_DIOMAPPING1_DIO2_MASK
 ) | 
RFLR_DIOMAPPING1_DIO0_00
 | 
RFLR_DIOMAPPING1_DIO2_00
 );

817 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
,

820 
RFLR_IRQFLAGS_VALIDHEADER
 |

821 
RFLR_IRQFLAGS_TXDONE
 |

822 
RFLR_IRQFLAGS_CADDONE
 |

823 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 |

824 
RFLR_IRQFLAGS_CADDETECTED
 );

827 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RFLR_DIOMAPPING1_DIO0_MASK
 ) | 
RFLR_DIOMAPPING1_DIO0_00
 );

829 
	`SX1272Wrôe
–
REG_LR_FIFORXBASEADDR
, 0 );

830 
	`SX1272Wrôe
–
REG_LR_FIFOADDRPTR
, 0 );

835 
	`mem£t
–
RxTxBuf„r
, 0, ( 
size_t
 )
RX_BUFFER_SIZE
 );

837 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_RX_RUNNING
;

838 if–
timeout
 != 0 )

840 
	`TimîSëVÆue
–&
RxTimeoutTimî
, 
timeout
 );

841 
	`TimîSèπ
–&
RxTimeoutTimî
 );

844 if–
SX1272
.
Sëtögs
.
Modem
 =
MODEM_FSK
 )

846 
	`SX1272SëOpMode
–
RF_OPMODE_RECEIVER
 );

848 if–
rxC⁄töuous
 =
Ál£
 )

850 
	`TimîSëVÆue
–&
RxTimeoutSyncW‹d
, 
	`˚û
––8.0 * ( 
SX1272
.
Sëtögs
.
Fsk
.
PªambÀLí
 +

851 ––
	`SX1272Ród
–
REG_SYNCCONFIG
 ) &

852 ~
RF_SYNCCONFIG_SYNCSIZE_MASK
 ) +

854 –)
SX1272
.
Sëtögs
.
Fsk
.
D©¨©e
 ) * 1e3 ) + 4 );

855 
	`TimîSèπ
–&
RxTimeoutSyncW‹d
 );

860 if–
rxC⁄töuous
 =
åue
 )

862 
	`SX1272SëOpMode
–
RFLR_OPMODE_RECEIVER
 );

866 
	`SX1272SëOpMode
–
RFLR_OPMODE_RECEIVER_SINGLE
 );

869 
	}
}

871 
	$SX1272SëTx
–
uöt32_t
 
timeout
 )

873 
	`TimîSëVÆue
–&
TxTimeoutTimî
, 
timeout
 );

875  
SX1272
.
Sëtögs
.
Modem
 )

877 
MODEM_FSK
:

885 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RF_DIOMAPPING1_DIO0_MASK
 &

886 
RF_DIOMAPPING1_DIO1_MASK
 &

887 
RF_DIOMAPPING1_DIO2_MASK
 ) |

888 
RF_DIOMAPPING1_DIO1_01
 );

890 
	`SX1272Wrôe
–
REG_DIOMAPPING2
, ( 
	`SX1272Ród
–REG_DIOMAPPING2 ) & 
RF_DIOMAPPING2_DIO4_MASK
 &

891 
RF_DIOMAPPING2_MAP_MASK
 ) );

892 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
FifoThªsh
 = 
	`SX1272Ród
–
REG_FIFOTHRESH
 ) & 0x3F;

895 
MODEM_LORA
:

897 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

899 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
RFLR_IRQFLAGS_RXTIMEOUT
 |

900 
RFLR_IRQFLAGS_RXDONE
 |

901 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

902 
RFLR_IRQFLAGS_VALIDHEADER
 |

904 
RFLR_IRQFLAGS_CADDONE
 |

906 
RFLR_IRQFLAGS_CADDETECTED
 );

909 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RFLR_DIOMAPPING1_DIO0_MASK
 & 
RFLR_DIOMAPPING1_DIO2_MASK
 ) | 
RFLR_DIOMAPPING1_DIO0_01
 | 
RFLR_DIOMAPPING1_DIO2_00
 );

913 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
RFLR_IRQFLAGS_RXTIMEOUT
 |

914 
RFLR_IRQFLAGS_RXDONE
 |

915 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

916 
RFLR_IRQFLAGS_VALIDHEADER
 |

918 
RFLR_IRQFLAGS_CADDONE
 |

919 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 |

920 
RFLR_IRQFLAGS_CADDETECTED
 );

923 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RFLR_DIOMAPPING1_DIO0_MASK
 ) | 
RFLR_DIOMAPPING1_DIO0_01
 );

929 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_TX_RUNNING
;

930 
	`TimîSèπ
–&
TxTimeoutTimî
 );

931 
	`SX1272SëOpMode
–
RF_OPMODE_TRANSMITTER
 );

932 
	}
}

934 
	$SX1272SèπCad
( )

936  
SX1272
.
Sëtögs
.
Modem
 )

938 
MODEM_FSK
:

943 
MODEM_LORA
:

945 
	`SX1272Wrôe
–
REG_LR_IRQFLAGSMASK
, 
RFLR_IRQFLAGS_RXTIMEOUT
 |

946 
RFLR_IRQFLAGS_RXDONE
 |

947 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 |

948 
RFLR_IRQFLAGS_VALIDHEADER
 |

949 
RFLR_IRQFLAGS_TXDONE
 |

951 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL


956 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, ( 
	`SX1272Ród
–REG_DIOMAPPING1 ) & 
RFLR_DIOMAPPING1_DIO3_MASK
 ) | 
RFLR_DIOMAPPING1_DIO3_00
 );

958 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_CAD
;

959 
	`SX1272SëOpMode
–
RFLR_OPMODE_CAD
 );

965 
	}
}

967 
	$SX1272SëTxC⁄töuousWave
–
uöt32_t
 
‰eq
, 
öt8_t
 
powî
, 
uöt16_t
 
time
 )

969 
uöt32_t
 
timeout
 = ( uöt32_à)–
time
 * 1e3 );

971 
	`SX1272SëCh™√l
–
‰eq
 );

973 
	`SX1272SëTxC⁄fig
–
MODEM_FSK
, 
powî
, 0, 0, 4800, 0, 5, 
Ál£
, fÆ£, 0, 0, 0, 
timeout
 );

975 
	`SX1272Wrôe
–
REG_PACKETCONFIG2
, ( 
	`SX1272Ród
–REG_PACKETCONFIG2 ) & 
RF_PACKETCONFIG2_DATAMODE_MASK
 ) );

977 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, 
RF_DIOMAPPING1_DIO0_11
 | 
RF_DIOMAPPING1_DIO1_11
 );

978 
	`SX1272Wrôe
–
REG_DIOMAPPING2
, 
RF_DIOMAPPING2_DIO4_10
 | 
RF_DIOMAPPING2_DIO5_10
 );

980 
	`TimîSëVÆue
–&
TxTimeoutTimî
, 
timeout
 );

982 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_TX_RUNNING
;

983 
	`TimîSèπ
–&
TxTimeoutTimî
 );

984 
	`SX1272SëOpMode
–
RF_OPMODE_TRANSMITTER
 );

985 
	}
}

987 
öt16_t
 
	$SX1272RódRssi
–
RadioModems_t
 
modem
 )

989 
öt16_t
 
rssi
 = 0;

991  
modem
 )

993 
MODEM_FSK
:

994 
rssi
 = -–
	`SX1272Ród
–
REG_RSSIVALUE
 ) >> 1 );

996 
MODEM_LORA
:

997 
rssi
 = 
RSSI_OFFSET
 + 
	`SX1272Ród
–
REG_LR_RSSIVALUE
 );

1000 
rssi
 = -1;

1003  
rssi
;

1004 
	}
}

1006 
	$SX1272Re£t
( )

1009 
	`GpioInô
–&
SX1272
.
Re£t
, 
RADIO_RESET
, 
PIN_OUTPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 1 );

1012 
	`DñayMs
( 1 );

1015 
	`GpioInô
–&
SX1272
.
Re£t
, 
RADIO_RESET
, 
PIN_INPUT
, 
PIN_PUSH_PULL
, 
PIN_NO_PULL
, 1 );

1018 
	`DñayMs
( 6 );

1019 
	}
}

1021 
	$SX1272SëOpMode
–
uöt8_t
 
›Mode
 )

1023 if–
›Mode
 =
RF_OPMODE_SLEEP
 )

1025 
	`SX1272SëA¡SwLowPowî
–
åue
 );

1029 
	`SX1272SëA¡SwLowPowî
–
Ál£
 );

1030 
	`SX1272SëA¡Sw
–
›Mode
 );

1032 
	`SX1272Wrôe
–
REG_OPMODE
, ( 
	`SX1272Ród
–REG_OPMODE ) & 
RF_OPMODE_MASK
 ) | 
›Mode
 );

1033 
	}
}

1035 
	$SX1272SëModem
–
RadioModems_t
 
modem
 )

1037 
	`as£π_∑øm
––
SX1272
.
Spi
.Spi.
In°™˚
 !
NULL
 ) );

1039 if––
	`SX1272Ród
–
REG_OPMODE
 ) & 
RFLR_OPMODE_LONGRANGEMODE_ON
 ) != 0 )

1041 
SX1272
.
Sëtögs
.
Modem
 = 
MODEM_LORA
;

1045 
SX1272
.
Sëtögs
.
Modem
 = 
MODEM_FSK
;

1048 if–
SX1272
.
Sëtögs
.
Modem
 =
modem
 )

1053 
SX1272
.
Sëtögs
.
Modem
 = 
modem
;

1054  
SX1272
.
Sëtögs
.
Modem
 )

1057 
MODEM_FSK
:

1058 
	`SX1272SëSÀï
( );

1059 
	`SX1272Wrôe
–
REG_OPMODE
, ( 
	`SX1272Ród
–REG_OPMODE ) & 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_OFF
 );

1061 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, 0x00 );

1062 
	`SX1272Wrôe
–
REG_DIOMAPPING2
, 0x30 );

1064 
MODEM_LORA
:

1065 
	`SX1272SëSÀï
( );

1066 
	`SX1272Wrôe
–
REG_OPMODE
, ( 
	`SX1272Ród
–REG_OPMODE ) & 
RFLR_OPMODE_LONGRANGEMODE_MASK
 ) | 
RFLR_OPMODE_LONGRANGEMODE_ON
 );

1068 
	`SX1272Wrôe
–
REG_DIOMAPPING1
, 0x00 );

1069 
	`SX1272Wrôe
–
REG_DIOMAPPING2
, 0x00 );

1072 
	}
}

1074 
	$SX1272Wrôe
–
uöt8_t
 
addr
, uöt8_à
d©a
 )

1076 
	`SX1272WrôeBuf„r
–
addr
, &
d©a
, 1 );

1077 
	}
}

1079 
uöt8_t
 
	$SX1272Ród
–
uöt8_t
 
addr
 )

1081 
uöt8_t
 
d©a
;

1082 
	`SX1272RódBuf„r
–
addr
, &
d©a
, 1 );

1083  
d©a
;

1084 
	}
}

1086 
	$SX1272WrôeBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 )

1088 
uöt8_t
 
i
;

1091 
	`GpioWrôe
–&
SX1272
.
Spi
.
Nss
, 0 );

1093 
	`SpiInOut
–&
SX1272
.
Spi
, 
addr
 | 0x80 );

1094  
i
 = 0; i < 
size
; i++ )

1096 
	`SpiInOut
–&
SX1272
.
Spi
, 
buf„r
[
i
] );

1100 
	`GpioWrôe
–&
SX1272
.
Spi
.
Nss
, 1 );

1101 
	}
}

1103 
	$SX1272RódBuf„r
–
uöt8_t
 
addr
, uöt8_à*
buf„r
, uöt8_à
size
 )

1105 
uöt8_t
 
i
;

1108 
	`GpioWrôe
–&
SX1272
.
Spi
.
Nss
, 0 );

1110 
	`SpiInOut
–&
SX1272
.
Spi
, 
addr
 & 0x7F );

1112  
i
 = 0; i < 
size
; i++ )

1114 
buf„r
[
i
] = 
	`SpiInOut
–&
SX1272
.
Spi
, 0 );

1118 
	`GpioWrôe
–&
SX1272
.
Spi
.
Nss
, 1 );

1119 
	}
}

1121 
	$SX1272WrôeFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 )

1123 
	`SX1272WrôeBuf„r
–0, 
buf„r
, 
size
 );

1124 
	}
}

1126 
	$SX1272RódFifo
–
uöt8_t
 *
buf„r
, uöt8_à
size
 )

1128 
	`SX1272RódBuf„r
–0, 
buf„r
, 
size
 );

1129 
	}
}

1131 
	$SX1272SëMaxPaylﬂdLígth
–
RadioModems_t
 
modem
, 
uöt8_t
 
max
 )

1133 
	`SX1272SëModem
–
modem
 );

1135  
modem
 )

1137 
MODEM_FSK
:

1138 if–
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 =
Ál£
 )

1140 
	`SX1272Wrôe
–
REG_PAYLOADLENGTH
, 
max
 );

1143 
MODEM_LORA
:

1144 
	`SX1272Wrôe
–
REG_LR_PAYLOADMAXLENGTH
, 
max
 );

1147 
	}
}

1149 
	$SX1272SëPublicNëw‹k
–
boﬁ
 
íabÀ
 )

1151 
	`SX1272SëModem
–
MODEM_LORA
 );

1152 if–
íabÀ
 =
åue
 )

1155 
	`SX1272Wrôe
–
REG_LR_SYNCWORD
, 
LORA_MAC_PUBLIC_SYNCWORD
 );

1160 
	`SX1272Wrôe
–
REG_LR_SYNCWORD
, 
LORA_MAC_PRIVATE_SYNCWORD
 );

1162 
	}
}

1164 
	$SX1272OnTimeoutIrq
( )

1166  
SX1272
.
Sëtögs
.
Sèã
 )

1168 
RF_RX_RUNNING
:

1169 if–
SX1272
.
Sëtögs
.
Modem
 =
MODEM_FSK
 )

1171 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
Ál£
;

1172 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
SyncW‹dDëe˘ed
 = 
Ál£
;

1173 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 = 0;

1174 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 0;

1177 
	`SX1272Wrôe
–
REG_IRQFLAGS1
, 
RF_IRQFLAGS1_RSSI
 |

1178 
RF_IRQFLAGS1_PREAMBLEDETECT
 |

1179 
RF_IRQFLAGS1_SYNCADDRESSMATCH
 );

1180 
	`SX1272Wrôe
–
REG_IRQFLAGS2
, 
RF_IRQFLAGS2_FIFOOVERRUN
 );

1182 if–
SX1272
.
Sëtögs
.
Fsk
.
RxC⁄töuous
 =
åue
 )

1185 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
	`SX1272Ród
–REG_RXCONFIG ) | 
RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 );

1186 
	`TimîSèπ
–&
RxTimeoutSyncW‹d
 );

1190 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1191 
	`TimîSt›
–&
RxTimeoutSyncW‹d
 );

1194 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxTimeout
 != NULL ) )

1196 
RadioEvíts
->
	`RxTimeout
( );

1199 
RF_TX_RUNNING
:

1200 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1201 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
TxTimeout
 != NULL ) )

1203 
RadioEvíts
->
	`TxTimeout
( );

1209 
	}
}

1211 
	$SX1272OnDio0Irq
( )

1213 vﬁ©ûê
uöt8_t
 
úqFœgs
 = 0;

1215  
SX1272
.
Sëtögs
.
Sèã
 )

1217 
RF_RX_RUNNING
:

1220  
SX1272
.
Sëtögs
.
Modem
 )

1222 
MODEM_FSK
:

1223 if–
SX1272
.
Sëtögs
.
Fsk
.
CrcOn
 =
åue
 )

1225 
úqFœgs
 = 
	`SX1272Ród
–
REG_IRQFLAGS2
 );

1226 if––
úqFœgs
 & 
RF_IRQFLAGS2_CRCOK
 ) != RF_IRQFLAGS2_CRCOK )

1229 
	`SX1272Wrôe
–
REG_IRQFLAGS1
, 
RF_IRQFLAGS1_RSSI
 |

1230 
RF_IRQFLAGS1_PREAMBLEDETECT
 |

1231 
RF_IRQFLAGS1_SYNCADDRESSMATCH
 );

1232 
	`SX1272Wrôe
–
REG_IRQFLAGS2
, 
RF_IRQFLAGS2_FIFOOVERRUN
 );

1234 
	`TimîSt›
–&
RxTimeoutTimî
 );

1236 if–
SX1272
.
Sëtögs
.
Fsk
.
RxC⁄töuous
 =
Ál£
 )

1238 
	`TimîSt›
–&
RxTimeoutSyncW‹d
 );

1239 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1244 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
	`SX1272Ród
–REG_RXCONFIG ) | 
RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 );

1245 
	`TimîSèπ
–&
RxTimeoutSyncW‹d
 );

1248 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxEº‹
 != NULL ) )

1250 
RadioEvíts
->
	`RxEº‹
( );

1252 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
Ál£
;

1253 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
SyncW‹dDëe˘ed
 = 
Ál£
;

1254 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 = 0;

1255 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 0;

1261 if––
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 =0 ) && ( SX1272.Sëtögs.FskPackëH™dÀr.
NbByãs
 == 0 ) )

1263 if–
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 =
Ál£
 )

1265 
	`SX1272RódFifo
––
uöt8_t
* )&
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
, 1 );

1269 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 
	`SX1272Ród
–
REG_PAYLOADLENGTH
 );

1271 
	`SX1272RódFifo
–
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
, SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1272 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +–SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1276 
	`SX1272RódFifo
–
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
, SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1277 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +–SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1280 
	`TimîSt›
–&
RxTimeoutTimî
 );

1282 if–
SX1272
.
Sëtögs
.
Fsk
.
RxC⁄töuous
 =
Ál£
 )

1284 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1285 
	`TimîSt›
–&
RxTimeoutSyncW‹d
 );

1290 
	`SX1272Wrôe
–
REG_RXCONFIG
, 
	`SX1272Ród
–REG_RXCONFIG ) | 
RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK
 );

1291 
	`TimîSèπ
–&
RxTimeoutSyncW‹d
 );

1294 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxD⁄e
 != NULL ) )

1296 
RadioEvíts
->
	`RxD⁄e
–
RxTxBuf„r
, 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
, SX1272.Sëtögs.FskPackëH™dÀr.
RssiVÆue
, 0 );

1298 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
Ál£
;

1299 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
SyncW‹dDëe˘ed
 = 
Ál£
;

1300 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 = 0;

1301 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 0;

1303 
MODEM_LORA
:

1305 
öt8_t
 
¢r
 = 0;

1308 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_RXDONE
 );

1310 
úqFœgs
 = 
	`SX1272Ród
–
REG_LR_IRQFLAGS
 );

1311 if––
úqFœgs
 & 
RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK
 ) =
RFLR_IRQFLAGS_PAYLOADCRCERROR
 )

1314 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_PAYLOADCRCERROR
 );

1316 if–
SX1272
.
Sëtögs
.
LoRa
.
RxC⁄töuous
 =
Ál£
 )

1318 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1320 
	`TimîSt›
–&
RxTimeoutTimî
 );

1322 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxEº‹
 != NULL ) )

1324 
RadioEvíts
->
	`RxEº‹
( );

1329 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
SƒVÆue
 = 
	`SX1272Ród
–
REG_LR_PKTSNRVALUE
 );

1330 if–
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
SƒVÆue
 & 0x80 )

1333 
¢r
 = ( ( ~
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
SƒVÆue
 + 1 ) & 0xFF ) >> 2;

1334 
¢r
 = -snr;

1339 
¢r
 = ( 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
SƒVÆue
 & 0xFF ) >> 2;

1342 
öt16_t
 
rssi
 = 
	`SX1272Ród
–
REG_LR_PKTRSSIVALUE
 );

1343 if–
¢r
 < 0 )

1345 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
RssiVÆue
 = 
RSSI_OFFSET
 + 
rssi
 + (Ñssi >> 4 ) +

1346 
¢r
;

1350 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
RssiVÆue
 = 
RSSI_OFFSET
 + 
rssi
 + (Ñssi >> 4 );

1353 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
Size
 = 
	`SX1272Ród
–
REG_LR_RXNBBYTES
 );

1354 
	`SX1272RódFifo
–
RxTxBuf„r
, 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
Size
 );

1356 if–
SX1272
.
Sëtögs
.
LoRa
.
RxC⁄töuous
 =
Ál£
 )

1358 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1360 
	`TimîSt›
–&
RxTimeoutTimî
 );

1362 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxD⁄e
 != NULL ) )

1364 
RadioEvíts
->
	`RxD⁄e
–
RxTxBuf„r
, 
SX1272
.
Sëtögs
.
LoRaPackëH™dÀr
.
Size
, SX1272.Sëtögs.LoRaPackëH™dÀr.
RssiVÆue
, SX1272.Sëtögs.LoRaPackëH™dÀr.
SƒVÆue
 );

1372 
RF_TX_RUNNING
:

1373 
	`TimîSt›
–&
TxTimeoutTimî
 );

1375  
SX1272
.
Sëtögs
.
Modem
 )

1377 
MODEM_LORA
:

1379 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_TXDONE
 );

1381 
MODEM_FSK
:

1383 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1384 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
TxD⁄e
 != NULL ) )

1386 
RadioEvíts
->
	`TxD⁄e
( );

1394 
	}
}

1396 
	$SX1272OnDio1Irq
( )

1398  
SX1272
.
Sëtögs
.
Sèã
 )

1400 
RF_RX_RUNNING
:

1401  
SX1272
.
Sëtögs
.
Modem
 )

1403 
MODEM_FSK
:

1406 if––
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 =0 ) && ( SX1272.Sëtögs.FskPackëH™dÀr.
NbByãs
 == 0 ) )

1408 if–
SX1272
.
Sëtögs
.
Fsk
.
FixLí
 =
Ál£
 )

1410 
	`SX1272RódFifo
––
uöt8_t
* )&
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
, 1 );

1414 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 = 
	`SX1272Ród
–
REG_PAYLOADLENGTH
 );

1418 if––
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 - SX1272.Sëtögs.FskPackëH™dÀr.
NbByãs
 ) > SX1272.Sëtögs.FskPackëH™dÀr.
FifoThªsh
 )

1420 
	`SX1272RódFifo
––
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 ), SX1272.Sëtögs.FskPackëH™dÀr.
FifoThªsh
 );

1421 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +SX1272.Sëtögs.FskPackëH™dÀr.
FifoThªsh
;

1425 
	`SX1272RódFifo
––
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 ), SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1426 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +–SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1429 
MODEM_LORA
:

1431 
	`TimîSt›
–&
RxTimeoutTimî
 );

1433 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_RXTIMEOUT
 );

1435 
SX1272
.
Sëtögs
.
Sèã
 = 
RF_IDLE
;

1436 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
RxTimeout
 != NULL ) )

1438 
RadioEvíts
->
	`RxTimeout
( );

1445 
RF_TX_RUNNING
:

1446  
SX1272
.
Sëtögs
.
Modem
 )

1448 
MODEM_FSK
:

1450 if––
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
Size
 - SX1272.Sëtögs.FskPackëH™dÀr.
NbByãs
 ) > SX1272.Sëtögs.FskPackëH™dÀr.
ChunkSize
 )

1452 
	`SX1272WrôeFifo
––
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 ), SX1272.Sëtögs.FskPackëH™dÀr.
ChunkSize
 );

1453 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +SX1272.Sëtögs.FskPackëH™dÀr.
ChunkSize
;

1458 
	`SX1272WrôeFifo
–
RxTxBuf„r
 + 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
, SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes );

1459 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
NbByãs
 +SX1272.Sëtögs.FskPackëH™dÀr.
Size
 - SX1272.Settings.FskPacketHandler.NbBytes;

1462 
MODEM_LORA
:

1471 
	}
}

1473 
	$SX1272OnDio2Irq
( )

1475  
SX1272
.
Sëtögs
.
Sèã
 )

1477 
RF_RX_RUNNING
:

1478  
SX1272
.
Sëtögs
.
Modem
 )

1480 
MODEM_FSK
:

1482 if–
SX1272
.
DIO4
.
p‹t
 =
NULL
 )

1484 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
åue
;

1487 if––
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 =
åue
 ) && ( SX1272.Sëtögs.FskPackëH™dÀr.
SyncW‹dDëe˘ed
 =
Ál£
 ) )

1489 
	`TimîSt›
–&
RxTimeoutSyncW‹d
 );

1491 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
SyncW‹dDëe˘ed
 = 
åue
;

1493 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
RssiVÆue
 = -–
	`SX1272Ród
–
REG_RSSIVALUE
 ) >> 1 );

1495 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
AfcVÆue
 = ( 
öt32_t
 )–)–––
uöt16_t
 )
	`SX1272Ród
–
REG_AFCMSB
 ) << 8 ) |

1496 –
uöt16_t
 )
	`SX1272Ród
–
REG_AFCLSB
 ) ) *

1497 –)
FREQ_STEP
;

1498 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
RxGaö
 = ( 
	`SX1272Ród
–
REG_LNA
 ) >> 5 ) & 0x07;

1501 
MODEM_LORA
:

1502 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

1505 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

1507 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
FhssCh™geCh™√l
 != NULL ) )

1509 
RadioEvíts
->
	`FhssCh™geCh™√l
––
	`SX1272Ród
–
REG_LR_HOPCHANNEL
 ) & 
RFLR_HOPCHANNEL_CHANNEL_MASK
 ) );

1517 
RF_TX_RUNNING
:

1518  
SX1272
.
Sëtögs
.
Modem
 )

1520 
MODEM_FSK
:

1522 
MODEM_LORA
:

1523 if–
SX1272
.
Sëtögs
.
LoRa
.
FªqH›On
 =
åue
 )

1526 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL
 );

1528 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
FhssCh™geCh™√l
 != NULL ) )

1530 
RadioEvíts
->
	`FhssCh™geCh™√l
––
	`SX1272Ród
–
REG_LR_HOPCHANNEL
 ) & 
RFLR_HOPCHANNEL_CHANNEL_MASK
 ) );

1541 
	}
}

1543 
	$SX1272OnDio3Irq
( )

1545  
SX1272
.
Sëtögs
.
Modem
 )

1547 
MODEM_FSK
:

1549 
MODEM_LORA
:

1550 if––
	`SX1272Ród
–
REG_LR_IRQFLAGS
 ) & 
RFLR_IRQFLAGS_CADDETECTED
 ) == RFLR_IRQFLAGS_CADDETECTED )

1553 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDETECTED
 | 
RFLR_IRQFLAGS_CADDONE
 );

1554 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
CadD⁄e
 != NULL ) )

1556 
RadioEvíts
->
	`CadD⁄e
–
åue
 );

1562 
	`SX1272Wrôe
–
REG_LR_IRQFLAGS
, 
RFLR_IRQFLAGS_CADDONE
 );

1563 if––
RadioEvíts
 !
NULL
 ) && ( RadioEvíts->
CadD⁄e
 != NULL ) )

1565 
RadioEvíts
->
	`CadD⁄e
–
Ál£
 );

1572 
	}
}

1574 
	$SX1272OnDio4Irq
( )

1576  
SX1272
.
Sëtögs
.
Modem
 )

1578 
MODEM_FSK
:

1580 if–
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 =
Ál£
 )

1582 
SX1272
.
Sëtögs
.
FskPackëH™dÀr
.
PªambÀDëe˘ed
 = 
åue
;

1586 
MODEM_LORA
:

1591 
	}
}

1593 
	$SX1272OnDio5Irq
( )

1595  
SX1272
.
Sëtögs
.
Modem
 )

1597 
MODEM_FSK
:

1599 
MODEM_LORA
:

1604 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\adc.c

15 
	~"bﬂrd.h
"

16 
	~"adc-bﬂrd.h
"

21 
boﬁ
 
	gAdcInôülized
 = 
Ál£
;

23 
	$AdcInô
–
Adc_t
 *
obj
, 
PöNames
 
adcI≈ut
 )

25 if–
AdcInôülized
 =
Ál£
 )

27 
AdcInôülized
 = 
åue
;

29 
	`AdcMcuInô
–
obj
, 
adcI≈ut
 );

30 
	`AdcMcuC⁄fig
( );

32 
	}
}

34 
	$AdcDeInô
–
Adc_t
 *
obj
 )

36 
AdcInôülized
 = 
Ál£
;

37 
	}
}

39 
uöt16_t
 
	$AdcRódCh™√l
–
Adc_t
 *
obj
, 
uöt32_t
 
ch™√l
 )

41 if–
AdcInôülized
 =
åue
 )

43  
	`AdcMcuRódCh™√l
–
obj
, 
ch™√l
 );

49 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\crypto\aes.c

36 
	#HAVE_MEMCPY


	)

37 
	~<°rög.h
>

38 #i‡
deföed
–
_MSC_VER
 )

39 
	~<öåö.h
>

40 #¥agm®
öåösic
–
mem˝y
 )

45 
	~<°dlib.h
>

46 
	~<°döt.h
>

49 #i‡–
__CORTEX_M
 != 0 )

50 
	#HAVE_UINT_32T


	)

55 
	#USE_TABLES


	)

62 
	#VERSION_1


	)

65 
	~"´s.h
"

73 
	#WPOLY
 0x011b

	)

74 
	#BPOLY
 0x1b

	)

75 
	#DPOLY
 0x008d

	)

77 
	#f1
(
x
Ë(x)

	)

78 
	#f2
(
x
Ë((x << 1Ë^ (((x >> 7Ë& 1Ë* 
WPOLY
))

	)

79 
	#f4
(
x
Ë((x << 2Ë^ (((x >> 6Ë& 1Ë* 
WPOLY
Ë^ (((x >> 6Ë& 2Ë* WPOLY))

	)

80 
	#f8
(
x
Ë((x << 3Ë^ (((x >> 5Ë& 1Ë* 
WPOLY
) ^ (((x >> 5) & 2) * WPOLY) \

81 ^ (((
x
 >> 5Ë& 4Ë* 
WPOLY
))

	)

82 
	#d2
(
x
Ë(((xË>> 1Ë^ ((xË& 1 ? 
DPOLY
 : 0))

	)

84 
	#f3
(
x
Ë(
	`f2
(xË^ x)

	)

85 
	#f9
(
x
Ë(
	`f8
(xË^ x)

	)

86 
	#fb
(
x
Ë(
	`f8
(xË^ 
	`f2
(xË^ x)

	)

87 
	#fd
(
x
Ë(
	`f8
(xË^ 
	`f4
(xË^ x)

	)

88 
	#„
(
x
Ë(
	`f8
(xË^ 
	`f4
(xË^ 
	`f2
(x))

	)

90 #i‡
deföed
–
USE_TABLES
 )

92 
	#sb_d©a
(
w
) { \

93 
	`w
(0x63), w(0x7c), w(0x77), w(0x7b), w(0xf2), w(0x6b), w(0x6f), w(0xc5),\

94 
	`w
(0x30), w(0x01), w(0x67), w(0x2b), w(0xfe), w(0xd7), w(0xab), w(0x76),\

95 
	`w
(0xca), w(0x82), w(0xc9), w(0x7d), w(0xfa), w(0x59), w(0x47), w(0xf0),\

96 
	`w
(0xad), w(0xd4), w(0xa2), w(0xaf), w(0x9c), w(0xa4), w(0x72), w(0xc0),\

97 
	`w
(0xb7), w(0xfd), w(0x93), w(0x26), w(0x36), w(0x3f), w(0xf7), w(0xcc),\

98 
	`w
(0x34), w(0xa5), w(0xe5), w(0xf1), w(0x71), w(0xd8), w(0x31), w(0x15),\

99 
	`w
(0x04), w(0xc7), w(0x23), w(0xc3), w(0x18), w(0x96), w(0x05), w(0x9a),\

100 
	`w
(0x07), w(0x12), w(0x80), w(0xe2), w(0xeb), w(0x27), w(0xb2), w(0x75),\

101 
	`w
(0x09), w(0x83), w(0x2c), w(0x1a), w(0x1b), w(0x6e), w(0x5a), w(0xa0),\

102 
	`w
(0x52), w(0x3b), w(0xd6), w(0xb3), w(0x29), w(0xe3), w(0x2f), w(0x84),\

103 
	`w
(0x53), w(0xd1), w(0x00), w(0xed), w(0x20), w(0xfc), w(0xb1), w(0x5b),\

104 
	`w
(0x6a), w(0xcb), w(0xbe), w(0x39), w(0x4a), w(0x4c), w(0x58), w(0xcf),\

105 
	`w
(0xd0), w(0xef), w(0xaa), w(0xfb), w(0x43), w(0x4d), w(0x33), w(0x85),\

106 
	`w
(0x45), w(0xf9), w(0x02), w(0x7f), w(0x50), w(0x3c), w(0x9f), w(0xa8),\

107 
	`w
(0x51), w(0xa3), w(0x40), w(0x8f), w(0x92), w(0x9d), w(0x38), w(0xf5),\

108 
	`w
(0xbc), w(0xb6), w(0xda), w(0x21), w(0x10), w(0xff), w(0xf3), w(0xd2),\

109 
	`w
(0xcd), w(0x0c), w(0x13), w(0xec), w(0x5f), w(0x97), w(0x44), w(0x17),\

110 
	`w
(0xc4), w(0xa7), w(0x7e), w(0x3d), w(0x64), w(0x5d), w(0x19), w(0x73),\

111 
	`w
(0x60), w(0x81), w(0x4f), w(0xdc), w(0x22), w(0x2a), w(0x90), w(0x88),\

112 
	`w
(0x46), w(0xee), w(0xb8), w(0x14), w(0xde), w(0x5e), w(0x0b), w(0xdb),\

113 
	`w
(0xe0), w(0x32), w(0x3a), w(0x0a), w(0x49), w(0x06), w(0x24), w(0x5c),\

114 
	`w
(0xc2), w(0xd3), w(0xac), w(0x62), w(0x91), w(0x95), w(0xe4), w(0x79),\

115 
	`w
(0xe7), w(0xc8), w(0x37), w(0x6d), w(0x8d), w(0xd5), w(0x4e), w(0xa9),\

116 
	`w
(0x6c), w(0x56), w(0xf4), w(0xea), w(0x65), w(0x7a), w(0xae), w(0x08),\

117 
	`w
(0xba), w(0x78), w(0x25), w(0x2e), w(0x1c), w(0xa6), w(0xb4), w(0xc6),\

118 
	`w
(0xe8), w(0xdd), w(0x74), w(0x1f), w(0x4b), w(0xbd), w(0x8b), w(0x8a),\

119 
	`w
(0x70), w(0x3e), w(0xb5), w(0x66), w(0x48), w(0x03), w(0xf6), w(0x0e),\

120 
	`w
(0x61), w(0x35), w(0x57), w(0xb9), w(0x86), w(0xc1), w(0x1d), w(0x9e),\

121 
	`w
(0xe1), w(0xf8), w(0x98), w(0x11), w(0x69), w(0xd9), w(0x8e), w(0x94),\

122 
	`w
(0x9b), w(0x1e), w(0x87), w(0xe9), w(0xce), w(0x55), w(0x28), w(0xdf),\

123 
	`w
(0x8c), w(0xa1), w(0x89), w(0x0d), w(0xbf), w(0xe6), w(0x42), w(0x68),\

124 
	`w
(0x41), w(0x99), w(0x2d), w(0x0f), w(0xb0), w(0x54), w(0xbb), w(0x16Ë}

	)

126 
	#isb_d©a
(
w
) { \

127 
	`w
(0x52), w(0x09), w(0x6a), w(0xd5), w(0x30), w(0x36), w(0xa5), w(0x38),\

128 
	`w
(0xbf), w(0x40), w(0xa3), w(0x9e), w(0x81), w(0xf3), w(0xd7), w(0xfb),\

129 
	`w
(0x7c), w(0xe3), w(0x39), w(0x82), w(0x9b), w(0x2f), w(0xff), w(0x87),\

130 
	`w
(0x34), w(0x8e), w(0x43), w(0x44), w(0xc4), w(0xde), w(0xe9), w(0xcb),\

131 
	`w
(0x54), w(0x7b), w(0x94), w(0x32), w(0xa6), w(0xc2), w(0x23), w(0x3d),\

132 
	`w
(0xee), w(0x4c), w(0x95), w(0x0b), w(0x42), w(0xfa), w(0xc3), w(0x4e),\

133 
	`w
(0x08), w(0x2e), w(0xa1), w(0x66), w(0x28), w(0xd9), w(0x24), w(0xb2),\

134 
	`w
(0x76), w(0x5b), w(0xa2), w(0x49), w(0x6d), w(0x8b), w(0xd1), w(0x25),\

135 
	`w
(0x72), w(0xf8), w(0xf6), w(0x64), w(0x86), w(0x68), w(0x98), w(0x16),\

136 
	`w
(0xd4), w(0xa4), w(0x5c), w(0xcc), w(0x5d), w(0x65), w(0xb6), w(0x92),\

137 
	`w
(0x6c), w(0x70), w(0x48), w(0x50), w(0xfd), w(0xed), w(0xb9), w(0xda),\

138 
	`w
(0x5e), w(0x15), w(0x46), w(0x57), w(0xa7), w(0x8d), w(0x9d), w(0x84),\

139 
	`w
(0x90), w(0xd8), w(0xab), w(0x00), w(0x8c), w(0xbc), w(0xd3), w(0x0a),\

140 
	`w
(0xf7), w(0xe4), w(0x58), w(0x05), w(0xb8), w(0xb3), w(0x45), w(0x06),\

141 
	`w
(0xd0), w(0x2c), w(0x1e), w(0x8f), w(0xca), w(0x3f), w(0x0f), w(0x02),\

142 
	`w
(0xc1), w(0xaf), w(0xbd), w(0x03), w(0x01), w(0x13), w(0x8a), w(0x6b),\

143 
	`w
(0x3a), w(0x91), w(0x11), w(0x41), w(0x4f), w(0x67), w(0xdc), w(0xea),\

144 
	`w
(0x97), w(0xf2), w(0xcf), w(0xce), w(0xf0), w(0xb4), w(0xe6), w(0x73),\

145 
	`w
(0x96), w(0xac), w(0x74), w(0x22), w(0xe7), w(0xad), w(0x35), w(0x85),\

146 
	`w
(0xe2), w(0xf9), w(0x37), w(0xe8), w(0x1c), w(0x75), w(0xdf), w(0x6e),\

147 
	`w
(0x47), w(0xf1), w(0x1a), w(0x71), w(0x1d), w(0x29), w(0xc5), w(0x89),\

148 
	`w
(0x6f), w(0xb7), w(0x62), w(0x0e), w(0xaa), w(0x18), w(0xbe), w(0x1b),\

149 
	`w
(0xfc), w(0x56), w(0x3e), w(0x4b), w(0xc6), w(0xd2), w(0x79), w(0x20),\

150 
	`w
(0x9a), w(0xdb), w(0xc0), w(0xfe), w(0x78), w(0xcd), w(0x5a), w(0xf4),\

151 
	`w
(0x1f), w(0xdd), w(0xa8), w(0x33), w(0x88), w(0x07), w(0xc7), w(0x31),\

152 
	`w
(0xb1), w(0x12), w(0x10), w(0x59), w(0x27), w(0x80), w(0xec), w(0x5f),\

153 
	`w
(0x60), w(0x51), w(0x7f), w(0xa9), w(0x19), w(0xb5), w(0x4a), w(0x0d),\

154 
	`w
(0x2d), w(0xe5), w(0x7a), w(0x9f), w(0x93), w(0xc9), w(0x9c), w(0xef),\

155 
	`w
(0xa0), w(0xe0), w(0x3b), w(0x4d), w(0xae), w(0x2a), w(0xf5), w(0xb0),\

156 
	`w
(0xc8), w(0xeb), w(0xbb), w(0x3c), w(0x83), w(0x53), w(0x99), w(0x61),\

157 
	`w
(0x17), w(0x2b), w(0x04), w(0x7e), w(0xba), w(0x77), w(0xd6), w(0x26),\

158 
	`w
(0xe1), w(0x69), w(0x14), w(0x63), w(0x55), w(0x21), w(0x0c), w(0x7dË}

	)

160 
	#mm_d©a
(
w
) { \

161 
	`w
(0x00), w(0x01), w(0x02), w(0x03), w(0x04), w(0x05), w(0x06), w(0x07),\

162 
	`w
(0x08), w(0x09), w(0x0a), w(0x0b), w(0x0c), w(0x0d), w(0x0e), w(0x0f),\

163 
	`w
(0x10), w(0x11), w(0x12), w(0x13), w(0x14), w(0x15), w(0x16), w(0x17),\

164 
	`w
(0x18), w(0x19), w(0x1a), w(0x1b), w(0x1c), w(0x1d), w(0x1e), w(0x1f),\

165 
	`w
(0x20), w(0x21), w(0x22), w(0x23), w(0x24), w(0x25), w(0x26), w(0x27),\

166 
	`w
(0x28), w(0x29), w(0x2a), w(0x2b), w(0x2c), w(0x2d), w(0x2e), w(0x2f),\

167 
	`w
(0x30), w(0x31), w(0x32), w(0x33), w(0x34), w(0x35), w(0x36), w(0x37),\

168 
	`w
(0x38), w(0x39), w(0x3a), w(0x3b), w(0x3c), w(0x3d), w(0x3e), w(0x3f),\

169 
	`w
(0x40), w(0x41), w(0x42), w(0x43), w(0x44), w(0x45), w(0x46), w(0x47),\

170 
	`w
(0x48), w(0x49), w(0x4a), w(0x4b), w(0x4c), w(0x4d), w(0x4e), w(0x4f),\

171 
	`w
(0x50), w(0x51), w(0x52), w(0x53), w(0x54), w(0x55), w(0x56), w(0x57),\

172 
	`w
(0x58), w(0x59), w(0x5a), w(0x5b), w(0x5c), w(0x5d), w(0x5e), w(0x5f),\

173 
	`w
(0x60), w(0x61), w(0x62), w(0x63), w(0x64), w(0x65), w(0x66), w(0x67),\

174 
	`w
(0x68), w(0x69), w(0x6a), w(0x6b), w(0x6c), w(0x6d), w(0x6e), w(0x6f),\

175 
	`w
(0x70), w(0x71), w(0x72), w(0x73), w(0x74), w(0x75), w(0x76), w(0x77),\

176 
	`w
(0x78), w(0x79), w(0x7a), w(0x7b), w(0x7c), w(0x7d), w(0x7e), w(0x7f),\

177 
	`w
(0x80), w(0x81), w(0x82), w(0x83), w(0x84), w(0x85), w(0x86), w(0x87),\

178 
	`w
(0x88), w(0x89), w(0x8a), w(0x8b), w(0x8c), w(0x8d), w(0x8e), w(0x8f),\

179 
	`w
(0x90), w(0x91), w(0x92), w(0x93), w(0x94), w(0x95), w(0x96), w(0x97),\

180 
	`w
(0x98), w(0x99), w(0x9a), w(0x9b), w(0x9c), w(0x9d), w(0x9e), w(0x9f),\

181 
	`w
(0xa0), w(0xa1), w(0xa2), w(0xa3), w(0xa4), w(0xa5), w(0xa6), w(0xa7),\

182 
	`w
(0xa8), w(0xa9), w(0xaa), w(0xab), w(0xac), w(0xad), w(0xae), w(0xaf),\

183 
	`w
(0xb0), w(0xb1), w(0xb2), w(0xb3), w(0xb4), w(0xb5), w(0xb6), w(0xb7),\

184 
	`w
(0xb8), w(0xb9), w(0xba), w(0xbb), w(0xbc), w(0xbd), w(0xbe), w(0xbf),\

185 
	`w
(0xc0), w(0xc1), w(0xc2), w(0xc3), w(0xc4), w(0xc5), w(0xc6), w(0xc7),\

186 
	`w
(0xc8), w(0xc9), w(0xca), w(0xcb), w(0xcc), w(0xcd), w(0xce), w(0xcf),\

187 
	`w
(0xd0), w(0xd1), w(0xd2), w(0xd3), w(0xd4), w(0xd5), w(0xd6), w(0xd7),\

188 
	`w
(0xd8), w(0xd9), w(0xda), w(0xdb), w(0xdc), w(0xdd), w(0xde), w(0xdf),\

189 
	`w
(0xe0), w(0xe1), w(0xe2), w(0xe3), w(0xe4), w(0xe5), w(0xe6), w(0xe7),\

190 
	`w
(0xe8), w(0xe9), w(0xea), w(0xeb), w(0xec), w(0xed), w(0xee), w(0xef),\

191 
	`w
(0xf0), w(0xf1), w(0xf2), w(0xf3), w(0xf4), w(0xf5), w(0xf6), w(0xf7),\

192 
	`w
(0xf8), w(0xf9), w(0xÁ), w(0xfb), w(0xfc), w(0xfd), w(0x„), w(0xffË}

	)

194 c⁄° 
uöt8_t
 
	gsbox
[256] = 
sb_d©a
(
f1
);

196 #i‡
deföed
–
AES_DEC_PREKEYED
 )

197 c⁄° 
uöt8_t
 
	gisbox
[256] = 
isb_d©a
(
f1
);

200 c⁄° 
uöt8_t
 
	ggfm2_sbox
[256] = 
sb_d©a
(
f2
);

201 c⁄° 
uöt8_t
 
	ggfm3_sbox
[256] = 
sb_d©a
(
f3
);

203 #i‡
deföed
–
AES_DEC_PREKEYED
 )

204 c⁄° 
uöt8_t
 
	ggfmul_9
[256] = 
mm_d©a
(
f9
);

205 c⁄° 
uöt8_t
 
	ggfmul_b
[256] = 
mm_d©a
(
fb
);

206 c⁄° 
uöt8_t
 
	ggfmul_d
[256] = 
mm_d©a
(
fd
);

207 c⁄° 
uöt8_t
 
	ggfmul_e
[256] = 
mm_d©a
(
„
);

210 
	#s_box
(
x
Ë
sbox
[(x)]

	)

211 #i‡
deföed
–
AES_DEC_PREKEYED
 )

212 
	#is_box
(
x
Ë
isbox
[(x)]

	)

214 
	#gfm2_sb
(
x
Ë
gfm2_sbox
[(x)]

	)

215 
	#gfm3_sb
(
x
Ë
gfm3_sbox
[(x)]

	)

216 #i‡
deföed
–
AES_DEC_PREKEYED
 )

217 
	#gfm_9
(
x
Ë
gfmul_9
[(x)]

	)

218 
	#gfm_b
(
x
Ë
gfmul_b
[(x)]

	)

219 
	#gfm_d
(
x
Ë
gfmul_d
[(x)]

	)

220 
	#gfm_e
(
x
Ë
gfmul_e
[(x)]

	)

229 
uöt8_t
 
	$hibô
(c⁄° 
uöt8_t
 
x
)

230 { 
uöt8_t
 
r
 = (uöt8_t)((
x
 >> 1) | (x >> 2));

232 
r
 |= (r >> 2);

233 
r
 |= (r >> 4);

234  (
r
 + 1) >> 1;

235 
	}
}

239 
uöt8_t
 
	$gf_öv
(c⁄° 
uöt8_t
 
x
)

240 { 
uöt8_t
 
p1
 = 
x
, 
p2
 = 
BPOLY
, 
n1
 = 
	`hibô
(x), 
n2
 = 0x80, 
v1
 = 1, 
v2
 = 0;

242 if(
x
 < 2)

243  
x
;

247 if(
n1
)

248 
n2
 >
n1
)

250 
n2
 /
n1
;

251 
p2
 ^(
p1
 * 
n2
) & 0xff;

252 
v2
 ^(
v1
 * 
n2
);

253 
n2
 = 
	`hibô
(
p2
);

256  
v1
;

258 if(
n2
)

259 
n1
 >
n2
)

261 
n1
 /
n2
;

262 
p1
 ^
p2
 * 
n1
;

263 
v1
 ^
v2
 * 
n1
;

264 
n1
 = 
	`hibô
(
p1
);

267  
v2
;

269 
	}
}

272 
uöt8_t
 
	$fwd_afföe
(c⁄° 
uöt8_t
 
x
)

274 #i‡
	`deföed
–
HAVE_UINT_32T
 )

275 
uöt32_t
 
w
 = 
x
;

276 
w
 ^= (w << 1) ^ (w << 2) ^ (w << 3) ^ (w << 4);

277  0x63 ^ ((
w
 ^ (w >> 8)) & 0xff);

279  0x63 ^ 
x
 ^ (x << 1) ^ (x << 2) ^ (x << 3) ^ (x << 4)

280 ^ (
x
 >> 7) ^ (x >> 6) ^ (x >> 5) ^ (x >> 4);

282 
	}
}

284 
uöt8_t
 
	$öv_afföe
(c⁄° 
uöt8_t
 
x
)

286 #i‡
	`deföed
–
HAVE_UINT_32T
 )

287 
uöt32_t
 
w
 = 
x
;

288 
w
 = (w << 1) ^ (w << 3) ^ (w << 6);

289  0x05 ^ ((
w
 ^ (w >> 8)) & 0xff);

291  0x05 ^ (
x
 << 1) ^ (x << 3) ^ (x << 6)

292 ^ (
x
 >> 7) ^ (x >> 5) ^ (x >> 2);

294 
	}
}

296 
	#s_box
(
x
Ë
	`fwd_afföe
(
	`gf_öv
(x))

	)

297 
	#is_box
(
x
Ë
	`gf_öv
(
	`öv_afföe
(x))

	)

298 
	#gfm2_sb
(
x
Ë
	`f2
(
	`s_box
(x))

	)

299 
	#gfm3_sb
(
x
Ë
	`f3
(
	`s_box
(x))

	)

300 
	#gfm_9
(
x
Ë
	`f9
(x)

	)

301 
	#gfm_b
(
x
Ë
	`fb
(x)

	)

302 
	#gfm_d
(
x
Ë
	`fd
(x)

	)

303 
	#gfm_e
(
x
Ë
	`„
(x)

	)

307 #i‡
deföed
–
HAVE_MEMCPY
 )

308 
	#block_c›y_¬
(
d
, 
s
, 
l
Ë
	`mem˝y
(d, s,Ü)

	)

309 
	#block_c›y
(
d
, 
s
Ë
	`mem˝y
(d, s, 
N_BLOCK
)

	)

311 
	#block_c›y_¬
(
d
, 
s
, 
l
Ë
	`c›y_block_¬
(d, s,Ü)

	)

312 
	#block_c›y
(
d
, 
s
Ë
	`c›y_block
(d, s)

	)

315 
	$c›y_block
–*
d
, c⁄° *
s
 )

317 #i‡
	`deföed
–
HAVE_UINT_32T
 )

318 ((
uöt32_t
*)
d
)[ 0] = ((uöt32_t*)
s
)[ 0];

319 ((
uöt32_t
*)
d
)[ 1] = ((uöt32_t*)
s
)[ 1];

320 ((
uöt32_t
*)
d
)[ 2] = ((uöt32_t*)
s
)[ 2];

321 ((
uöt32_t
*)
d
)[ 3] = ((uöt32_t*)
s
)[ 3];

323 ((
uöt8_t
*)
d
)[ 0] = ((uöt8_t*)
s
)[ 0];

324 ((
uöt8_t
*)
d
)[ 1] = ((uöt8_t*)
s
)[ 1];

325 ((
uöt8_t
*)
d
)[ 2] = ((uöt8_t*)
s
)[ 2];

326 ((
uöt8_t
*)
d
)[ 3] = ((uöt8_t*)
s
)[ 3];

327 ((
uöt8_t
*)
d
)[ 4] = ((uöt8_t*)
s
)[ 4];

328 ((
uöt8_t
*)
d
)[ 5] = ((uöt8_t*)
s
)[ 5];

329 ((
uöt8_t
*)
d
)[ 6] = ((uöt8_t*)
s
)[ 6];

330 ((
uöt8_t
*)
d
)[ 7] = ((uöt8_t*)
s
)[ 7];

331 ((
uöt8_t
*)
d
)[ 8] = ((uöt8_t*)
s
)[ 8];

332 ((
uöt8_t
*)
d
)[ 9] = ((uöt8_t*)
s
)[ 9];

333 ((
uöt8_t
*)
d
)[10] = ((uöt8_t*)
s
)[10];

334 ((
uöt8_t
*)
d
)[11] = ((uöt8_t*)
s
)[11];

335 ((
uöt8_t
*)
d
)[12] = ((uöt8_t*)
s
)[12];

336 ((
uöt8_t
*)
d
)[13] = ((uöt8_t*)
s
)[13];

337 ((
uöt8_t
*)
d
)[14] = ((uöt8_t*)
s
)[14];

338 ((
uöt8_t
*)
d
)[15] = ((uöt8_t*)
s
)[15];

340 
	}
}

342 
	$c›y_block_¬
–
uöt8_t
 * 
d
, c⁄° uöt8_à*
s
, uöt8_à
¬
 )

344  
¬
-- )

346 *
d
++ = *
s
++;

347 
	}
}

349 
	$x‹_block
–*
d
, c⁄° *
s
 )

351 #i‡
	`deföed
–
HAVE_UINT_32T
 )

352 ((
uöt32_t
*)
d
)[ 0] ^((uöt32_t*)
s
)[ 0];

353 ((
uöt32_t
*)
d
)[ 1] ^((uöt32_t*)
s
)[ 1];

354 ((
uöt32_t
*)
d
)[ 2] ^((uöt32_t*)
s
)[ 2];

355 ((
uöt32_t
*)
d
)[ 3] ^((uöt32_t*)
s
)[ 3];

357 ((
uöt8_t
*)
d
)[ 0] ^((uöt8_t*)
s
)[ 0];

358 ((
uöt8_t
*)
d
)[ 1] ^((uöt8_t*)
s
)[ 1];

359 ((
uöt8_t
*)
d
)[ 2] ^((uöt8_t*)
s
)[ 2];

360 ((
uöt8_t
*)
d
)[ 3] ^((uöt8_t*)
s
)[ 3];

361 ((
uöt8_t
*)
d
)[ 4] ^((uöt8_t*)
s
)[ 4];

362 ((
uöt8_t
*)
d
)[ 5] ^((uöt8_t*)
s
)[ 5];

363 ((
uöt8_t
*)
d
)[ 6] ^((uöt8_t*)
s
)[ 6];

364 ((
uöt8_t
*)
d
)[ 7] ^((uöt8_t*)
s
)[ 7];

365 ((
uöt8_t
*)
d
)[ 8] ^((uöt8_t*)
s
)[ 8];

366 ((
uöt8_t
*)
d
)[ 9] ^((uöt8_t*)
s
)[ 9];

367 ((
uöt8_t
*)
d
)[10] ^((uöt8_t*)
s
)[10];

368 ((
uöt8_t
*)
d
)[11] ^((uöt8_t*)
s
)[11];

369 ((
uöt8_t
*)
d
)[12] ^((uöt8_t*)
s
)[12];

370 ((
uöt8_t
*)
d
)[13] ^((uöt8_t*)
s
)[13];

371 ((
uöt8_t
*)
d
)[14] ^((uöt8_t*)
s
)[14];

372 ((
uöt8_t
*)
d
)[15] ^((uöt8_t*)
s
)[15];

374 
	}
}

376 
	$c›y_™d_key
–*
d
, c⁄° *
s
, c⁄° *
k
 )

378 #i‡
	`deföed
–
HAVE_UINT_32T
 )

379 ((
uöt32_t
*)
d
)[ 0] = ((uöt32_t*)
s
)[ 0] ^ ((uöt32_t*)
k
)[ 0];

380 ((
uöt32_t
*)
d
)[ 1] = ((uöt32_t*)
s
)[ 1] ^ ((uöt32_t*)
k
)[ 1];

381 ((
uöt32_t
*)
d
)[ 2] = ((uöt32_t*)
s
)[ 2] ^ ((uöt32_t*)
k
)[ 2];

382 ((
uöt32_t
*)
d
)[ 3] = ((uöt32_t*)
s
)[ 3] ^ ((uöt32_t*)
k
)[ 3];

384 ((
uöt8_t
*)
d
)[ 0] = ((uöt8_t*)
s
)[ 0] ^ ((uöt8_t*)
k
)[ 0];

385 ((
uöt8_t
*)
d
)[ 1] = ((uöt8_t*)
s
)[ 1] ^ ((uöt8_t*)
k
)[ 1];

386 ((
uöt8_t
*)
d
)[ 2] = ((uöt8_t*)
s
)[ 2] ^ ((uöt8_t*)
k
)[ 2];

387 ((
uöt8_t
*)
d
)[ 3] = ((uöt8_t*)
s
)[ 3] ^ ((uöt8_t*)
k
)[ 3];

388 ((
uöt8_t
*)
d
)[ 4] = ((uöt8_t*)
s
)[ 4] ^ ((uöt8_t*)
k
)[ 4];

389 ((
uöt8_t
*)
d
)[ 5] = ((uöt8_t*)
s
)[ 5] ^ ((uöt8_t*)
k
)[ 5];

390 ((
uöt8_t
*)
d
)[ 6] = ((uöt8_t*)
s
)[ 6] ^ ((uöt8_t*)
k
)[ 6];

391 ((
uöt8_t
*)
d
)[ 7] = ((uöt8_t*)
s
)[ 7] ^ ((uöt8_t*)
k
)[ 7];

392 ((
uöt8_t
*)
d
)[ 8] = ((uöt8_t*)
s
)[ 8] ^ ((uöt8_t*)
k
)[ 8];

393 ((
uöt8_t
*)
d
)[ 9] = ((uöt8_t*)
s
)[ 9] ^ ((uöt8_t*)
k
)[ 9];

394 ((
uöt8_t
*)
d
)[10] = ((uöt8_t*)
s
)[10] ^ ((uöt8_t*)
k
)[10];

395 ((
uöt8_t
*)
d
)[11] = ((uöt8_t*)
s
)[11] ^ ((uöt8_t*)
k
)[11];

396 ((
uöt8_t
*)
d
)[12] = ((uöt8_t*)
s
)[12] ^ ((uöt8_t*)
k
)[12];

397 ((
uöt8_t
*)
d
)[13] = ((uöt8_t*)
s
)[13] ^ ((uöt8_t*)
k
)[13];

398 ((
uöt8_t
*)
d
)[14] = ((uöt8_t*)
s
)[14] ^ ((uöt8_t*)
k
)[14];

399 ((
uöt8_t
*)
d
)[15] = ((uöt8_t*)
s
)[15] ^ ((uöt8_t*)
k
)[15];

401 
	`block_c›y
(
d
, 
s
);

402 
	`x‹_block
(
d
, 
k
);

404 
	}
}

406 
	$add_round_key
–
uöt8_t
 
d
[
N_BLOCK
], c⁄° uöt8_à
k
[N_BLOCK] )

408 
	`x‹_block
(
d
, 
k
);

409 
	}
}

411 
	$shi·_sub_rows
–
uöt8_t
 
°
[
N_BLOCK
] )

412 { 
uöt8_t
 
â
;

414 
°
[ 0] = 
	`s_box
(st[ 0]); st[ 4] = s_box(st[ 4]);

415 
°
[ 8] = 
	`s_box
(st[ 8]); st[12] = s_box(st[12]);

417 
â
 = 
°
[1]; st[ 1] = 
	`s_box
(st[ 5]); st[ 5] = s_box(st[ 9]);

418 
°
[ 9] = 
	`s_box
(°[13]); st[13] = s_box–
â
 );

420 
â
 = 
°
[2]; st[ 2] = 
	`s_box
(st[10]); st[10] = s_box(Åt );

421 
â
 = 
°
[6]; st[ 6] = 
	`s_box
(st[14]); st[14] = s_box(Åt );

423 
â
 = 
°
[15]; st[15] = 
	`s_box
(st[11]); st[11] = s_box(st[ 7]);

424 
°
[ 7] = 
	`s_box
(°[ 3]); st[ 3] = s_box–
â
 );

425 
	}
}

427 #i‡
deföed
–
AES_DEC_PREKEYED
 )

429 
	$öv_shi·_sub_rows
–
uöt8_t
 
°
[
N_BLOCK
] )

430 { 
uöt8_t
 
â
;

432 
°
[ 0] = 
	`is_box
(st[ 0]); st[ 4] = is_box(st[ 4]);

433 
°
[ 8] = 
	`is_box
(st[ 8]); st[12] = is_box(st[12]);

435 
â
 = 
°
[13]; st[13] = 
	`is_box
(st[9]); st[ 9] = is_box(st[5]);

436 
°
[ 5] = 
	`is_box
(°[1]); st[ 1] = is_box–
â
 );

438 
â
 = 
°
[2]; st[ 2] = 
	`is_box
(st[10]); st[10] = is_box(Åt );

439 
â
 = 
°
[6]; st[ 6] = 
	`is_box
(st[14]); st[14] = is_box(Åt );

441 
â
 = 
°
[3]; st[ 3] = 
	`is_box
(st[ 7]); st[ 7] = is_box(st[11]);

442 
°
[11] = 
	`is_box
(°[15]); st[15] = is_box–
â
 );

443 
	}
}

447 #i‡
deföed
–
VERSION_1
 )

448 
	$mix_sub_cﬁumns
–
uöt8_t
 
dt
[
N_BLOCK
] )

449 { 
uöt8_t
 
°
[
N_BLOCK
];

450 
	`block_c›y
(
°
, 
dt
);

452 
	$mix_sub_cﬁumns
–
uöt8_t
 
dt
[
N_BLOCK
], uöt8_à
°
[N_BLOCK] )

455 
dt
[ 0] = 
	`gfm2_sb
(
°
[0]Ë^ 
	`gfm3_sb
(°[5]Ë^ 
	`s_box
(st[10]) ^ s_box(st[15]);

456 
dt
[ 1] = 
	`s_box
(
°
[0]Ë^ 
	`gfm2_sb
(°[5]Ë^ 
	`gfm3_sb
(st[10]) ^ s_box(st[15]);

457 
dt
[ 2] = 
	`s_box
(
°
[0]Ë^ s_box(°[5]Ë^ 
	`gfm2_sb
(°[10]Ë^ 
	`gfm3_sb
(st[15]);

458 
dt
[ 3] = 
	`gfm3_sb
(
°
[0]Ë^ 
	`s_box
(°[5]Ë^ s_box(°[10]Ë^ 
	`gfm2_sb
(st[15]);

460 
dt
[ 4] = 
	`gfm2_sb
(
°
[4]Ë^ 
	`gfm3_sb
(°[9]Ë^ 
	`s_box
(st[14]) ^ s_box(st[3]);

461 
dt
[ 5] = 
	`s_box
(
°
[4]Ë^ 
	`gfm2_sb
(°[9]Ë^ 
	`gfm3_sb
(st[14]) ^ s_box(st[3]);

462 
dt
[ 6] = 
	`s_box
(
°
[4]Ë^ s_box(°[9]Ë^ 
	`gfm2_sb
(°[14]Ë^ 
	`gfm3_sb
(st[3]);

463 
dt
[ 7] = 
	`gfm3_sb
(
°
[4]Ë^ 
	`s_box
(°[9]Ë^ s_box(°[14]Ë^ 
	`gfm2_sb
(st[3]);

465 
dt
[ 8] = 
	`gfm2_sb
(
°
[8]Ë^ 
	`gfm3_sb
(°[13]Ë^ 
	`s_box
(st[2]) ^ s_box(st[7]);

466 
dt
[ 9] = 
	`s_box
(
°
[8]Ë^ 
	`gfm2_sb
(°[13]Ë^ 
	`gfm3_sb
(st[2]) ^ s_box(st[7]);

467 
dt
[10] = 
	`s_box
(
°
[8]Ë^ s_box(°[13]Ë^ 
	`gfm2_sb
(°[2]Ë^ 
	`gfm3_sb
(st[7]);

468 
dt
[11] = 
	`gfm3_sb
(
°
[8]Ë^ 
	`s_box
(°[13]Ë^ s_box(°[2]Ë^ 
	`gfm2_sb
(st[7]);

470 
dt
[12] = 
	`gfm2_sb
(
°
[12]Ë^ 
	`gfm3_sb
(°[1]Ë^ 
	`s_box
(st[6]) ^ s_box(st[11]);

471 
dt
[13] = 
	`s_box
(
°
[12]Ë^ 
	`gfm2_sb
(°[1]Ë^ 
	`gfm3_sb
(st[6]) ^ s_box(st[11]);

472 
dt
[14] = 
	`s_box
(
°
[12]Ë^ s_box(°[1]Ë^ 
	`gfm2_sb
(°[6]Ë^ 
	`gfm3_sb
(st[11]);

473 
dt
[15] = 
	`gfm3_sb
(
°
[12]Ë^ 
	`s_box
(°[1]Ë^ s_box(°[6]Ë^ 
	`gfm2_sb
(st[11]);

474 
	}
}

476 #i‡
deföed
–
AES_DEC_PREKEYED
 )

478 #i‡
deföed
–
VERSION_1
 )

479 
	$öv_mix_sub_cﬁumns
–
uöt8_t
 
dt
[
N_BLOCK
] )

480 { 
uöt8_t
 
°
[
N_BLOCK
];

481 
	`block_c›y
(
°
, 
dt
);

483 
	$öv_mix_sub_cﬁumns
–
uöt8_t
 
dt
[
N_BLOCK
], uöt8_à
°
[N_BLOCK] )

486 
dt
[ 0] = 
	`is_box
(
	`gfm_e
(
°
[ 0]Ë^ 
	`gfm_b
(°[ 1]Ë^ 
	`gfm_d
(°[ 2]Ë^ 
	`gfm_9
(st[ 3]));

487 
dt
[ 5] = 
	`is_box
(
	`gfm_9
(
°
[ 0]Ë^ 
	`gfm_e
(°[ 1]Ë^ 
	`gfm_b
(°[ 2]Ë^ 
	`gfm_d
(st[ 3]));

488 
dt
[10] = 
	`is_box
(
	`gfm_d
(
°
[ 0]Ë^ 
	`gfm_9
(°[ 1]Ë^ 
	`gfm_e
(°[ 2]Ë^ 
	`gfm_b
(st[ 3]));

489 
dt
[15] = 
	`is_box
(
	`gfm_b
(
°
[ 0]Ë^ 
	`gfm_d
(°[ 1]Ë^ 
	`gfm_9
(°[ 2]Ë^ 
	`gfm_e
(st[ 3]));

491 
dt
[ 4] = 
	`is_box
(
	`gfm_e
(
°
[ 4]Ë^ 
	`gfm_b
(°[ 5]Ë^ 
	`gfm_d
(°[ 6]Ë^ 
	`gfm_9
(st[ 7]));

492 
dt
[ 9] = 
	`is_box
(
	`gfm_9
(
°
[ 4]Ë^ 
	`gfm_e
(°[ 5]Ë^ 
	`gfm_b
(°[ 6]Ë^ 
	`gfm_d
(st[ 7]));

493 
dt
[14] = 
	`is_box
(
	`gfm_d
(
°
[ 4]Ë^ 
	`gfm_9
(°[ 5]Ë^ 
	`gfm_e
(°[ 6]Ë^ 
	`gfm_b
(st[ 7]));

494 
dt
[ 3] = 
	`is_box
(
	`gfm_b
(
°
[ 4]Ë^ 
	`gfm_d
(°[ 5]Ë^ 
	`gfm_9
(°[ 6]Ë^ 
	`gfm_e
(st[ 7]));

496 
dt
[ 8] = 
	`is_box
(
	`gfm_e
(
°
[ 8]Ë^ 
	`gfm_b
(°[ 9]Ë^ 
	`gfm_d
(°[10]Ë^ 
	`gfm_9
(st[11]));

497 
dt
[13] = 
	`is_box
(
	`gfm_9
(
°
[ 8]Ë^ 
	`gfm_e
(°[ 9]Ë^ 
	`gfm_b
(°[10]Ë^ 
	`gfm_d
(st[11]));

498 
dt
[ 2] = 
	`is_box
(
	`gfm_d
(
°
[ 8]Ë^ 
	`gfm_9
(°[ 9]Ë^ 
	`gfm_e
(°[10]Ë^ 
	`gfm_b
(st[11]));

499 
dt
[ 7] = 
	`is_box
(
	`gfm_b
(
°
[ 8]Ë^ 
	`gfm_d
(°[ 9]Ë^ 
	`gfm_9
(°[10]Ë^ 
	`gfm_e
(st[11]));

501 
dt
[12] = 
	`is_box
(
	`gfm_e
(
°
[12]Ë^ 
	`gfm_b
(°[13]Ë^ 
	`gfm_d
(°[14]Ë^ 
	`gfm_9
(st[15]));

502 
dt
[ 1] = 
	`is_box
(
	`gfm_9
(
°
[12]Ë^ 
	`gfm_e
(°[13]Ë^ 
	`gfm_b
(°[14]Ë^ 
	`gfm_d
(st[15]));

503 
dt
[ 6] = 
	`is_box
(
	`gfm_d
(
°
[12]Ë^ 
	`gfm_9
(°[13]Ë^ 
	`gfm_e
(°[14]Ë^ 
	`gfm_b
(st[15]));

504 
dt
[11] = 
	`is_box
(
	`gfm_b
(
°
[12]Ë^ 
	`gfm_d
(°[13]Ë^ 
	`gfm_9
(°[14]Ë^ 
	`gfm_e
(st[15]));

505 
	}
}

509 #i‡
deföed
–
AES_ENC_PREKEYED
 ) || deföed–
AES_DEC_PREKEYED
 )

513 
ªtu∫_ty≥
 
	$´s_£t_key
–c⁄° 
uöt8_t
 
key
[], 
Àngth_ty≥
 
keyÀn
, 
´s_c⁄ãxt
 
˘x
[1] )

515 
uöt8_t
 
cc
, 
rc
, 
hi
;

517  
keyÀn
 )

524 
˘x
->
∫d
 = 0;

525  ( 
uöt8_t
 )-1;

527 
	`block_c›y_¬
(
˘x
->
ksch
, 
key
, 
keyÀn
);

528 
hi
 = (
keyÀn
 + 28) << 2;

529 
˘x
->
∫d
 = (
hi
 >> 4) - 1;

530  
cc
 = 
keyÀn
, 
rc
 = 1; c¯< 
hi
; cc += 4 )

531 { 
uöt8_t
 
â
, 
t0
, 
t1
, 
t2
, 
t3
;

533 
t0
 = 
˘x
->
ksch
[
cc
 - 4];

534 
t1
 = 
˘x
->
ksch
[
cc
 - 3];

535 
t2
 = 
˘x
->
ksch
[
cc
 - 2];

536 
t3
 = 
˘x
->
ksch
[
cc
 - 1];

537 if–
cc
 % 
keyÀn
 == 0 )

539 
â
 = 
t0
;

540 
t0
 = 
	`s_box
(
t1
Ë^ 
rc
;

541 
t1
 = 
	`s_box
(
t2
);

542 
t2
 = 
	`s_box
(
t3
);

543 
t3
 = 
	`s_box
(
â
);

544 
rc
 = 
	`f2
(rc);

546 if–
keyÀn
 > 24 && 
cc
 % keylen == 16 )

548 
t0
 = 
	`s_box
(t0);

549 
t1
 = 
	`s_box
(t1);

550 
t2
 = 
	`s_box
(t2);

551 
t3
 = 
	`s_box
(t3);

553 
â
 = 
cc
 - 
keyÀn
;

554 
˘x
->
ksch
[
cc
 + 0] = ctx->ksch[
â
 + 0] ^ 
t0
;

555 
˘x
->
ksch
[
cc
 + 1] = ctx->ksch[
â
 + 1] ^ 
t1
;

556 
˘x
->
ksch
[
cc
 + 2] = ctx->ksch[
â
 + 2] ^ 
t2
;

557 
˘x
->
ksch
[
cc
 + 3] = ctx->ksch[
â
 + 3] ^ 
t3
;

560 
	}
}

564 #i‡
deföed
–
AES_ENC_PREKEYED
 )

568 
ªtu∫_ty≥
 
	$´s_í¸y±
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

570 if–
˘x
->
∫d
 )

572 
uöt8_t
 
s1
[
N_BLOCK
], 
r
;

573 
	`c›y_™d_key
–
s1
, 
ö
, 
˘x
->
ksch
 );

575  
r
 = 1 ;Ñ < 
˘x
->
∫d
 ; ++r )

576 #i‡
	`deföed
–
VERSION_1
 )

578 
	`mix_sub_cﬁumns
–
s1
 );

579 
	`add_round_key
–
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
);

582 { 
uöt8_t
 
s2
[
N_BLOCK
];

583 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

584 
	`c›y_™d_key
–
s1
, 
s2
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
);

587 
	`shi·_sub_rows
–
s1
 );

588 
	`c›y_™d_key
–
out
, 
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

591  ( 
uöt8_t
 )-1;

593 
	}
}

597 
ªtu∫_ty≥
 
	$´s_cbc_í¸y±
–c⁄° 
uöt8_t
 *
ö
, uöt8_à*
out
,

598 
öt32_t
 
n_block
, 
uöt8_t
 
iv
[
N_BLOCK
], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

601 
n_block
--)

603 
	`x‹_block
(
iv
, 
ö
);

604 if(
	`´s_í¸y±
(
iv
, iv, 
˘x
Ë!
EXIT_SUCCESS
)

605  
EXIT_FAILURE
;

607 
	`block_c›y
(
out
, 
iv
);

608 
ö
 +
N_BLOCK
;

609 
out
 +
N_BLOCK
;

611  
EXIT_SUCCESS
;

612 
	}
}

616 #i‡
deföed
–
AES_DEC_PREKEYED
 )

620 
ªtu∫_ty≥
 
	$´s_de¸y±
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

622 if–
˘x
->
∫d
 )

624 
uöt8_t
 
s1
[
N_BLOCK
], 
r
;

625 
	`c›y_™d_key
–
s1
, 
ö
, 
˘x
->
ksch
 + ctx->
∫d
 * 
N_BLOCK
 );

626 
	`öv_shi·_sub_rows
–
s1
 );

628  
r
 = 
˘x
->
∫d
 ; --r ; )

629 #i‡
	`deföed
–
VERSION_1
 )

631 
	`add_round_key
–
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

632 
	`öv_mix_sub_cﬁumns
–
s1
 );

635 { 
uöt8_t
 
s2
[
N_BLOCK
];

636 
	`c›y_™d_key
–
s2
, 
s1
, 
˘x
->
ksch
 + 
r
 * 
N_BLOCK
 );

637 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

640 
	`c›y_™d_key
–
out
, 
s1
, 
˘x
->
ksch
 );

645 
	}
}

649 
ªtu∫_ty≥
 
	$´s_cbc_de¸y±
–c⁄° 
uöt8_t
 *
ö
, uöt8_à*
out
,

650 
öt32_t
 
n_block
, 
uöt8_t
 
iv
[
N_BLOCK
], c⁄° 
´s_c⁄ãxt
 
˘x
[1] )

652 
n_block
--)

653 { 
uöt8_t
 
tmp
[
N_BLOCK
];

656 
	`block_c›y
(
tmp
, 
ö
);

657 if(
	`´s_de¸y±
(
ö
, 
out
, 
˘x
Ë!
EXIT_SUCCESS
)

658  
EXIT_FAILURE
;

659 
	`x‹_block
(
out
, 
iv
);

661 
	`block_c›y
(
iv
, 
tmp
);

662 
ö
 +
N_BLOCK
;

663 
out
 +
N_BLOCK
;

665  
EXIT_SUCCESS
;

666 
	}
}

670 #i‡
deföed
–
AES_ENC_128_OTFK
 )

674 
	$upd©e_í¸y±_key_128
–
uöt8_t
 
k
[
N_BLOCK
], uöt8_à*
rc
 )

675 { 
uöt8_t
 
cc
;

677 
k
[0] ^
	`s_box
(k[13]Ë^ *
rc
;

678 
k
[1] ^
	`s_box
(k[14]);

679 
k
[2] ^
	`s_box
(k[15]);

680 
k
[3] ^
	`s_box
(k[12]);

681 *
rc
 = 
	`f2
( *rc );

683 
cc
 = 4; cc < 16; cc += 4 )

685 
k
[
cc
 + 0] ^= k[cc - 4];

686 
k
[
cc
 + 1] ^= k[cc - 3];

687 
k
[
cc
 + 2] ^= k[cc - 2];

688 
k
[
cc
 + 3] ^= k[cc - 1];

690 
	}
}

694 
	$´s_í¸y±_128
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK],

695 c⁄° 
uöt8_t
 
key
[
N_BLOCK
], uöt8_à
o_key
[N_BLOCK] )

696 { 
uöt8_t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 1;

698 if(
o_key
 !
key
)

699 
	`block_c›y
–
o_key
, 
key
 );

700 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

702  
r
 = 1 ;Ñ < 10 ; ++r )

703 #i‡
	`deföed
–
VERSION_1
 )

705 
	`mix_sub_cﬁumns
–
s1
 );

706 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

707 
	`add_round_key
–
s1
, 
o_key
 );

710 { 
uöt8_t
 
s2
[
N_BLOCK
];

711 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

712 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

713 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 );

717 
	`shi·_sub_rows
–
s1
 );

718 
	`upd©e_í¸y±_key_128
–
o_key
, &
rc
 );

719 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

720 
	}
}

724 #i‡
deföed
–
AES_DEC_128_OTFK
 )

728 
	$upd©e_de¸y±_key_128
–
uöt8_t
 
k
[
N_BLOCK
], uöt8_à*
rc
 )

729 { 
uöt8_t
 
cc
;

731  
cc
 = 12; cc > 0; cc -= 4 )

733 
k
[
cc
 + 0] ^= k[cc - 4];

734 
k
[
cc
 + 1] ^= k[cc - 3];

735 
k
[
cc
 + 2] ^= k[cc - 2];

736 
k
[
cc
 + 3] ^= k[cc - 1];

738 *
rc
 = 
	`d2
(*rc);

739 
k
[0] ^
	`s_box
(k[13]Ë^ *
rc
;

740 
k
[1] ^
	`s_box
(k[14]);

741 
k
[2] ^
	`s_box
(k[15]);

742 
k
[3] ^
	`s_box
(k[12]);

743 
	}
}

747 
	$´s_de¸y±_128
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK],

748 c⁄° 
uöt8_t
 
key
[
N_BLOCK
], uöt8_à
o_key
[N_BLOCK] )

750 
uöt8_t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 0x6c;

751 if(
o_key
 !
key
)

752 
	`block_c›y
–
o_key
, 
key
 );

754 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

755 
	`öv_shi·_sub_rows
–
s1
 );

757  
r
 = 10 ; --r ; )

758 #i‡
	`deföed
–
VERSION_1
 )

760 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

761 
	`add_round_key
–
s1
, 
o_key
 );

762 
	`öv_mix_sub_cﬁumns
–
s1
 );

765 { 
uöt8_t
 
s2
[
N_BLOCK
];

766 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

767 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 );

768 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

771 
	`upd©e_de¸y±_key_128
–
o_key
, &
rc
 );

772 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

773 
	}
}

777 #i‡
deföed
–
AES_ENC_256_OTFK
 )

781 
	$upd©e_í¸y±_key_256
–
uöt8_t
 
k
[2 * 
N_BLOCK
], uöt8_à*
rc
 )

782 { 
uöt8_t
 
cc
;

784 
k
[0] ^
	`s_box
(k[29]Ë^ *
rc
;

785 
k
[1] ^
	`s_box
(k[30]);

786 
k
[2] ^
	`s_box
(k[31]);

787 
k
[3] ^
	`s_box
(k[28]);

788 *
rc
 = 
	`f2
( *rc );

790 
cc
 = 4; cc < 16; cc += 4)

792 
k
[
cc
 + 0] ^= k[cc - 4];

793 
k
[
cc
 + 1] ^= k[cc - 3];

794 
k
[
cc
 + 2] ^= k[cc - 2];

795 
k
[
cc
 + 3] ^= k[cc - 1];

798 
k
[16] ^
	`s_box
(k[12]);

799 
k
[17] ^
	`s_box
(k[13]);

800 
k
[18] ^
	`s_box
(k[14]);

801 
k
[19] ^
	`s_box
(k[15]);

803  
cc
 = 20; cc < 32; cc += 4 )

805 
k
[
cc
 + 0] ^= k[cc - 4];

806 
k
[
cc
 + 1] ^= k[cc - 3];

807 
k
[
cc
 + 2] ^= k[cc - 2];

808 
k
[
cc
 + 3] ^= k[cc - 1];

810 
	}
}

814 
	$´s_í¸y±_256
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK],

815 c⁄° 
uöt8_t
 
key
[2 * 
N_BLOCK
], uöt8_à
o_key
[2 * N_BLOCK] )

817 
uöt8_t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 1;

818 if(
o_key
 !
key
)

820 
	`block_c›y
–
o_key
, 
key
 );

821 
	`block_c›y
–
o_key
 + 16, 
key
 + 16 );

823 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

825  
r
 = 1 ;Ñ < 14 ; ++r )

826 #i‡
	`deföed
–
VERSION_1
 )

828 
	`mix_sub_cﬁumns
(
s1
);

829 if–
r
 & 1 )

830 
	`add_round_key
–
s1
, 
o_key
 + 16 );

833 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

834 
	`add_round_key
–
s1
, 
o_key
 );

838 { 
uöt8_t
 
s2
[
N_BLOCK
];

839 
	`mix_sub_cﬁumns
–
s2
, 
s1
 );

840 if–
r
 & 1 )

841 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 + 16 );

844 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

845 
	`c›y_™d_key
–
s1
, 
s2
, 
o_key
 );

850 
	`shi·_sub_rows
–
s1
 );

851 
	`upd©e_í¸y±_key_256
–
o_key
, &
rc
 );

852 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

853 
	}
}

857 #i‡
deföed
–
AES_DEC_256_OTFK
 )

861 
	$upd©e_de¸y±_key_256
–
uöt8_t
 
k
[2 * 
N_BLOCK
], uöt8_à*
rc
 )

862 { 
uöt8_t
 
cc
;

864 
cc
 = 28; cc > 16; cc -= 4)

866 
k
[
cc
 + 0] ^= k[cc - 4];

867 
k
[
cc
 + 1] ^= k[cc - 3];

868 
k
[
cc
 + 2] ^= k[cc - 2];

869 
k
[
cc
 + 3] ^= k[cc - 1];

872 
k
[16] ^
	`s_box
(k[12]);

873 
k
[17] ^
	`s_box
(k[13]);

874 
k
[18] ^
	`s_box
(k[14]);

875 
k
[19] ^
	`s_box
(k[15]);

877 
cc
 = 12; cc > 0; cc -= 4)

879 
k
[
cc
 + 0] ^= k[cc - 4];

880 
k
[
cc
 + 1] ^= k[cc - 3];

881 
k
[
cc
 + 2] ^= k[cc - 2];

882 
k
[
cc
 + 3] ^= k[cc - 1];

885 *
rc
 = 
	`d2
(*rc);

886 
k
[0] ^
	`s_box
(k[29]Ë^ *
rc
;

887 
k
[1] ^
	`s_box
(k[30]);

888 
k
[2] ^
	`s_box
(k[31]);

889 
k
[3] ^
	`s_box
(k[28]);

890 
	}
}

895 
	$´s_de¸y±_256
–c⁄° 
uöt8_t
 
ö
[
N_BLOCK
], uöt8_à
out
[N_BLOCK],

896 c⁄° 
uöt8_t
 
key
[2 * 
N_BLOCK
], uöt8_à
o_key
[2 * N_BLOCK] )

898 
uöt8_t
 
s1
[
N_BLOCK
], 
r
, 
rc
 = 0x80;

900 if(
o_key
 !
key
)

902 
	`block_c›y
–
o_key
, 
key
 );

903 
	`block_c›y
–
o_key
 + 16, 
key
 + 16 );

906 
	`c›y_™d_key
–
s1
, 
ö
, 
o_key
 );

907 
	`öv_shi·_sub_rows
–
s1
 );

909  
r
 = 14 ; --r ; )

910 #i‡
	`deföed
–
VERSION_1
 )

912 if––
r
 & 1 ) )

914 
	`upd©e_de¸y±_key_256
–
o_key
, &
rc
 );

915 
	`add_round_key
–
s1
, 
o_key
 + 16 );

918 
	`add_round_key
–
s1
, 
o_key
 );

919 
	`öv_mix_sub_cﬁumns
–
s1
 );

922 { 
uöt8_t
 
s2
[
N_BLOCK
];

923 if––
r
 & 1 ) )

925 
	`upd©e_de¸y±_key_256
–
o_key
, &
rc
 );

926 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 + 16 );

929 
	`c›y_™d_key
–
s2
, 
s1
, 
o_key
 );

930 
	`öv_mix_sub_cﬁumns
–
s1
, 
s2
 );

933 
	`c›y_™d_key
–
out
, 
s1
, 
o_key
 );

934 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\crypto\cmac.c

37 
	~<°döt.h
>

38 
	~"´s.h
"

39 
	~"cmac.h
"

40 
	~"utûôõs.h
"

42 
	#LSHIFT
(
v
, 
r
) do { \

43 
öt32_t
 
i
; \

44 
i
 = 0; i < 15; i++) \

45 (
r
)[
i
] = (
v
)[i] << 1 | (v)[i + 1] >> 7; \

46 (
r
)[15] = (
v
)[15] << 1; \

47 } 0)

	)

49 
	#XOR
(
v
, 
r
) do { \

50 
öt32_t
 
i
; \

51 
i
 = 0; i < 16; i++) \

53 (
r
)[
i
] = (r)[i] ^ (
v
)[i]; \

56 

	)

58 
	$AES_CMAC_Inô
(
AES_CMAC_CTX
 *
˘x
)

60 
	`mem£t1
(
˘x
->
X
, 0,  ctx->X);

61 
˘x
->
M_n
 = 0;

62 
	`mem£t1
(
˘x
->
rijnd´l
.
ksch
, '\0', 240);

63 
	}
}

65 
	$AES_CMAC_SëKey
(
AES_CMAC_CTX
 *
˘x
, c⁄° 
uöt8_t
 
key
[
AES_CMAC_KEY_LENGTH
])

68 
	`´s_£t_key
–
key
, 
AES_CMAC_KEY_LENGTH
, &
˘x
->
rijnd´l
);

69 
	}
}

71 
	$AES_CMAC_Upd©e
(
AES_CMAC_CTX
 *
˘x
, c⁄° 
uöt8_t
 *
d©a
, 
uöt32_t
 
Àn
)

73 
uöt32_t
 
mÀn
;

74 
uöt8_t
 
ö
[16];

76 i‡(
˘x
->
M_n
 > 0) {

77 
mÀn
 = 
	`MIN
(16 - 
˘x
->
M_n
, 
Àn
);

78 
	`mem˝y1
(
˘x
->
M_œ°
 + ctx->
M_n
, 
d©a
, 
mÀn
);

79 
˘x
->
M_n
 +
mÀn
;

80 i‡(
˘x
->
M_n
 < 16 || 
Àn
 =
mÀn
)

82 
	`XOR
(
˘x
->
M_œ°
, ctx->
X
);

84 
	`´s_í¸y±
–
˘x
->
X
, ctx->X, &˘x->
rijnd´l
);

85 
d©a
 +
mÀn
;

86 
Àn
 -
mÀn
;

88 
Àn
 > 16) {

90 
	`XOR
(
d©a
, 
˘x
->
X
);

93 
	`mem˝y1
(
ö
, &
˘x
->
X
[0], 16);

94 
	`´s_í¸y±
–
ö
, in, &
˘x
->
rijnd´l
);

95 
	`mem˝y1
(&
˘x
->
X
[0], 
ö
, 16);

97 
d©a
 += 16;

98 
Àn
 -= 16;

101 
	`mem˝y1
(
˘x
->
M_œ°
, 
d©a
, 
Àn
);

102 
˘x
->
M_n
 = 
Àn
;

103 
	}
}

105 
	$AES_CMAC_FöÆ
(
uöt8_t
 
dige°
[
AES_CMAC_DIGEST_LENGTH
], 
AES_CMAC_CTX
 *
˘x
)

107 
uöt8_t
 
K
[16];

108 
uöt8_t
 
ö
[16];

110 
	`mem£t1
(
K
, '\0', 16);

114 
	`´s_í¸y±
–
K
, K, &
˘x
->
rijnd´l
);

116 i‡(
K
[0] & 0x80) {

117 
	`LSHIFT
(
K
, K);

118 
K
[15] ^= 0x87;

120 
	`LSHIFT
(
K
, K);

123 i‡(
˘x
->
M_n
 == 16) {

125 
	`XOR
(
K
, 
˘x
->
M_œ°
);

129 i‡(
K
[0] & 0x80) {

130 
	`LSHIFT
(
K
, K);

131 
K
[15] ^= 0x87;

133 
	`LSHIFT
(
K
, K);

136 
˘x
->
M_œ°
[˘x->
M_n
] = 0x80;

137 ++
˘x
->
M_n
 < 16)

138 
˘x
->
M_œ°
[˘x->
M_n
] = 0;

140 
	`XOR
(
K
, 
˘x
->
M_œ°
);

144 
	`XOR
(
˘x
->
M_œ°
, ctx->
X
);

148 
	`mem˝y1
(
ö
, &
˘x
->
X
[0], 16);

149 
	`´s_í¸y±
(
ö
, 
dige°
, &
˘x
->
rijnd´l
);

150 
	`mem£t1
(
K
, 0,  K);

152 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\delay.c

15 
	~"bﬂrd.h
"

17 
	$Dñay
–
s
 )

19 
	`DñayMs
–
s
 * 1000.0f );

20 
	}
}

22 
	$DñayMs
–
uöt32_t
 
ms
 )

24 
	`HAL_Dñay
–
ms
 );

25 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\fifo.c

15 
	~"fifo.h
"

17 
uöt16_t
 
	$FifoNext
–
Fifo_t
 *
fifo
, 
uöt16_t
 
ödex
 )

19  ( 
ödex
 + 1 ) % 
fifo
->
Size
;

20 
	}
}

22 
	$FifoInô
–
Fifo_t
 *
fifo
, 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
 )

24 
fifo
->
Begö
 = 0;

25 
fifo
->
End
 = 0;

26 
fifo
->
D©a
 = 
buf„r
;

27 
fifo
->
Size
 = 
size
;

28 
	}
}

30 
	$FifoPush
–
Fifo_t
 *
fifo
, 
uöt8_t
 
d©a
 )

32 
fifo
->
End
 = 
	`FifoNext
( fifo, fifo->End );

33 
fifo
->
D©a
[fifo->
End
] = 
d©a
;

34 
	}
}

36 
uöt8_t
 
	$FifoP›
–
Fifo_t
 *
fifo
 )

38 
uöt8_t
 
d©a
 = 
fifo
->
D©a
[
	`FifoNext
–fifo, fifo->
Begö
 )];

40 
fifo
->
Begö
 = 
	`FifoNext
( fifo, fifo->Begin );

41  
d©a
;

42 
	}
}

44 
	$FifoFlush
–
Fifo_t
 *
fifo
 )

46 
fifo
->
Begö
 = 0;

47 
fifo
->
End
 = 0;

48 
	}
}

50 
boﬁ
 
	$IsFifoEm±y
–
Fifo_t
 *
fifo
 )

52  ( 
fifo
->
Begö
 =fifo->
End
 );

53 
	}
}

55 
boﬁ
 
	$IsFifoFuŒ
–
Fifo_t
 *
fifo
 )

57  ( 
	`FifoNext
–
fifo
, fifo->
End
 ) =fifo->
Begö
 );

58 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\gpio.c

19 
	~"bﬂrd.h
"

21 
	~"gpio-bﬂrd.h
"

23 #i‡
deföed
–
BOARD_IOE_EXT
 )

24 
	~"gpio-i€.h
"

27 
	$GpioInô
–
Gpio_t
 *
obj
, 
PöNames
 
pö
, 
PöModes
 
mode
, 
PöC⁄figs
 
c⁄fig
, 
PöTy≥s
 
ty≥
, 
uöt32_t
 
vÆue
 )

29 if––
uöt32_t
 )–
pö
 >> 4 ) <= 6 )

31 
	`GpioMcuInô
–
obj
, 
pö
, 
mode
, 
c⁄fig
, 
ty≥
, 
vÆue
 );

35 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

37 
	`GpioI€Inô
–
obj
, 
pö
, 
mode
, 
c⁄fig
, 
ty≥
, 
vÆue
 );

40 
	}
}

42 
	$GpioSëI¡îru±
–
Gpio_t
 *
obj
, 
IrqModes
 
úqMode
, 
IrqPri‹ôõs
 
úqPri‹ôy
, 
GpioIrqH™dÀr
 *
úqH™dÀr
 )

44 if––
uöt32_t
 )–
obj
->
pö
 >> 4 ) <= 6 )

46 
	`GpioMcuSëI¡îru±
–
obj
, 
úqMode
, 
úqPri‹ôy
, 
úqH™dÀr
 );

50 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

52 
	`GpioI€SëI¡îru±
–
obj
, 
úqMode
, 
úqPri‹ôy
, 
úqH™dÀr
 );

55 
	}
}

57 
	$GpioRemoveI¡îru±
–
Gpio_t
 *
obj
 )

59 if––
uöt32_t
 )–
obj
->
pö
 >> 4 ) <= 6 )

65 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

70 
	}
}

72 
	$GpioWrôe
–
Gpio_t
 *
obj
, 
uöt32_t
 
vÆue
 )

74 if––
uöt32_t
 )–
obj
->
pö
 >> 4 ) <= 6 )

76 
	`GpioMcuWrôe
–
obj
, 
vÆue
 );

80 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

82 
	`GpioI€Wrôe
–
obj
, 
vÆue
 );

85 
	}
}

87 
	$GpioToggÀ
–
Gpio_t
 *
obj
 )

89 if––
uöt32_t
 )–
obj
->
pö
 >> 4 ) <= 6 )

91 
	`GpioMcuToggÀ
–
obj
 );

95 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

97 
	`GpioI€Wrôe
–
obj
, 
	`GpioI€Ród
( obj ) ^ 1 );

100 
	}
}

102 
uöt32_t
 
	$GpioRód
–
Gpio_t
 *
obj
 )

104 if––
uöt32_t
 )–
obj
->
pö
 >> 4 ) <= 6 )

106  
	`GpioMcuRód
–
obj
 );

110 #i‡
	`deföed
–
BOARD_IOE_EXT
 )

112  
	`GpioI€Ród
–
obj
 );

117 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\i2c.c

15 
	~"bﬂrd.h
"

16 
	~"i2c-bﬂrd.h
"

21 
boﬁ
 
	gI2cInôülized
 = 
Ál£
;

23 
	$I2cInô
–
I2c_t
 *
obj
, 
PöNames
 
s˛
, PöName†
sda
 )

25 if–
I2cInôülized
 =
Ál£
 )

27 
I2cInôülized
 = 
åue
;

29 
	`I2cMcuInô
–
obj
, 
s˛
, 
sda
 );

30 
	`I2cMcuF‹m©
–
obj
, 
MODE_I2C
, 
I2C_DUTY_CYCLE_2
, 
åue
, 
I2C_ACK_ADD_7_BIT
, 400000 );

32 
	}
}

34 
	$I2cDeInô
–
I2c_t
 *
obj
 )

36 
I2cInôülized
 = 
Ál£
;

37 
	`I2cMcuDeInô
–
obj
 );

38 
	}
}

40 
	$I2cRe£tBus
–
I2c_t
 *
obj
 )

42 
I2cInôülized
 = 
Ál£
;

43 
	`I2cInô
–
obj
, 
I2C_SCL
, 
I2C_SDA
 );

44 
	}
}

46 
uöt8_t
 
	$I2cWrôe
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à
d©a
 )

48 if–
I2cInôülized
 =
åue
 )

50 if–
	`I2cMcuWrôeBuf„r
–
obj
, 
devi˚Addr
, 
addr
, &
d©a
, 1 ) =
FAIL
 )

53 if–
	`I2cMcuWrôeBuf„r
–
obj
, 
devi˚Addr
, 
addr
, &
d©a
, 1 ) =
FAIL
 )

55  
FAIL
;

59  
SUCCESS
;

64  
SUCCESS
;

69  
FAIL
;

71 
	}
}

73 
uöt8_t
 
	$I2cWrôeBuf„r
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à*
buf„r
, uöt16_à
size
 )

75 if–
I2cInôülized
 =
åue
 )

77 if–
	`I2cMcuWrôeBuf„r
–
obj
, 
devi˚Addr
, 
addr
, 
buf„r
, 
size
 ) =
FAIL
 )

80 if–
	`I2cMcuWrôeBuf„r
–
obj
, 
devi˚Addr
, 
addr
, 
buf„r
, 
size
 ) =
FAIL
 )

82  
FAIL
;

86  
SUCCESS
;

91  
SUCCESS
;

96  
FAIL
;

98 
	}
}

100 
uöt8_t
 
	$I2cRód
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à*
d©a
 )

102 if–
I2cInôülized
 =
åue
 )

104 –
	`I2cMcuRódBuf„r
–
obj
, 
devi˚Addr
, 
addr
, 
d©a
, 1 ) );

108  
FAIL
;

110 
	}
}

112 
uöt8_t
 
	$I2cRódBuf„r
–
I2c_t
 *
obj
, 
uöt8_t
 
devi˚Addr
, 
uöt16_t
 
addr
, uöt8_à*
buf„r
, uöt16_à
size
 )

114 if–
I2cInôülized
 =
åue
 )

116 –
	`I2cMcuRódBuf„r
–
obj
, 
devi˚Addr
, 
addr
, 
buf„r
, 
size
 ) );

120  
FAIL
;

122 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\timer.c

15 
	~"bﬂrd.h
"

16 
	~"πc-bﬂrd.h
"

22 vﬁ©ûê
uöt8_t
 
	gHasLo›edThroughMaö
 = 0;

27 
TimîEvít_t
 *
	gTimîLi°Hód
 = 
NULL
;

38 
TimîIn£πNewHódTimî
–
TimîEvít_t
 *
obj
, 
uöt32_t
 
ªmaöögTime
 );

49 
TimîIn£πTimî
–
TimîEvít_t
 *
obj
, 
uöt32_t
 
ªmaöögTime
 );

56 
TimîSëTimeout
–
TimîEvít_t
 *
obj
 );

64 
boﬁ
 
TimîExi°s
–
TimîEvít_t
 *
obj
 );

71 
TimîTime_t
 
TimîGëVÆue
( );

73 
TimîInô
–
TimîEvít_t
 *
obj
, –*
ˇŒback
 )( ) )

75 
obj
->
Time°amp
 = 0;

76 
obj
->
RñﬂdVÆue
 = 0;

77 
obj
->
IsRu¬ög
 = 
Ál£
;

78 
obj
->
CÆlback
 = 
ˇŒback
;

79 
obj
->
Next
 = 
NULL
;

80 
	}
}

82 
	$TimîSèπ
–
TimîEvít_t
 *
obj
 )

84 
uöt32_t
 
ñ≠£dTime
 = 0;

85 
uöt32_t
 
ªmaöögTime
 = 0;

87 
	`BﬂrdDißbÀIrq
( );

89 if––
obj
 =
NULL
 ) || ( 
	`TimîExi°s
–obj ) =
åue
 ) )

91 
	`BﬂrdE«bÀIrq
( );

95 
obj
->
Time°amp
 = obj->
RñﬂdVÆue
;

96 
obj
->
IsRu¬ög
 = 
Ál£
;

98 if–
TimîLi°Hód
 =
NULL
 )

100 
	`TimîIn£πNewHódTimî
–
obj
, obj->
Time°amp
 );

104 if–
TimîLi°Hód
->
IsRu¬ög
 =
åue
 )

106 
ñ≠£dTime
 = 
	`TimîGëVÆue
( );

107 if–
ñ≠£dTime
 > 
TimîLi°Hód
->
Time°amp
 )

109 
ñ≠£dTime
 = 
TimîLi°Hód
->
Time°amp
;

111 
ªmaöögTime
 = 
TimîLi°Hód
->
Time°amp
 - 
ñ≠£dTime
;

115 
ªmaöögTime
 = 
TimîLi°Hód
->
Time°amp
;

118 if–
obj
->
Time°amp
 < 
ªmaöögTime
 )

120 
	`TimîIn£πNewHódTimî
–
obj
, 
ªmaöögTime
 );

124 
	`TimîIn£πTimî
–
obj
, 
ªmaöögTime
 );

127 
	`BﬂrdE«bÀIrq
( );

128 
	}
}

130 
	$TimîIn£πTimî
–
TimîEvít_t
 *
obj
, 
uöt32_t
 
ªmaöögTime
 )

132 
uöt32_t
 
aggªg©edTime°amp
 = 0;

133 
uöt32_t
 
aggªg©edTime°ampNext
 = 0;

135 
TimîEvít_t
* 
¥ev
 = 
TimîLi°Hód
;

136 
TimîEvít_t
* 
cur
 = 
TimîLi°Hód
->
Next
;

138 if–
cur
 =
NULL
 )

140 
obj
->
Time°amp
 -
ªmaöögTime
;

141 
¥ev
->
Next
 = 
obj
;

142 
obj
->
Next
 = 
NULL
;

146 
aggªg©edTime°amp
 = 
ªmaöögTime
;

147 
aggªg©edTime°ampNext
 = 
ªmaöögTime
 + 
cur
->
Time°amp
;

149  
¥ev
 !
NULL
 )

151 if–
aggªg©edTime°ampNext
 > 
obj
->
Time°amp
 )

153 
obj
->
Time°amp
 -
aggªg©edTime°amp
;

154 if–
cur
 !
NULL
 )

156 
cur
->
Time°amp
 -
obj
->Timestamp;

158 
¥ev
->
Next
 = 
obj
;

159 
obj
->
Next
 = 
cur
;

164 
¥ev
 = 
cur
;

165 
cur
 = cur->
Next
;

166 if–
cur
 =
NULL
 )

168 
aggªg©edTime°amp
 = 
aggªg©edTime°ampNext
;

169 
obj
->
Time°amp
 -
aggªg©edTime°amp
;

170 
¥ev
->
Next
 = 
obj
;

171 
obj
->
Next
 = 
NULL
;

176 
aggªg©edTime°amp
 = 
aggªg©edTime°ampNext
;

177 
aggªg©edTime°ampNext
 =ággªg©edTime°ampNexà+ 
cur
->
Time°amp
;

182 
	}
}

184 
	$TimîIn£πNewHódTimî
–
TimîEvít_t
 *
obj
, 
uöt32_t
 
ªmaöögTime
 )

186 
TimîEvít_t
* 
cur
 = 
TimîLi°Hód
;

188 if–
cur
 !
NULL
 )

190 
cur
->
Time°amp
 = 
ªmaöögTime
 - 
obj
->Timestamp;

191 
cur
->
IsRu¬ög
 = 
Ál£
;

194 
obj
->
Next
 = 
cur
;

195 
obj
->
IsRu¬ög
 = 
åue
;

196 
TimîLi°Hód
 = 
obj
;

197 
	`TimîSëTimeout
–
TimîLi°Hód
 );

198 
	}
}

200 
	$TimîIrqH™dÀr
( )

202 
uöt32_t
 
ñ≠£dTime
 = 0;

205 i‡–
TimîLi°Hód
 =
NULL
 )

210 
ñ≠£dTime
 = 
	`TimîGëVÆue
( );

212 if–
ñ≠£dTime
 >
TimîLi°Hód
->
Time°amp
 )

214 
TimîLi°Hód
->
Time°amp
 = 0;

218 
TimîLi°Hód
->
Time°amp
 -
ñ≠£dTime
;

221 
TimîLi°Hód
->
IsRu¬ög
 = 
Ál£
;

223  ( 
TimîLi°Hód
 !
NULL
 ) && ( TimîLi°Hód->
Time°amp
 == 0 ) )

225 
TimîEvít_t
* 
ñ≠£dTimî
 = 
TimîLi°Hód
;

226 
TimîLi°Hód
 = TimîLi°Hód->
Next
;

228 if–
ñ≠£dTimî
->
CÆlback
 !
NULL
 )

230 
ñ≠£dTimî
->
	`CÆlback
( );

235 if–
TimîLi°Hód
 !
NULL
 )

237 if–
TimîLi°Hód
->
IsRu¬ög
 !
åue
 )

239 
TimîLi°Hód
->
IsRu¬ög
 = 
åue
;

240 
	`TimîSëTimeout
–
TimîLi°Hód
 );

243 
	}
}

245 
	$TimîSt›
–
TimîEvít_t
 *
obj
 )

247 
	`BﬂrdDißbÀIrq
( );

249 
uöt32_t
 
ñ≠£dTime
 = 0;

250 
uöt32_t
 
ªmaöögTime
 = 0;

252 
TimîEvít_t
* 
¥ev
 = 
TimîLi°Hód
;

253 
TimîEvít_t
* 
cur
 = 
TimîLi°Hód
;

256 if––
TimîLi°Hód
 =
NULL
 ) || ( 
obj
 == NULL ) )

258 
	`BﬂrdE«bÀIrq
( );

262 if–
TimîLi°Hód
 =
obj
 )

264 if–
TimîLi°Hód
->
IsRu¬ög
 =
åue
 )

266 
ñ≠£dTime
 = 
	`TimîGëVÆue
( );

267 if–
ñ≠£dTime
 > 
obj
->
Time°amp
 )

269 
ñ≠£dTime
 = 
obj
->
Time°amp
;

272 
ªmaöögTime
 = 
obj
->
Time°amp
 - 
ñ≠£dTime
;

274 if–
TimîLi°Hód
->
Next
 !
NULL
 )

276 
TimîLi°Hód
->
IsRu¬ög
 = 
Ál£
;

277 
TimîLi°Hód
 = TimîLi°Hód->
Next
;

278 
TimîLi°Hód
->
Time°amp
 +
ªmaöögTime
;

279 
TimîLi°Hód
->
IsRu¬ög
 = 
åue
;

280 
	`TimîSëTimeout
–
TimîLi°Hód
 );

284 
TimîLi°Hód
 = 
NULL
;

289 if–
TimîLi°Hód
->
Next
 !
NULL
 )

291 
ªmaöögTime
 = 
obj
->
Time°amp
;

292 
TimîLi°Hód
 = TimîLi°Hód->
Next
;

293 
TimîLi°Hód
->
Time°amp
 +
ªmaöögTime
;

297 
TimîLi°Hód
 = 
NULL
;

303 
ªmaöögTime
 = 
obj
->
Time°amp
;

305  
cur
 !
NULL
 )

307 if–
cur
 =
obj
 )

309 if–
cur
->
Next
 !
NULL
 )

311 
cur
 = cur->
Next
;

312 
¥ev
->
Next
 = 
cur
;

313 
cur
->
Time°amp
 +
ªmaöögTime
;

317 
cur
 = 
NULL
;

318 
¥ev
->
Next
 = 
cur
;

324 
¥ev
 = 
cur
;

325 
cur
 = cur->
Next
;

329 
	`BﬂrdE«bÀIrq
( );

330 
	}
}

332 
boﬁ
 
	$TimîExi°s
–
TimîEvít_t
 *
obj
 )

334 
TimîEvít_t
* 
cur
 = 
TimîLi°Hód
;

336  
cur
 !
NULL
 )

338 if–
cur
 =
obj
 )

340  
åue
;

342 
cur
 = cur->
Next
;

344  
Ál£
;

345 
	}
}

347 
	$TimîRe£t
–
TimîEvít_t
 *
obj
 )

349 
	`TimîSt›
–
obj
 );

350 
	`TimîSèπ
–
obj
 );

351 
	}
}

353 
	$TimîSëVÆue
–
TimîEvít_t
 *
obj
, 
uöt32_t
 
vÆue
 )

355 
	`TimîSt›
–
obj
 );

356 
obj
->
Time°amp
 = 
vÆue
;

357 
obj
->
RñﬂdVÆue
 = 
vÆue
;

358 
	}
}

360 
TimîTime_t
 
	$TimîGëVÆue
( )

362  
	`RtcGëEœp£dAœrmTime
( );

363 
	}
}

365 
TimîTime_t
 
	$TimîGëCuºítTime
( )

367  
	`RtcGëTimîVÆue
( );

368 
	}
}

370 
TimîTime_t
 
	$TimîGëEœp£dTime
–
TimîTime_t
 
ßvedTime
 )

372  
	`RtcCompuãEœp£dTime
–
ßvedTime
 );

373 
	}
}

375 
TimîTime_t
 
	$TimîGëFutuªTime
–
TimîTime_t
 
evítInFutuª
 )

377  
	`RtcCompuãFutuªEvítTime
–
evítInFutuª
 );

378 
	}
}

380 
	$TimîSëTimeout
–
TimîEvít_t
 *
obj
 )

382 
HasLo›edThroughMaö
 = 0;

383 
obj
->
Time°amp
 = 
	`RtcGëAdju°edTimeoutVÆue
( obj->Timestamp );

384 
	`RtcSëTimeout
–
obj
->
Time°amp
 );

385 
	}
}

387 
	$TimîLowPowîH™dÀr
( )

389 if––
TimîLi°Hód
 !
NULL
 ) && ( TimîLi°Hód->
IsRu¬ög
 =
åue
 ) )

391 if–
HasLo›edThroughMaö
 < 5 )

393 
HasLo›edThroughMaö
++;

397 
HasLo›edThroughMaö
 = 0;

398 if–
	`GëBﬂrdPowîSour˚
–Ë=
BATTERY_POWER
 )

400 
	`RtcE¡îLowPowîSt›Mode
( );

404 
	}
}

	@C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\uart.c

15 
	~"bﬂrd.h
"

16 
	~"u¨t-bﬂrd.h
"

17 #i‡
deföed
–
USE_USB_CDC
 )

18 
	~"u¨t-usb-bﬂrd.h
"

21 
	~"u¨t.h
"

27 
	#TX_BUFFER_RETRY_COUNT
 10

	)

29 
	$U¨tInô
–
U¨t_t
 *
obj
, 
uöt8_t
 
u¨tId
, 
PöNames
 
tx
, PöName†
rx
 )

31 if–
obj
->
IsInôülized
 =
Ál£
 )

33 
obj
->
IsInôülized
 = 
åue
;

35 if–
u¨tId
 =
UART_USB_CDC
 )

37 #i‡
	`deföed
–
USE_USB_CDC
 )

38 
	`U¨tUsbInô
–
obj
, 
u¨tId
, 
NC
, NC );

43 
	`U¨tMcuInô
–
obj
, 
u¨tId
, 
tx
, 
rx
 );

46 
	}
}

48 
	$U¨tC⁄fig
–
U¨t_t
 *
obj
, 
U¨tMode_t
 
mode
, 
uöt32_t
 
baudøã
, 
W‹dLígth_t
 
w‹dLígth
, 
St›Bôs_t
 
°›Bôs
, 
P¨ôy_t
 
∑rôy
, 
FlowCål_t
 
ÊowCål
 )

50 if–
obj
->
IsInôülized
 =
Ál£
 )

53 
	`as£π_∑øm
–
FAIL
 );

55 if–
obj
->
U¨tId
 =
UART_USB_CDC
 )

57 #i‡
	`deföed
–
USE_USB_CDC
 )

58 
	`U¨tUsbC⁄fig
–
obj
, 
mode
, 
baudøã
, 
w‹dLígth
, 
°›Bôs
, 
∑rôy
, 
ÊowCål
 );

63 
	`U¨tMcuC⁄fig
–
obj
, 
mode
, 
baudøã
, 
w‹dLígth
, 
°›Bôs
, 
∑rôy
, 
ÊowCål
 );

65 
	}
}

67 
	$U¨tDeInô
–
U¨t_t
 *
obj
 )

69 
obj
->
IsInôülized
 = 
Ál£
;

70 if–
obj
->
U¨tId
 =
UART_USB_CDC
 )

72 #i‡
	`deföed
–
USE_USB_CDC
 )

73 
	`U¨tUsbDeInô
–
obj
 );

78 
	`U¨tMcuDeInô
–
obj
 );

80 
	}
}

82 
uöt8_t
 
	$U¨tPutCh¨
–
U¨t_t
 *
obj
, 
uöt8_t
 
d©a
 )

84 if–
obj
->
U¨tId
 =
UART_USB_CDC
 )

86 #i‡
	`deföed
–
USE_USB_CDC
 )

87  
	`U¨tUsbPutCh¨
–
obj
, 
d©a
 );

94  
	`U¨tMcuPutCh¨
–
obj
, 
d©a
 );

96 
	}
}

98 
uöt8_t
 
	$U¨tGëCh¨
–
U¨t_t
 *
obj
, 
uöt8_t
 *
d©a
 )

100 if–
obj
->
U¨tId
 =
UART_USB_CDC
 )

102 #i‡
	`deföed
–
USE_USB_CDC
 )

103  
	`U¨tUsbGëCh¨
–
obj
, 
d©a
 );

110  
	`U¨tMcuGëCh¨
–
obj
, 
d©a
 );

112 
	}
}

114 
uöt8_t
 
	$U¨tPutBuf„r
–
U¨t_t
 *
obj
, 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
 )

116 if–
obj
->
U¨tId
 =
UART_USB_CDC
 )

118 #i‡
	`deföed
–
USE_USB_CDC
 )

119  
	`U¨tUsbPutBuf„r
–
obj
, 
buf„r
, 
size
 );

126 
uöt8_t
 
ªåyCou¡
;

127 
uöt16_t
 
i
;

129  
i
 = 0; i < 
size
; i++ )

131 
ªåyCou¡
 = 0;

132  
	`U¨tPutCh¨
–
obj
, 
buf„r
[
i
] ) != 0 )

134 
ªåyCou¡
++;

137 if–
ªåyCou¡
 > 
TX_BUFFER_RETRY_COUNT
 )

145 
	}
}

147 
uöt8_t
 
	$U¨tGëBuf„r
–
U¨t_t
 *
obj
, 
uöt8_t
 *
buf„r
, 
uöt16_t
 
size
, uöt16_à*
nbRódByãs
 )

149 
uöt16_t
 
loˇlSize
 = 0;

151  
loˇlSize
 < 
size
 )

153 if–
	`U¨tGëCh¨
–
obj
, 
buf„r
 + 
loˇlSize
 ) == 0 )

155 
loˇlSize
++;

163 *
nbRódByãs
 = 
loˇlSize
;

165 if–
loˇlSize
 == 0 )

170 
	}
}

	@
1
.
0
42
6513
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\apps\LoRaMac\classA\XRange\Commissioning.h
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\apps\LoRaMac\classA\XRange\main.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\adc-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\cmsis\arm-gcc\startup_stm32l151xc.s
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\cmsis\system_stm32l1xx.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\gpio-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\i2c-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\rtc-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\spi-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\sx1272-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\XRange\uart-board.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_adc.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_adc_ex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_cortex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_dma.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_gpio.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_i2c.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_pwr.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_pwr_ex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rcc.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rcc_ex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rtc.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_rtc_ex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_spi_ex.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\STM32L1xx_HAL_Driver\Src\stm32l1xx_hal_uart.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\sysIrqHandlers.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\boards\mcu\stm32\utilities.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\mac\LoRaMac.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\mac\LoRaMacCrypto.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\radio\sx1272\sx1272.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\adc.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\crypto\aes.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\crypto\cmac.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\delay.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\fifo.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\gpio.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\i2c.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\timer.c
C:\Users\florent\Documents\homenolot\doc\Recherche\WaspMote\LoRa-Netblocks\Nouveau-XRange\XRange-master\LoRaMac\src\system\uart.c
